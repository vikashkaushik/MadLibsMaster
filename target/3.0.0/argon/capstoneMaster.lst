
/Users/willsigg/Desktop/capstoneMaster/target/3.0.0/argon/capstoneMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002f74  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6f90  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e434  000d6f94  0001e434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000350  2003e4a0  2003e4a0  0002e4a0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7000  000d7000  00027000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7028  000d7028  00027028  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00180cc9  00000000  00000000  0002702c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00017416  00000000  00000000  001a7cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00038b6d  00000000  00000000  001bf10b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002f08  00000000  00000000  001f7c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009710  00000000  00000000  001fab80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000396ed  00000000  00000000  00204290  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003e61e  00000000  00000000  0023d97d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012ab7f  00000000  00000000  0027bf9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008498  00000000  00000000  003a6b1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fd07 	bl	d6a40 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fd0f 	bl	d6a5c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e434 	.word	0x2003e434
   d4048:	000d6f94 	.word	0x000d6f94
   d404c:	2003e4a0 	.word	0x2003e4a0
   d4050:	2003e4a0 	.word	0x2003e4a0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 faf1 	bl	d6644 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6f68 	.word	0x000d6f68
   d407c:	000d6f8c 	.word	0x000d6f8c

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b8d6 	b.w	d4230 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8ff 	bl	d4288 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 ba9b 	b.w	d65c8 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 ba3f 	b.w	d5514 <malloc>

000d4096 <_Znaj>:
   d4096:	f001 ba3d 	b.w	d5514 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 ba43 	b.w	d5524 <free>

000d409e <_ZdaPv>:
   d409e:	f001 ba41 	b.w	d5524 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z3isrv>:
bool hasSentVoteMessage = false;
String voteMessage = "Start voting.";
void isr()
{
  // your interrupt handler code here
  interruptOccured = true;
   d40b4:	4b01      	ldr	r3, [pc, #4]	; (d40bc <_Z3isrv+0x8>)
   d40b6:	2201      	movs	r2, #1
   d40b8:	701a      	strb	r2, [r3, #0]
}
   d40ba:	4770      	bx	lr
   d40bc:	2003e592 	.word	0x2003e592

000d40c0 <__tcf_2>:
String answers[5];
   d40c0:	b538      	push	{r3, r4, r5, lr}
   d40c2:	4d04      	ldr	r5, [pc, #16]	; (d40d4 <__tcf_2+0x14>)
   d40c4:	2404      	movs	r4, #4
   d40c6:	eb05 1004 	add.w	r0, r5, r4, lsl #4
   d40ca:	f001 fceb 	bl	d5aa4 <_ZN6StringD1Ev>
   d40ce:	3c01      	subs	r4, #1
   d40d0:	d2f9      	bcs.n	d40c6 <__tcf_2+0x6>
   d40d2:	bd38      	pop	{r3, r4, r5, pc}
   d40d4:	2003e4d4 	.word	0x2003e4d4

000d40d8 <__tcf_1>:
String words[5] = {"A vacation is when you take a trip to some ", " place with your ", " family. Usually you go to some place that is near a/an ", " or up on a/an ", " . A good vacation place is one where you can ride "}; //, "or play", "or go hunting for", ". I like to spend my time", "or", ". When parents go on a vacation, they spend their time eating three", " a day, and fathers play golf, and mothers sit around"};
   d40d8:	b538      	push	{r3, r4, r5, lr}
   d40da:	4d04      	ldr	r5, [pc, #16]	; (d40ec <__tcf_1+0x14>)
   d40dc:	2404      	movs	r4, #4
   d40de:	eb05 1004 	add.w	r0, r5, r4, lsl #4
   d40e2:	f001 fcdf 	bl	d5aa4 <_ZN6StringD1Ev>
   d40e6:	3c01      	subs	r4, #1
   d40e8:	d2f9      	bcs.n	d40de <__tcf_1+0x6>
   d40ea:	bd38      	pop	{r3, r4, r5, pc}
   d40ec:	2003e5f4 	.word	0x2003e5f4

000d40f0 <__tcf_0>:
String types[5] = {"Adjective", "Adjective", "Noun", "Noun", "Plural noun"};                                                                                                                                                  //, "A game", "Plural noun", "Verb ending in 'ing'", "Verb ending in 'ing'", "Plural noun", "Verb ending in 'ing'"};
   d40f0:	b538      	push	{r3, r4, r5, lr}
   d40f2:	4d04      	ldr	r5, [pc, #16]	; (d4104 <__tcf_0+0x14>)
   d40f4:	2404      	movs	r4, #4
   d40f6:	eb05 1004 	add.w	r0, r5, r4, lsl #4
   d40fa:	f001 fcd3 	bl	d5aa4 <_ZN6StringD1Ev>
   d40fe:	3c01      	subs	r4, #1
   d4100:	d2f9      	bcs.n	d40f6 <__tcf_0+0x6>
   d4102:	bd38      	pop	{r3, r4, r5, pc}
   d4104:	2003e594 	.word	0x2003e594

000d4108 <_Z8callbackPcPhj>:
void callback(char *topic, byte *payload, unsigned int length)
{
   d4108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (paused == false) {
   d410c:	4b40      	ldr	r3, [pc, #256]	; (d4210 <_Z8callbackPcPhj+0x108>)
{
   d410e:	b08b      	sub	sp, #44	; 0x2c
  if (paused == false) {
   d4110:	f893 9000 	ldrb.w	r9, [r3]
{
   d4114:	af00      	add	r7, sp, #0
   d4116:	460e      	mov	r6, r1
   d4118:	4614      	mov	r4, r2
  if (paused == false) {
   d411a:	f1b9 0f00 	cmp.w	r9, #0
   d411e:	d161      	bne.n	d41e4 <_Z8callbackPcPhj+0xdc>
    String pre = "";
   d4120:	493c      	ldr	r1, [pc, #240]	; (d4214 <_Z8callbackPcPhj+0x10c>)
   d4122:	f107 0008 	add.w	r0, r7, #8
   d4126:	f001 fd08 	bl	d5b3a <_ZN6StringC1EPKc>
    char p[length + 1];
   d412a:	f104 0208 	add.w	r2, r4, #8
   d412e:	f022 0207 	bic.w	r2, r2, #7
      count2++;
    }
    if (length == 1 && p[0] == '3')
    {
      count3++;
    }
   d4132:	466d      	mov	r5, sp
    char p[length + 1];
   d4134:	ebad 0d02 	sub.w	sp, sp, r2
   d4138:	1c63      	adds	r3, r4, #1
    memcpy(p, payload, length);
   d413a:	4622      	mov	r2, r4
   d413c:	4631      	mov	r1, r6
   d413e:	4668      	mov	r0, sp
    char p[length + 1];
   d4140:	607b      	str	r3, [r7, #4]
    memcpy(p, payload, length);
   d4142:	f002 fc7d 	bl	d6a40 <memcpy>
    p[length] = NULL;
   d4146:	f80d 9004 	strb.w	r9, [sp, r4]
    pre = p;
   d414a:	4669      	mov	r1, sp
   d414c:	f107 0008 	add.w	r0, r7, #8
   d4150:	f001 fd3b 	bl	d5bca <_ZN6StringaSEPKc>
    if (length > 1 && p[0] == '1')
   d4154:	2c01      	cmp	r4, #1
    char p[length + 1];
   d4156:	46e8      	mov	r8, sp
    if (length > 1 && p[0] == '1')
   d4158:	d950      	bls.n	d41fc <_Z8callbackPcPhj+0xf4>
   d415a:	f89d 2000 	ldrb.w	r2, [sp]
   d415e:	687b      	ldr	r3, [r7, #4]
   d4160:	2a31      	cmp	r2, #49	; 0x31
   d4162:	d110      	bne.n	d4186 <_Z8callbackPcPhj+0x7e>
      ac1 = pre.substring(2, length + 1);
   d4164:	2202      	movs	r2, #2
   d4166:	f107 0108 	add.w	r1, r7, #8
   d416a:	f107 0018 	add.w	r0, r7, #24
   d416e:	f001 fd7d 	bl	d5c6c <_ZNK6String9substringEjj>
   d4172:	f107 0118 	add.w	r1, r7, #24
   d4176:	4828      	ldr	r0, [pc, #160]	; (d4218 <_Z8callbackPcPhj+0x110>)
   d4178:	f001 fd1f 	bl	d5bba <_ZN6StringaSEOS_>
   d417c:	f107 0018 	add.w	r0, r7, #24
   d4180:	f001 fc90 	bl	d5aa4 <_ZN6StringD1Ev>
   d4184:	687b      	ldr	r3, [r7, #4]
    if (length > 1 && p[0] == '2')
   d4186:	f898 2000 	ldrb.w	r2, [r8]
   d418a:	2a32      	cmp	r2, #50	; 0x32
   d418c:	d111      	bne.n	d41b2 <_Z8callbackPcPhj+0xaa>
      ac2 = pre.substring(2, length + 1);
   d418e:	2202      	movs	r2, #2
   d4190:	f107 0108 	add.w	r1, r7, #8
   d4194:	f107 0018 	add.w	r0, r7, #24
   d4198:	607b      	str	r3, [r7, #4]
   d419a:	f001 fd67 	bl	d5c6c <_ZNK6String9substringEjj>
   d419e:	f107 0118 	add.w	r1, r7, #24
   d41a2:	481e      	ldr	r0, [pc, #120]	; (d421c <_Z8callbackPcPhj+0x114>)
   d41a4:	f001 fd09 	bl	d5bba <_ZN6StringaSEOS_>
   d41a8:	f107 0018 	add.w	r0, r7, #24
   d41ac:	f001 fc7a 	bl	d5aa4 <_ZN6StringD1Ev>
   d41b0:	687b      	ldr	r3, [r7, #4]
    if (length > 1 && p[0] == '3')
   d41b2:	f898 2000 	ldrb.w	r2, [r8]
   d41b6:	2a33      	cmp	r2, #51	; 0x33
   d41b8:	d10f      	bne.n	d41da <_Z8callbackPcPhj+0xd2>
      ac3 = pre.substring(2, length + 1);
   d41ba:	2202      	movs	r2, #2
   d41bc:	f107 0108 	add.w	r1, r7, #8
   d41c0:	f107 0018 	add.w	r0, r7, #24
   d41c4:	f001 fd52 	bl	d5c6c <_ZNK6String9substringEjj>
   d41c8:	4815      	ldr	r0, [pc, #84]	; (d4220 <_Z8callbackPcPhj+0x118>)
   d41ca:	f107 0118 	add.w	r1, r7, #24
   d41ce:	f001 fcf4 	bl	d5bba <_ZN6StringaSEOS_>
   d41d2:	f107 0018 	add.w	r0, r7, #24
   d41d6:	f001 fc65 	bl	d5aa4 <_ZN6StringD1Ev>
    String pre = "";
   d41da:	f107 0008 	add.w	r0, r7, #8
   d41de:	f001 fc61 	bl	d5aa4 <_ZN6StringD1Ev>
   d41e2:	46ad      	mov	sp, r5
    //delay(10000);
    // make own function call it after 10 sec
    // voteFunction()
  }
}
   d41e4:	372c      	adds	r7, #44	; 0x2c
   d41e6:	46bd      	mov	sp, r7
   d41e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      count2++;
   d41ec:	4a0d      	ldr	r2, [pc, #52]	; (d4224 <_Z8callbackPcPhj+0x11c>)
   d41ee:	e00b      	b.n	d4208 <_Z8callbackPcPhj+0x100>
    if (length == 1 && p[0] == '2')
   d41f0:	2b32      	cmp	r3, #50	; 0x32
   d41f2:	d0fb      	beq.n	d41ec <_Z8callbackPcPhj+0xe4>
    if (length == 1 && p[0] == '3')
   d41f4:	2b33      	cmp	r3, #51	; 0x33
   d41f6:	d1f0      	bne.n	d41da <_Z8callbackPcPhj+0xd2>
      count3++;
   d41f8:	4a0b      	ldr	r2, [pc, #44]	; (d4228 <_Z8callbackPcPhj+0x120>)
   d41fa:	e005      	b.n	d4208 <_Z8callbackPcPhj+0x100>
    if (length == 1 && p[0] == '1')
   d41fc:	d1ed      	bne.n	d41da <_Z8callbackPcPhj+0xd2>
   d41fe:	f89d 3000 	ldrb.w	r3, [sp]
   d4202:	2b31      	cmp	r3, #49	; 0x31
   d4204:	d1f4      	bne.n	d41f0 <_Z8callbackPcPhj+0xe8>
      count1++;
   d4206:	4a09      	ldr	r2, [pc, #36]	; (d422c <_Z8callbackPcPhj+0x124>)
      count3++;
   d4208:	8813      	ldrh	r3, [r2, #0]
   d420a:	3301      	adds	r3, #1
   d420c:	8013      	strh	r3, [r2, #0]
   d420e:	e7e4      	b.n	d41da <_Z8callbackPcPhj+0xd2>
   d4210:	2003e593 	.word	0x2003e593
   d4214:	000d6b71 	.word	0x000d6b71
   d4218:	2003e4a4 	.word	0x2003e4a4
   d421c:	2003e4b4 	.word	0x2003e4b4
   d4220:	2003e4c4 	.word	0x2003e4c4
   d4224:	2003e586 	.word	0x2003e586
   d4228:	2003e588 	.word	0x2003e588
   d422c:	2003e584 	.word	0x2003e584

000d4230 <setup>:
void setup()
{
   d4230:	b510      	push	{r4, lr}
  pinMode(D6, INPUT_PULLUP);         // defaults to HIGH
   d4232:	2102      	movs	r1, #2
{
   d4234:	b086      	sub	sp, #24
  pinMode(D6, INPUT_PULLUP);         // defaults to HIGH
   d4236:	2006      	movs	r0, #6
   d4238:	f002 fa74 	bl	d6724 <pinMode>
  attachInterrupt(D6, isr, FALLING); // D6 will now generate an interrupt on the falling edge and will run the code in the isr
   d423c:	2300      	movs	r3, #0
   d423e:	2202      	movs	r2, #2
   d4240:	490e      	ldr	r1, [pc, #56]	; (d427c <setup+0x4c>)
   d4242:	9300      	str	r3, [sp, #0]
   d4244:	2006      	movs	r0, #6
   d4246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d424a:	f001 fa31 	bl	d56b0 <_Z15attachInterrupttPFvvE13InterruptModeah>
  Serial.begin(9600);
  client.connect(System.deviceID());
   d424e:	4c0c      	ldr	r4, [pc, #48]	; (d4280 <setup+0x50>)
  Serial.begin(9600);
   d4250:	f002 f930 	bl	d64b4 <_Z16_fetch_usbserialv>
   d4254:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4258:	f002 f920 	bl	d649c <_ZN9USBSerial5beginEl>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d425c:	a802      	add	r0, sp, #8
   d425e:	f001 f8e9 	bl	d5434 <spark_deviceID>
  client.connect(System.deviceID());
   d4262:	9902      	ldr	r1, [sp, #8]
   d4264:	4620      	mov	r0, r4
   d4266:	f000 fcc7 	bl	d4bf8 <_ZN4MQTT7connectEPKc>
   d426a:	a802      	add	r0, sp, #8
   d426c:	f001 fc1a 	bl	d5aa4 <_ZN6StringD1Ev>
  client.subscribe("madlibs");
   d4270:	4904      	ldr	r1, [pc, #16]	; (d4284 <setup+0x54>)
   d4272:	4620      	mov	r0, r4
   d4274:	f000 feef 	bl	d5056 <_ZN4MQTT9subscribeEPKc>
}
   d4278:	b006      	add	sp, #24
   d427a:	bd10      	pop	{r4, pc}
   d427c:	000d40b5 	.word	0x000d40b5
   d4280:	2003e524 	.word	0x2003e524
   d4284:	000d6afc 	.word	0x000d6afc

000d4288 <loop>:
 // if interrupt button is pressed
//plugging this argon into power is meant to be the trigger that starts the game. to restart it, press the reset button.
//each prompt lets you have 10 seconds to decide your answer.
void loop()
{
   d4288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool value = false;      // button true or false
  value = digitalRead(D6); // reads the button either true or false
   d428c:	2006      	movs	r0, #6
{
   d428e:	b085      	sub	sp, #20
  value = digitalRead(D6); // reads the button either true or false
   d4290:	f002 fa59 	bl	d6746 <digitalRead>
  if (interruptOccured)
   d4294:	4bbf      	ldr	r3, [pc, #764]	; (d4594 <loop+0x30c>)
   d4296:	781a      	ldrb	r2, [r3, #0]
  value = digitalRead(D6); // reads the button either true or false
   d4298:	4604      	mov	r4, r0
  if (interruptOccured)
   d429a:	b10a      	cbz	r2, d42a0 <loop+0x18>
  {
    interruptOccured = false;
   d429c:	2200      	movs	r2, #0
   d429e:	701a      	strb	r2, [r3, #0]
  }
  if (value == 0)
   d42a0:	b984      	cbnz	r4, d42c4 <loop+0x3c>
  {
    if (paused == true)
   d42a2:	4dbd      	ldr	r5, [pc, #756]	; (d4598 <loop+0x310>)
   d42a4:	782b      	ldrb	r3, [r5, #0]
   d42a6:	2b00      	cmp	r3, #0
   d42a8:	f000 810a 	beq.w	d44c0 <loop+0x238>
    {
      interrupts(); // enables interrupt handling
   d42ac:	f001 fa2c 	bl	d5708 <_Z10interruptsv>
      paused = false;
      client.publish("madlibs", "UNPAUSED");
   d42b0:	4aba      	ldr	r2, [pc, #744]	; (d459c <loop+0x314>)
   d42b2:	49bb      	ldr	r1, [pc, #748]	; (d45a0 <loop+0x318>)
   d42b4:	48bb      	ldr	r0, [pc, #748]	; (d45a4 <loop+0x31c>)
      paused = false;
   d42b6:	702c      	strb	r4, [r5, #0]
      client.publish("madlibs", "UNPAUSED");
   d42b8:	f000 fd29 	bl	d4d0e <_ZN4MQTT7publishEPKcS1_>
      delay(500);
   d42bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d42c0:	f001 f950 	bl	d5564 <delay>
      Serial.println("in the false");
      delay(500);
      client.publish("madlibs", "PAUSED");
    }
  }
  if (client.isConnected())
   d42c4:	48b7      	ldr	r0, [pc, #732]	; (d45a4 <loop+0x31c>)
   d42c6:	f000 fba6 	bl	d4a16 <_ZN4MQTT11isConnectedEv>
   d42ca:	2800      	cmp	r0, #0
   d42cc:	f000 8153 	beq.w	d4576 <loop+0x2ee>
  {
      client.loop();
      //Serial.print("hasSentType:");
      //Serial.println(hasSentType);
      if (hasSentType == false)
   d42d0:	4db5      	ldr	r5, [pc, #724]	; (d45a8 <loop+0x320>)
      client.loop();
   d42d2:	48b4      	ldr	r0, [pc, #720]	; (d45a4 <loop+0x31c>)
   d42d4:	f000 fd77 	bl	d4dc6 <_ZN4MQTT4loopEv>
      if (hasSentType == false)
   d42d8:	782b      	ldrb	r3, [r5, #0]
   d42da:	b953      	cbnz	r3, d42f2 <loop+0x6a>
      {
        client.publish("madlibs", types[countPlace]);
   d42dc:	4bb3      	ldr	r3, [pc, #716]	; (d45ac <loop+0x324>)
   d42de:	4ab4      	ldr	r2, [pc, #720]	; (d45b0 <loop+0x328>)
   d42e0:	681b      	ldr	r3, [r3, #0]
   d42e2:	49af      	ldr	r1, [pc, #700]	; (d45a0 <loop+0x318>)
   d42e4:	48af      	ldr	r0, [pc, #700]	; (d45a4 <loop+0x31c>)
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	String & operator = (String &&rval);
	String & operator = (StringSumHelper &&rval);
	#endif

        operator const char*() const { return c_str(); }
   d42e6:	011b      	lsls	r3, r3, #4
   d42e8:	58d2      	ldr	r2, [r2, r3]
   d42ea:	f000 fd10 	bl	d4d0e <_ZN4MQTT7publishEPKcS1_>
        hasSentType = true;
   d42ee:	2301      	movs	r3, #1
   d42f0:	702b      	strb	r3, [r5, #0]
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d42f2:	4cb0      	ldr	r4, [pc, #704]	; (d45b4 <loop+0x32c>)
   d42f4:	4fb0      	ldr	r7, [pc, #704]	; (d45b8 <loop+0x330>)
   d42f6:	f8df 82d8 	ldr.w	r8, [pc, #728]	; d45d0 <loop+0x348>
   d42fa:	4621      	mov	r1, r4
   d42fc:	4638      	mov	r0, r7
   d42fe:	f001 fca2 	bl	d5c46 <_ZNK6String6equalsEPKc>
      }
      while (ac1 != "" && ac2 != "" && ac3 != "" && hasSentVoteMessage == false)
   d4302:	2800      	cmp	r0, #0
   d4304:	f000 80f3 	beq.w	d44ee <loop+0x266>
      {
        client.publish("madlibs", voteMessage);
        hasSentVoteMessage = true;
      }
      while (count1 + count2 + count3 == maxVotes)
   d4308:	4eac      	ldr	r6, [pc, #688]	; (d45bc <loop+0x334>)
   d430a:	f8df 82b4 	ldr.w	r8, [pc, #692]	; d45c0 <loop+0x338>
   d430e:	4bac      	ldr	r3, [pc, #688]	; (d45c0 <loop+0x338>)
   d4310:	4fac      	ldr	r7, [pc, #688]	; (d45c4 <loop+0x33c>)
   d4312:	881b      	ldrh	r3, [r3, #0]
   d4314:	8830      	ldrh	r0, [r6, #0]
   d4316:	4cac      	ldr	r4, [pc, #688]	; (d45c8 <loop+0x340>)
   d4318:	8839      	ldrh	r1, [r7, #0]
   d431a:	6824      	ldr	r4, [r4, #0]
   d431c:	181a      	adds	r2, r3, r0
   d431e:	440a      	add	r2, r1
   d4320:	42a2      	cmp	r2, r4
   d4322:	4ca2      	ldr	r4, [pc, #648]	; (d45ac <loop+0x324>)
   d4324:	f040 8101 	bne.w	d452a <loop+0x2a2>
      {
        //Serial.print("totalVotes");
        //Serial.println(count1 + count2 + count3);
        //Serial.println(maxVotes);
        if (count1 > count2 && count1 > count3)
   d4328:	4283      	cmp	r3, r0
   d432a:	f8df b2cc 	ldr.w	fp, [pc, #716]	; d45f8 <loop+0x370>
   d432e:	d934      	bls.n	d439a <loop+0x112>
   d4330:	428b      	cmp	r3, r1
   d4332:	d932      	bls.n	d439a <loop+0x112>
        operator const char*() const { return c_str(); }
   d4334:	f8df 9280 	ldr.w	r9, [pc, #640]	; d45b8 <loop+0x330>
        { //need to reset all variables that run once
          client.publish("madlibs", ac1);
   d4338:	4999      	ldr	r1, [pc, #612]	; (d45a0 <loop+0x318>)
   d433a:	f8d9 2000 	ldr.w	r2, [r9]
   d433e:	4899      	ldr	r0, [pc, #612]	; (d45a4 <loop+0x31c>)
   d4340:	f000 fce5 	bl	d4d0e <_ZN4MQTT7publishEPKcS1_>
          Serial.println("Answer 1 has won: ");
   d4344:	f002 f8b6 	bl	d64b4 <_Z16_fetch_usbserialv>
   d4348:	49a0      	ldr	r1, [pc, #640]	; (d45cc <loop+0x344>)
   d434a:	f001 fb64 	bl	d5a16 <_ZN5Print7printlnEPKc>
          Serial.println(ac1);
   d434e:	f002 f8b1 	bl	d64b4 <_Z16_fetch_usbserialv>
   d4352:	f8d9 1000 	ldr.w	r1, [r9]
   d4356:	f001 fb5e 	bl	d5a16 <_ZN5Print7printlnEPKc>
          answers[countPlace] = ac1;
   d435a:	6820      	ldr	r0, [r4, #0]
   d435c:	4649      	mov	r1, r9
   d435e:	eb0b 1000 	add.w	r0, fp, r0, lsl #4
   d4362:	f001 fc1b 	bl	d5b9c <_ZN6StringaSERKS_>
          count1 = 0;
   d4366:	4b96      	ldr	r3, [pc, #600]	; (d45c0 <loop+0x338>)
          count2 = 0;
          count3 = 0;
          ac1 = "";
   d4368:	4992      	ldr	r1, [pc, #584]	; (d45b4 <loop+0x32c>)
          count1 = 0;
   d436a:	f04f 0a00 	mov.w	sl, #0
          ac1 = "";
   d436e:	4648      	mov	r0, r9
          count1 = 0;
   d4370:	f8a3 a000 	strh.w	sl, [r3]
          count2 = 0;
   d4374:	f8a6 a000 	strh.w	sl, [r6]
          count3 = 0;
   d4378:	f8a7 a000 	strh.w	sl, [r7]
          ac1 = "";
   d437c:	f001 fc25 	bl	d5bca <_ZN6StringaSEPKc>
          ac2 = "";
   d4380:	498c      	ldr	r1, [pc, #560]	; (d45b4 <loop+0x32c>)
   d4382:	4893      	ldr	r0, [pc, #588]	; (d45d0 <loop+0x348>)
   d4384:	f001 fc21 	bl	d5bca <_ZN6StringaSEPKc>
          ac3 = "";
   d4388:	498a      	ldr	r1, [pc, #552]	; (d45b4 <loop+0x32c>)
   d438a:	4892      	ldr	r0, [pc, #584]	; (d45d4 <loop+0x34c>)
   d438c:	f001 fc1d 	bl	d5bca <_ZN6StringaSEPKc>
          hasSentType = false;
          hasSentVoteMessage = false;
   d4390:	4b91      	ldr	r3, [pc, #580]	; (d45d8 <loop+0x350>)
          hasSentType = false;
   d4392:	f885 a000 	strb.w	sl, [r5]
          hasSentVoteMessage = false;
   d4396:	f883 a000 	strb.w	sl, [r3]
        }
        if (count2 > count1 && count2 > count3)
   d439a:	8833      	ldrh	r3, [r6, #0]
   d439c:	f8b8 2000 	ldrh.w	r2, [r8]
   d43a0:	429a      	cmp	r2, r3
   d43a2:	d234      	bcs.n	d440e <loop+0x186>
   d43a4:	883a      	ldrh	r2, [r7, #0]
   d43a6:	429a      	cmp	r2, r3
   d43a8:	d231      	bcs.n	d440e <loop+0x186>
   d43aa:	f8df 9224 	ldr.w	r9, [pc, #548]	; d45d0 <loop+0x348>
        {
          client.publish("madlibs", ac2);
   d43ae:	497c      	ldr	r1, [pc, #496]	; (d45a0 <loop+0x318>)
   d43b0:	f8d9 2000 	ldr.w	r2, [r9]
   d43b4:	487b      	ldr	r0, [pc, #492]	; (d45a4 <loop+0x31c>)
   d43b6:	f000 fcaa 	bl	d4d0e <_ZN4MQTT7publishEPKcS1_>
          Serial.println("Answer 2 has won: ");
   d43ba:	f002 f87b 	bl	d64b4 <_Z16_fetch_usbserialv>
   d43be:	4987      	ldr	r1, [pc, #540]	; (d45dc <loop+0x354>)
   d43c0:	f001 fb29 	bl	d5a16 <_ZN5Print7printlnEPKc>
          Serial.println(ac2);
   d43c4:	f002 f876 	bl	d64b4 <_Z16_fetch_usbserialv>
   d43c8:	f8d9 1000 	ldr.w	r1, [r9]
   d43cc:	f001 fb23 	bl	d5a16 <_ZN5Print7printlnEPKc>
          answers[countPlace] = ac2;
   d43d0:	6820      	ldr	r0, [r4, #0]
   d43d2:	4649      	mov	r1, r9
   d43d4:	eb0b 1000 	add.w	r0, fp, r0, lsl #4
   d43d8:	f001 fbe0 	bl	d5b9c <_ZN6StringaSERKS_>
          count1 = 0;
   d43dc:	f04f 0a00 	mov.w	sl, #0
          count2 = 0;
          count3 = 0;
          ac1 = "";
   d43e0:	4974      	ldr	r1, [pc, #464]	; (d45b4 <loop+0x32c>)
   d43e2:	4875      	ldr	r0, [pc, #468]	; (d45b8 <loop+0x330>)
          count1 = 0;
   d43e4:	f8a8 a000 	strh.w	sl, [r8]
          count2 = 0;
   d43e8:	f8a6 a000 	strh.w	sl, [r6]
          count3 = 0;
   d43ec:	f8a7 a000 	strh.w	sl, [r7]
          ac1 = "";
   d43f0:	f001 fbeb 	bl	d5bca <_ZN6StringaSEPKc>
          ac2 = "";
   d43f4:	496f      	ldr	r1, [pc, #444]	; (d45b4 <loop+0x32c>)
   d43f6:	4648      	mov	r0, r9
   d43f8:	f001 fbe7 	bl	d5bca <_ZN6StringaSEPKc>
          ac3 = "";
   d43fc:	496d      	ldr	r1, [pc, #436]	; (d45b4 <loop+0x32c>)
   d43fe:	4875      	ldr	r0, [pc, #468]	; (d45d4 <loop+0x34c>)
   d4400:	f001 fbe3 	bl	d5bca <_ZN6StringaSEPKc>
          hasSentType = false;
          hasSentVoteMessage = false;
   d4404:	4b74      	ldr	r3, [pc, #464]	; (d45d8 <loop+0x350>)
          hasSentType = false;
   d4406:	f885 a000 	strb.w	sl, [r5]
          hasSentVoteMessage = false;
   d440a:	f883 a000 	strb.w	sl, [r3]
        }
        if (count3 > count2 && count3 > count1)
   d440e:	883b      	ldrh	r3, [r7, #0]
   d4410:	8832      	ldrh	r2, [r6, #0]
   d4412:	429a      	cmp	r2, r3
   d4414:	d235      	bcs.n	d4482 <loop+0x1fa>
   d4416:	f8b8 2000 	ldrh.w	r2, [r8]
   d441a:	429a      	cmp	r2, r3
   d441c:	d231      	bcs.n	d4482 <loop+0x1fa>
   d441e:	f8df 91b4 	ldr.w	r9, [pc, #436]	; d45d4 <loop+0x34c>
        {
          client.publish("madlibs", ac3);
   d4422:	495f      	ldr	r1, [pc, #380]	; (d45a0 <loop+0x318>)
   d4424:	f8d9 2000 	ldr.w	r2, [r9]
   d4428:	485e      	ldr	r0, [pc, #376]	; (d45a4 <loop+0x31c>)
   d442a:	f000 fc70 	bl	d4d0e <_ZN4MQTT7publishEPKcS1_>
          Serial.println("Answer 3 has won: ");
   d442e:	f002 f841 	bl	d64b4 <_Z16_fetch_usbserialv>
   d4432:	496b      	ldr	r1, [pc, #428]	; (d45e0 <loop+0x358>)
   d4434:	f001 faef 	bl	d5a16 <_ZN5Print7printlnEPKc>
          Serial.println(ac3);
   d4438:	f002 f83c 	bl	d64b4 <_Z16_fetch_usbserialv>
   d443c:	f8d9 1000 	ldr.w	r1, [r9]
   d4440:	f001 fae9 	bl	d5a16 <_ZN5Print7printlnEPKc>
          answers[countPlace] = ac3;
   d4444:	6820      	ldr	r0, [r4, #0]
   d4446:	4649      	mov	r1, r9
   d4448:	eb0b 1000 	add.w	r0, fp, r0, lsl #4
   d444c:	f001 fba6 	bl	d5b9c <_ZN6StringaSERKS_>
          count1 = 0;
   d4450:	f04f 0a00 	mov.w	sl, #0
          count2 = 0;
          count3 = 0;
          ac1 = "";
   d4454:	4957      	ldr	r1, [pc, #348]	; (d45b4 <loop+0x32c>)
   d4456:	4858      	ldr	r0, [pc, #352]	; (d45b8 <loop+0x330>)
          count1 = 0;
   d4458:	f8a8 a000 	strh.w	sl, [r8]
          count2 = 0;
   d445c:	f8a6 a000 	strh.w	sl, [r6]
          count3 = 0;
   d4460:	f8a7 a000 	strh.w	sl, [r7]
          ac1 = "";
   d4464:	f001 fbb1 	bl	d5bca <_ZN6StringaSEPKc>
          ac2 = "";
   d4468:	4952      	ldr	r1, [pc, #328]	; (d45b4 <loop+0x32c>)
   d446a:	4859      	ldr	r0, [pc, #356]	; (d45d0 <loop+0x348>)
   d446c:	f001 fbad 	bl	d5bca <_ZN6StringaSEPKc>
          ac3 = "";
   d4470:	4950      	ldr	r1, [pc, #320]	; (d45b4 <loop+0x32c>)
   d4472:	4648      	mov	r0, r9
   d4474:	f001 fba9 	bl	d5bca <_ZN6StringaSEPKc>
          hasSentType = false;
          hasSentVoteMessage = false;
   d4478:	4b57      	ldr	r3, [pc, #348]	; (d45d8 <loop+0x350>)
          hasSentType = false;
   d447a:	f885 a000 	strb.w	sl, [r5]
          hasSentVoteMessage = false;
   d447e:	f883 a000 	strb.w	sl, [r3]
        }
        Serial.print("This was the answer selected: ");
   d4482:	f002 f817 	bl	d64b4 <_Z16_fetch_usbserialv>
   d4486:	4957      	ldr	r1, [pc, #348]	; (d45e4 <loop+0x35c>)
   d4488:	f001 fab2 	bl	d59f0 <_ZN5Print5printEPKc>
        Serial.println(answers[countPlace]);
   d448c:	f002 f812 	bl	d64b4 <_Z16_fetch_usbserialv>
   d4490:	6823      	ldr	r3, [r4, #0]
   d4492:	011b      	lsls	r3, r3, #4
   d4494:	f85b 1003 	ldr.w	r1, [fp, r3]
   d4498:	f001 fabd 	bl	d5a16 <_ZN5Print7printlnEPKc>
        countPlace++;
   d449c:	6823      	ldr	r3, [r4, #0]
   d449e:	3301      	adds	r3, #1
   d44a0:	6023      	str	r3, [r4, #0]
        Serial.print(countPlace);
   d44a2:	f002 f807 	bl	d64b4 <_Z16_fetch_usbserialv>
   d44a6:	6824      	ldr	r4, [r4, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d44a8:	2c00      	cmp	r4, #0
   d44aa:	4607      	mov	r7, r0
   d44ac:	da3b      	bge.n	d4526 <loop+0x29e>
            t = print('-');
   d44ae:	212d      	movs	r1, #45	; 0x2d
   d44b0:	f001 faa2 	bl	d59f8 <_ZN5Print5printEc>
            val = -n;
   d44b4:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d44b6:	220a      	movs	r2, #10
   d44b8:	4638      	mov	r0, r7
   d44ba:	f001 fab6 	bl	d5a2a <_ZN5Print11printNumberEmh>
   d44be:	e726      	b.n	d430e <loop+0x86>
      noInterrupts();
   d44c0:	f001 f920 	bl	d5704 <_Z12noInterruptsv>
      paused = true;
   d44c4:	2301      	movs	r3, #1
   d44c6:	702b      	strb	r3, [r5, #0]
      Serial.println();
   d44c8:	f001 fff4 	bl	d64b4 <_Z16_fetch_usbserialv>
   d44cc:	f001 fa97 	bl	d59fe <_ZN5Print7printlnEv>
      Serial.println("in the false");
   d44d0:	f001 fff0 	bl	d64b4 <_Z16_fetch_usbserialv>
   d44d4:	4944      	ldr	r1, [pc, #272]	; (d45e8 <loop+0x360>)
   d44d6:	f001 fa9e 	bl	d5a16 <_ZN5Print7printlnEPKc>
      delay(500);
   d44da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d44de:	f001 f841 	bl	d5564 <delay>
      client.publish("madlibs", "PAUSED");
   d44e2:	4a42      	ldr	r2, [pc, #264]	; (d45ec <loop+0x364>)
   d44e4:	492e      	ldr	r1, [pc, #184]	; (d45a0 <loop+0x318>)
   d44e6:	482f      	ldr	r0, [pc, #188]	; (d45a4 <loop+0x31c>)
   d44e8:	f000 fc11 	bl	d4d0e <_ZN4MQTT7publishEPKcS1_>
   d44ec:	e6ea      	b.n	d42c4 <loop+0x3c>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d44ee:	4621      	mov	r1, r4
   d44f0:	4640      	mov	r0, r8
   d44f2:	f001 fba8 	bl	d5c46 <_ZNK6String6equalsEPKc>
      while (ac1 != "" && ac2 != "" && ac3 != "" && hasSentVoteMessage == false)
   d44f6:	2800      	cmp	r0, #0
   d44f8:	f47f af06 	bne.w	d4308 <loop+0x80>
   d44fc:	4835      	ldr	r0, [pc, #212]	; (d45d4 <loop+0x34c>)
   d44fe:	4621      	mov	r1, r4
   d4500:	f001 fba1 	bl	d5c46 <_ZNK6String6equalsEPKc>
   d4504:	2800      	cmp	r0, #0
   d4506:	f47f aeff 	bne.w	d4308 <loop+0x80>
   d450a:	4e33      	ldr	r6, [pc, #204]	; (d45d8 <loop+0x350>)
   d450c:	7833      	ldrb	r3, [r6, #0]
   d450e:	2b00      	cmp	r3, #0
   d4510:	f47f aefa 	bne.w	d4308 <loop+0x80>
        operator const char*() const { return c_str(); }
   d4514:	4b36      	ldr	r3, [pc, #216]	; (d45f0 <loop+0x368>)
        client.publish("madlibs", voteMessage);
   d4516:	4922      	ldr	r1, [pc, #136]	; (d45a0 <loop+0x318>)
   d4518:	681a      	ldr	r2, [r3, #0]
   d451a:	4822      	ldr	r0, [pc, #136]	; (d45a4 <loop+0x31c>)
   d451c:	f000 fbf7 	bl	d4d0e <_ZN4MQTT7publishEPKcS1_>
        hasSentVoteMessage = true;
   d4520:	2301      	movs	r3, #1
   d4522:	7033      	strb	r3, [r6, #0]
      while (ac1 != "" && ac2 != "" && ac3 != "" && hasSentVoteMessage == false)
   d4524:	e6e9      	b.n	d42fa <loop+0x72>
            val = n;
   d4526:	4621      	mov	r1, r4
   d4528:	e7c5      	b.n	d44b6 <loop+0x22e>
        //delay(5000);
      }
      if (countPlace == 5)
   d452a:	6823      	ldr	r3, [r4, #0]
   d452c:	2b05      	cmp	r3, #5
   d452e:	d11f      	bne.n	d4570 <loop+0x2e8>
      { // 5 for debug
        String output = "";
   d4530:	4920      	ldr	r1, [pc, #128]	; (d45b4 <loop+0x32c>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4532:	4f30      	ldr	r7, [pc, #192]	; (d45f4 <loop+0x36c>)
   d4534:	4e30      	ldr	r6, [pc, #192]	; (d45f8 <loop+0x370>)
   d4536:	4668      	mov	r0, sp
   d4538:	f001 faff 	bl	d5b3a <_ZN6StringC1EPKc>
   d453c:	2500      	movs	r5, #0
   d453e:	1979      	adds	r1, r7, r5
   d4540:	4668      	mov	r0, sp
   d4542:	f001 fb6b 	bl	d5c1c <_ZN6String6concatERKS_>
   d4546:	1971      	adds	r1, r6, r5
   d4548:	4668      	mov	r0, sp
   d454a:	3510      	adds	r5, #16
   d454c:	f001 fb66 	bl	d5c1c <_ZN6String6concatERKS_>
        for (int i = 0; i < 5; i++)
   d4550:	2d50      	cmp	r5, #80	; 0x50
   d4552:	d1f4      	bne.n	d453e <loop+0x2b6>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d4554:	4929      	ldr	r1, [pc, #164]	; (d45fc <loop+0x374>)
   d4556:	4668      	mov	r0, sp
   d4558:	f001 fb64 	bl	d5c24 <_ZN6String6concatEPKc>
        {
          output += words[i];
          output += answers[i];
        }
        output += ".";
        client.publish("madlibs", output);
   d455c:	9a00      	ldr	r2, [sp, #0]
   d455e:	4910      	ldr	r1, [pc, #64]	; (d45a0 <loop+0x318>)
   d4560:	4810      	ldr	r0, [pc, #64]	; (d45a4 <loop+0x31c>)
   d4562:	f000 fbd4 	bl	d4d0e <_ZN4MQTT7publishEPKcS1_>
        countPlace = 0;
   d4566:	2300      	movs	r3, #0
        String output = "";
   d4568:	4668      	mov	r0, sp
        countPlace = 0;
   d456a:	6023      	str	r3, [r4, #0]
        String output = "";
   d456c:	f001 fa9a 	bl	d5aa4 <_ZN6StringD1Ev>
  else
  {
    client.connect(System.deviceID());
    client.subscribe("madlibs");
  }
   d4570:	b005      	add	sp, #20
   d4572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4576:	4668      	mov	r0, sp
   d4578:	f000 ff5c 	bl	d5434 <spark_deviceID>
    client.connect(System.deviceID());
   d457c:	9900      	ldr	r1, [sp, #0]
   d457e:	4809      	ldr	r0, [pc, #36]	; (d45a4 <loop+0x31c>)
   d4580:	f000 fb3a 	bl	d4bf8 <_ZN4MQTT7connectEPKc>
   d4584:	4668      	mov	r0, sp
   d4586:	f001 fa8d 	bl	d5aa4 <_ZN6StringD1Ev>
    client.subscribe("madlibs");
   d458a:	4905      	ldr	r1, [pc, #20]	; (d45a0 <loop+0x318>)
   d458c:	4805      	ldr	r0, [pc, #20]	; (d45a4 <loop+0x31c>)
   d458e:	f000 fd62 	bl	d5056 <_ZN4MQTT9subscribeEPKc>
   d4592:	e7ed      	b.n	d4570 <loop+0x2e8>
   d4594:	2003e592 	.word	0x2003e592
   d4598:	2003e593 	.word	0x2003e593
   d459c:	000d6b04 	.word	0x000d6b04
   d45a0:	000d6afc 	.word	0x000d6afc
   d45a4:	2003e524 	.word	0x2003e524
   d45a8:	2003e590 	.word	0x2003e590
   d45ac:	2003e58c 	.word	0x2003e58c
   d45b0:	2003e594 	.word	0x2003e594
   d45b4:	000d6b71 	.word	0x000d6b71
   d45b8:	2003e4a4 	.word	0x2003e4a4
   d45bc:	2003e586 	.word	0x2003e586
   d45c0:	2003e584 	.word	0x2003e584
   d45c4:	2003e588 	.word	0x2003e588
   d45c8:	2003e434 	.word	0x2003e434
   d45cc:	000d6b1a 	.word	0x000d6b1a
   d45d0:	2003e4b4 	.word	0x2003e4b4
   d45d4:	2003e4c4 	.word	0x2003e4c4
   d45d8:	2003e591 	.word	0x2003e591
   d45dc:	000d6b2d 	.word	0x000d6b2d
   d45e0:	000d6b40 	.word	0x000d6b40
   d45e4:	000d6b53 	.word	0x000d6b53
   d45e8:	000d6b0d 	.word	0x000d6b0d
   d45ec:	000d6b06 	.word	0x000d6b06
   d45f0:	2003e5e4 	.word	0x2003e5e4
   d45f4:	2003e5f4 	.word	0x2003e5f4
   d45f8:	2003e4d4 	.word	0x2003e4d4
   d45fc:	000d6c63 	.word	0x000d6c63

000d4600 <_GLOBAL__sub_I_client>:
   d4600:	b537      	push	{r0, r1, r2, r4, r5, lr}
MQTT client("lab.thewcl.com", 1883, callback);
   d4602:	2400      	movs	r4, #0
SYSTEM_THREAD(ENABLED);
   d4604:	2100      	movs	r1, #0
   d4606:	2001      	movs	r0, #1
   d4608:	f000 fef8 	bl	d53fc <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   d460c:	4b39      	ldr	r3, [pc, #228]	; (d46f4 <_GLOBAL__sub_I_client+0xf4>)
   d460e:	493a      	ldr	r1, [pc, #232]	; (d46f8 <_GLOBAL__sub_I_client+0xf8>)
   d4610:	483a      	ldr	r0, [pc, #232]	; (d46fc <_GLOBAL__sub_I_client+0xfc>)
   d4612:	9400      	str	r4, [sp, #0]
   d4614:	f240 725b 	movw	r2, #1883	; 0x75b
   d4618:	f000 f8f4 	bl	d4804 <_ZN4MQTTC1EPctPFvS0_PhjEb>
   d461c:	4a38      	ldr	r2, [pc, #224]	; (d4700 <_GLOBAL__sub_I_client+0x100>)
   d461e:	4939      	ldr	r1, [pc, #228]	; (d4704 <_GLOBAL__sub_I_client+0x104>)
   d4620:	4836      	ldr	r0, [pc, #216]	; (d46fc <_GLOBAL__sub_I_client+0xfc>)
String answers[5];
   d4622:	4d39      	ldr	r5, [pc, #228]	; (d4708 <_GLOBAL__sub_I_client+0x108>)
MQTT client("lab.thewcl.com", 1883, callback);
   d4624:	f002 f8e2 	bl	d67ec <__aeabi_atexit>
String types[5] = {"Adjective", "Adjective", "Noun", "Noun", "Plural noun"};                                                                                                                                                  //, "A game", "Plural noun", "Verb ending in 'ing'", "Verb ending in 'ing'", "Plural noun", "Verb ending in 'ing'"};
   d4628:	4938      	ldr	r1, [pc, #224]	; (d470c <_GLOBAL__sub_I_client+0x10c>)
   d462a:	4839      	ldr	r0, [pc, #228]	; (d4710 <_GLOBAL__sub_I_client+0x110>)
   d462c:	f001 fa85 	bl	d5b3a <_ZN6StringC1EPKc>
   d4630:	4936      	ldr	r1, [pc, #216]	; (d470c <_GLOBAL__sub_I_client+0x10c>)
   d4632:	4838      	ldr	r0, [pc, #224]	; (d4714 <_GLOBAL__sub_I_client+0x114>)
   d4634:	f001 fa81 	bl	d5b3a <_ZN6StringC1EPKc>
   d4638:	4937      	ldr	r1, [pc, #220]	; (d4718 <_GLOBAL__sub_I_client+0x118>)
   d463a:	4838      	ldr	r0, [pc, #224]	; (d471c <_GLOBAL__sub_I_client+0x11c>)
   d463c:	f001 fa7d 	bl	d5b3a <_ZN6StringC1EPKc>
   d4640:	4935      	ldr	r1, [pc, #212]	; (d4718 <_GLOBAL__sub_I_client+0x118>)
   d4642:	4837      	ldr	r0, [pc, #220]	; (d4720 <_GLOBAL__sub_I_client+0x120>)
   d4644:	f001 fa79 	bl	d5b3a <_ZN6StringC1EPKc>
   d4648:	4936      	ldr	r1, [pc, #216]	; (d4724 <_GLOBAL__sub_I_client+0x124>)
   d464a:	4837      	ldr	r0, [pc, #220]	; (d4728 <_GLOBAL__sub_I_client+0x128>)
   d464c:	f001 fa75 	bl	d5b3a <_ZN6StringC1EPKc>
   d4650:	4a2b      	ldr	r2, [pc, #172]	; (d4700 <_GLOBAL__sub_I_client+0x100>)
   d4652:	4936      	ldr	r1, [pc, #216]	; (d472c <_GLOBAL__sub_I_client+0x12c>)
   d4654:	4620      	mov	r0, r4
   d4656:	f002 f8c9 	bl	d67ec <__aeabi_atexit>
String words[5] = {"A vacation is when you take a trip to some ", " place with your ", " family. Usually you go to some place that is near a/an ", " or up on a/an ", " . A good vacation place is one where you can ride "}; //, "or play", "or go hunting for", ". I like to spend my time", "or", ". When parents go on a vacation, they spend their time eating three", " a day, and fathers play golf, and mothers sit around"};
   d465a:	4935      	ldr	r1, [pc, #212]	; (d4730 <_GLOBAL__sub_I_client+0x130>)
   d465c:	4835      	ldr	r0, [pc, #212]	; (d4734 <_GLOBAL__sub_I_client+0x134>)
   d465e:	f001 fa6c 	bl	d5b3a <_ZN6StringC1EPKc>
   d4662:	4935      	ldr	r1, [pc, #212]	; (d4738 <_GLOBAL__sub_I_client+0x138>)
   d4664:	4835      	ldr	r0, [pc, #212]	; (d473c <_GLOBAL__sub_I_client+0x13c>)
   d4666:	f001 fa68 	bl	d5b3a <_ZN6StringC1EPKc>
   d466a:	4935      	ldr	r1, [pc, #212]	; (d4740 <_GLOBAL__sub_I_client+0x140>)
   d466c:	4835      	ldr	r0, [pc, #212]	; (d4744 <_GLOBAL__sub_I_client+0x144>)
   d466e:	f001 fa64 	bl	d5b3a <_ZN6StringC1EPKc>
   d4672:	4935      	ldr	r1, [pc, #212]	; (d4748 <_GLOBAL__sub_I_client+0x148>)
   d4674:	4835      	ldr	r0, [pc, #212]	; (d474c <_GLOBAL__sub_I_client+0x14c>)
   d4676:	f001 fa60 	bl	d5b3a <_ZN6StringC1EPKc>
   d467a:	4935      	ldr	r1, [pc, #212]	; (d4750 <_GLOBAL__sub_I_client+0x150>)
   d467c:	4835      	ldr	r0, [pc, #212]	; (d4754 <_GLOBAL__sub_I_client+0x154>)
   d467e:	f001 fa5c 	bl	d5b3a <_ZN6StringC1EPKc>
   d4682:	4a1f      	ldr	r2, [pc, #124]	; (d4700 <_GLOBAL__sub_I_client+0x100>)
   d4684:	4934      	ldr	r1, [pc, #208]	; (d4758 <_GLOBAL__sub_I_client+0x158>)
   d4686:	4620      	mov	r0, r4
   d4688:	f002 f8b0 	bl	d67ec <__aeabi_atexit>
String answers[5];
   d468c:	1928      	adds	r0, r5, r4
   d468e:	4933      	ldr	r1, [pc, #204]	; (d475c <_GLOBAL__sub_I_client+0x15c>)
   d4690:	3410      	adds	r4, #16
   d4692:	f001 fa52 	bl	d5b3a <_ZN6StringC1EPKc>
   d4696:	2c50      	cmp	r4, #80	; 0x50
   d4698:	d1f8      	bne.n	d468c <_GLOBAL__sub_I_client+0x8c>
   d469a:	4a19      	ldr	r2, [pc, #100]	; (d4700 <_GLOBAL__sub_I_client+0x100>)
   d469c:	4930      	ldr	r1, [pc, #192]	; (d4760 <_GLOBAL__sub_I_client+0x160>)
   d469e:	2000      	movs	r0, #0
   d46a0:	f002 f8a4 	bl	d67ec <__aeabi_atexit>
String ac1 = "";             // answer choice 1
   d46a4:	492d      	ldr	r1, [pc, #180]	; (d475c <_GLOBAL__sub_I_client+0x15c>)
   d46a6:	482f      	ldr	r0, [pc, #188]	; (d4764 <_GLOBAL__sub_I_client+0x164>)
   d46a8:	f001 fa47 	bl	d5b3a <_ZN6StringC1EPKc>
   d46ac:	4a14      	ldr	r2, [pc, #80]	; (d4700 <_GLOBAL__sub_I_client+0x100>)
   d46ae:	492e      	ldr	r1, [pc, #184]	; (d4768 <_GLOBAL__sub_I_client+0x168>)
   d46b0:	482c      	ldr	r0, [pc, #176]	; (d4764 <_GLOBAL__sub_I_client+0x164>)
   d46b2:	f002 f89b 	bl	d67ec <__aeabi_atexit>
String ac2 = "";             // answer choice 2
   d46b6:	4929      	ldr	r1, [pc, #164]	; (d475c <_GLOBAL__sub_I_client+0x15c>)
   d46b8:	482c      	ldr	r0, [pc, #176]	; (d476c <_GLOBAL__sub_I_client+0x16c>)
   d46ba:	f001 fa3e 	bl	d5b3a <_ZN6StringC1EPKc>
   d46be:	4a10      	ldr	r2, [pc, #64]	; (d4700 <_GLOBAL__sub_I_client+0x100>)
   d46c0:	4929      	ldr	r1, [pc, #164]	; (d4768 <_GLOBAL__sub_I_client+0x168>)
   d46c2:	482a      	ldr	r0, [pc, #168]	; (d476c <_GLOBAL__sub_I_client+0x16c>)
   d46c4:	f002 f892 	bl	d67ec <__aeabi_atexit>
String ac3 = "";             // answer choice 3
   d46c8:	4924      	ldr	r1, [pc, #144]	; (d475c <_GLOBAL__sub_I_client+0x15c>)
   d46ca:	4829      	ldr	r0, [pc, #164]	; (d4770 <_GLOBAL__sub_I_client+0x170>)
   d46cc:	f001 fa35 	bl	d5b3a <_ZN6StringC1EPKc>
   d46d0:	4a0b      	ldr	r2, [pc, #44]	; (d4700 <_GLOBAL__sub_I_client+0x100>)
   d46d2:	4925      	ldr	r1, [pc, #148]	; (d4768 <_GLOBAL__sub_I_client+0x168>)
   d46d4:	4826      	ldr	r0, [pc, #152]	; (d4770 <_GLOBAL__sub_I_client+0x170>)
   d46d6:	f002 f889 	bl	d67ec <__aeabi_atexit>
String voteMessage = "Start voting.";
   d46da:	4926      	ldr	r1, [pc, #152]	; (d4774 <_GLOBAL__sub_I_client+0x174>)
   d46dc:	4826      	ldr	r0, [pc, #152]	; (d4778 <_GLOBAL__sub_I_client+0x178>)
   d46de:	f001 fa2c 	bl	d5b3a <_ZN6StringC1EPKc>
   d46e2:	4a07      	ldr	r2, [pc, #28]	; (d4700 <_GLOBAL__sub_I_client+0x100>)
   d46e4:	4920      	ldr	r1, [pc, #128]	; (d4768 <_GLOBAL__sub_I_client+0x168>)
   d46e6:	4824      	ldr	r0, [pc, #144]	; (d4778 <_GLOBAL__sub_I_client+0x178>)
   d46e8:	b003      	add	sp, #12
   d46ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
String voteMessage = "Start voting.";
   d46ee:	f002 b87d 	b.w	d67ec <__aeabi_atexit>
   d46f2:	bf00      	nop
   d46f4:	000d4109 	.word	0x000d4109
   d46f8:	000d6b72 	.word	0x000d6b72
   d46fc:	2003e524 	.word	0x2003e524
   d4700:	2003e4a0 	.word	0x2003e4a0
   d4704:	000d505d 	.word	0x000d505d
   d4708:	2003e4d4 	.word	0x2003e4d4
   d470c:	000d6b81 	.word	0x000d6b81
   d4710:	2003e594 	.word	0x2003e594
   d4714:	2003e5a4 	.word	0x2003e5a4
   d4718:	000d6b8b 	.word	0x000d6b8b
   d471c:	2003e5b4 	.word	0x2003e5b4
   d4720:	2003e5c4 	.word	0x2003e5c4
   d4724:	000d6b90 	.word	0x000d6b90
   d4728:	2003e5d4 	.word	0x2003e5d4
   d472c:	000d40f1 	.word	0x000d40f1
   d4730:	000d6b9c 	.word	0x000d6b9c
   d4734:	2003e5f4 	.word	0x2003e5f4
   d4738:	000d6bc8 	.word	0x000d6bc8
   d473c:	2003e604 	.word	0x2003e604
   d4740:	000d6bda 	.word	0x000d6bda
   d4744:	2003e614 	.word	0x2003e614
   d4748:	000d6c13 	.word	0x000d6c13
   d474c:	2003e624 	.word	0x2003e624
   d4750:	000d6c23 	.word	0x000d6c23
   d4754:	2003e634 	.word	0x2003e634
   d4758:	000d40d9 	.word	0x000d40d9
   d475c:	000d6b71 	.word	0x000d6b71
   d4760:	000d40c1 	.word	0x000d40c1
   d4764:	2003e4a4 	.word	0x2003e4a4
   d4768:	000d5aa5 	.word	0x000d5aa5
   d476c:	2003e4b4 	.word	0x2003e4b4
   d4770:	2003e4c4 	.word	0x2003e4c4
   d4774:	000d6c57 	.word	0x000d6c57
   d4778:	2003e5e4 	.word	0x2003e5e4

000d477c <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   d477c:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   d4780:	b510      	push	{r4, lr}
   d4782:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   d4784:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   d4786:	b113      	cbz	r3, d478e <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   d4788:	6d88      	ldr	r0, [r1, #88]	; 0x58
   d478a:	f000 fc97 	bl	d50bc <os_mutex_lock>
#endif
#endif
#endif
        }
   d478e:	4620      	mov	r0, r4
   d4790:	bd10      	pop	{r4, pc}

000d4792 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   d4792:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   d4794:	6803      	ldr	r3, [r0, #0]
   d4796:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   d479a:	4604      	mov	r4, r0
            if (mqtt->thread)
   d479c:	b112      	cbz	r2, d47a4 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   d479e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   d47a0:	f000 fc94 	bl	d50cc <os_mutex_unlock>
#endif
#endif
#endif
        }
   d47a4:	4620      	mov	r0, r4
   d47a6:	bd10      	pop	{r4, pc}

000d47a8 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   d47a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47aa:	461f      	mov	r7, r3
   d47ac:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d47b0:	4604      	mov	r4, r0
   d47b2:	460d      	mov	r5, r1
   d47b4:	4616      	mov	r6, r2
    if (thread) {
   d47b6:	b12b      	cbz	r3, d47c4 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x1c>
        this->thread = true;
   d47b8:	2301      	movs	r3, #1
   d47ba:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   d47be:	3058      	adds	r0, #88	; 0x58
   d47c0:	f000 fc74 	bl	d50ac <os_mutex_create>
    }
    this->callback = callback;
   d47c4:	9b08      	ldr	r3, [sp, #32]
   d47c6:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   d47c8:	2300      	movs	r3, #0
   d47ca:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   d47cc:	b106      	cbz	r6, d47d0 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x28>
        this->ip = ip;
   d47ce:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   d47d0:	b125      	cbz	r5, d47dc <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x34>
        this->domain = domain;
   d47d2:	4629      	mov	r1, r5
   d47d4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d47d8:	f001 f9f7 	bl	d5bca <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d47dc:	9b06      	ldr	r3, [sp, #24]
   d47de:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d47e0:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   d47e2:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   d47e4:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d47e8:	2bff      	cmp	r3, #255	; 0xff
   d47ea:	bfb8      	it	lt
   d47ec:	23ff      	movlt	r3, #255	; 0xff
   d47ee:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d47f2:	b108      	cbz	r0, d47f8 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x50>
      delete[] buffer;
   d47f4:	f7ff fc53 	bl	d409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d47f8:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d47fc:	f7ff fc4b 	bl	d4096 <_Znaj>
   d4800:	61e0      	str	r0, [r4, #28]
}
   d4802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4804 <_ZN4MQTTC1EPctPFvS0_PhjEb>:
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d4804:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4808:	4604      	mov	r4, r0
            bool thread) {
   d480a:	2500      	movs	r5, #0
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d480c:	4617      	mov	r7, r2
   d480e:	4698      	mov	r8, r3
   d4810:	460e      	mov	r6, r1
            bool thread) {
   d4812:	f001 fcc7 	bl	d61a4 <_ZN9TCPClientC1Ev>
   d4816:	490d      	ldr	r1, [pc, #52]	; (d484c <_ZN4MQTTC1EPctPFvS0_PhjEb+0x48>)
   d4818:	61e5      	str	r5, [r4, #28]
   d481a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d481e:	f001 f98c 	bl	d5b3a <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d4822:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   d4826:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d4828:	e9cd 8302 	strd	r8, r3, [sp, #8]
   d482c:	22ff      	movs	r2, #255	; 0xff
   d482e:	230f      	movs	r3, #15
   d4830:	e9cd 3200 	strd	r3, r2, [sp]
   d4834:	4620      	mov	r0, r4
            bool thread) {
   d4836:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d483a:	463b      	mov	r3, r7
   d483c:	462a      	mov	r2, r5
   d483e:	4631      	mov	r1, r6
   d4840:	f7ff ffb2 	bl	d47a8 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>
}
   d4844:	4620      	mov	r0, r4
   d4846:	b004      	add	sp, #16
   d4848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d484c:	000d6b71 	.word	0x000d6b71

000d4850 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d4850:	b510      	push	{r4, lr}
   d4852:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d4854:	4620      	mov	r0, r4
   d4856:	f001 fc01 	bl	d605c <_ZN9TCPClient9availableEv>
   d485a:	2800      	cmp	r0, #0
   d485c:	d0fa      	beq.n	d4854 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d485e:	4620      	mov	r0, r4
   d4860:	f001 fb35 	bl	d5ece <_ZN9TCPClient4readEv>
}
   d4864:	b2c0      	uxtb	r0, r0
   d4866:	bd10      	pop	{r4, pc}

000d4868 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d486c:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d486e:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4870:	460f      	mov	r7, r1
    buffer[len++] = readByte();
   d4872:	f7ff ffed 	bl	d4850 <_ZN4MQTT8readByteEv>
   d4876:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d4878:	69eb      	ldr	r3, [r5, #28]
   d487a:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d487e:	f04f 0901 	mov.w	r9, #1
   d4882:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d4886:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
   d488a:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d488c:	4628      	mov	r0, r5
   d488e:	f7ff ffdf 	bl	d4850 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d4892:	4626      	mov	r6, r4
   d4894:	69eb      	ldr	r3, [r5, #28]
   d4896:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d4898:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d489c:	fb13 f309 	smulbb	r3, r3, r9
   d48a0:	4498      	add	r8, r3
        buffer[len++] = digit;
   d48a2:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d48a4:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   d48a6:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d48a8:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
   d48ac:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d48b0:	d4ec      	bmi.n	d488c <_ZN4MQTT10readPacketEPh+0x24>
    *lengthLength = len-1;
   d48b2:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d48b4:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   d48b8:	703b      	strb	r3, [r7, #0]
    if (isPublish) {
   d48ba:	d124      	bne.n	d4906 <_ZN4MQTT10readPacketEPh+0x9e>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d48bc:	4628      	mov	r0, r5
   d48be:	69ef      	ldr	r7, [r5, #28]
   d48c0:	f7ff ffc6 	bl	d4850 <_ZN4MQTT8readByteEv>
   d48c4:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
   d48c6:	4628      	mov	r0, r5
   d48c8:	69ef      	ldr	r7, [r5, #28]
   d48ca:	1cf4      	adds	r4, r6, #3
   d48cc:	f7ff ffc0 	bl	d4850 <_ZN4MQTT8readByteEv>
        buffer[len++] = readByte();
   d48d0:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   d48d2:	b2b6      	uxth	r6, r6
   d48d4:	b2a4      	uxth	r4, r4
   d48d6:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d48d8:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d48da:	b2b6      	uxth	r6, r6
   d48dc:	46b1      	mov	r9, r6
   d48de:	4627      	mov	r7, r4
   d48e0:	45c1      	cmp	r9, r8
   d48e2:	d212      	bcs.n	d490a <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d48e4:	4628      	mov	r0, r5
   d48e6:	f7ff ffb3 	bl	d4850 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d48ea:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d48ee:	42bb      	cmp	r3, r7
            buffer[len] = digit;
   d48f0:	bf88      	it	hi
   d48f2:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
   d48f4:	f109 0901 	add.w	r9, r9, #1
            buffer[len] = digit;
   d48f8:	bf88      	it	hi
   d48fa:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
   d48fc:	3701      	adds	r7, #1
   d48fe:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
   d4900:	fa1f f989 	uxth.w	r9, r9
   d4904:	e7ec      	b.n	d48e0 <_ZN4MQTT10readPacketEPh+0x78>
    uint8_t start = 0;
   d4906:	2600      	movs	r6, #0
   d4908:	e7e7      	b.n	d48da <_ZN4MQTT10readPacketEPh+0x72>
   d490a:	eba8 0006 	sub.w	r0, r8, r6
   d490e:	45b0      	cmp	r8, r6
   d4910:	bf2c      	ite	cs
   d4912:	4606      	movcs	r6, r0
   d4914:	2600      	movcc	r6, #0
   d4916:	4434      	add	r4, r6
    }

    if (len > this->maxpacketsize) {
   d4918:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
   d491c:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d491e:	42a0      	cmp	r0, r4
   d4920:	bf2c      	ite	cs
   d4922:	4620      	movcs	r0, r4
   d4924:	2000      	movcc	r0, #0
   d4926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d492a <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d492a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d492c:	468c      	mov	ip, r1
   d492e:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d4930:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d4932:	4607      	mov	r7, r0
    uint8_t llen = 0;
   d4934:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   d4936:	46ae      	mov	lr, r5
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d4938:	a802      	add	r0, sp, #8
        digit = len % 128;
   d493a:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        if (len > 0) {
   d493e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   d4942:	f103 0401 	add.w	r4, r3, #1
   d4946:	4403      	add	r3, r0
            digit |= 0x80;
   d4948:	bf88      	it	hi
   d494a:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        llen++;
    } while(len > 0);
   d494e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   d4952:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
   d4956:	b2e4      	uxtb	r4, r4
   d4958:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
   d495c:	d810      	bhi.n	d4980 <_ZN4MQTT5writeEhPht+0x56>

    buf[4-llen] = header;
   d495e:	f1c4 0304 	rsb	r3, r4, #4
   d4962:	18d1      	adds	r1, r2, r3
   d4964:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d4968:	f1c4 0305 	rsb	r3, r4, #5
   d496c:	4413      	add	r3, r2
   d496e:	a801      	add	r0, sp, #4
   d4970:	3205      	adds	r2, #5
   d4972:	4293      	cmp	r3, r2
   d4974:	d006      	beq.n	d4984 <_ZN4MQTT5writeEhPht+0x5a>
        buf[5-llen+i] = lenBuf[i];
   d4976:	f810 5b01 	ldrb.w	r5, [r0], #1
   d497a:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
   d497e:	e7f8      	b.n	d4972 <_ZN4MQTT5writeEhPht+0x48>
        lenBuf[pos++] = digit;
   d4980:	4623      	mov	r3, r4
   d4982:	e7d8      	b.n	d4936 <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d4984:	1c72      	adds	r2, r6, #1
   d4986:	4422      	add	r2, r4
   d4988:	4638      	mov	r0, r7
   d498a:	f001 f9ca 	bl	d5d22 <_ZN9TCPClient5writeEPKhj>
   d498e:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4990:	f000 fbbc 	bl	d510c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d4994:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   d4996:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d4998:	4432      	add	r2, r6
   d499a:	b2a8      	uxth	r0, r5
}
   d499c:	1a13      	subs	r3, r2, r0
   d499e:	4258      	negs	r0, r3
   d49a0:	4158      	adcs	r0, r3
   d49a2:	b003      	add	sp, #12
   d49a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d49a6 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d49a6:	b513      	push	{r0, r1, r4, lr}
   d49a8:	4604      	mov	r4, r0
    MutexLocker lock(this);
   d49aa:	4601      	mov	r1, r0
   d49ac:	a801      	add	r0, sp, #4
   d49ae:	f7ff fee5 	bl	d477c <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   d49b2:	69e3      	ldr	r3, [r4, #28]
   d49b4:	22e0      	movs	r2, #224	; 0xe0
   d49b6:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d49b8:	69e3      	ldr	r3, [r4, #28]
   d49ba:	2200      	movs	r2, #0
   d49bc:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   d49be:	69e1      	ldr	r1, [r4, #28]
   d49c0:	2202      	movs	r2, #2
   d49c2:	4620      	mov	r0, r4
   d49c4:	f001 f9ad 	bl	d5d22 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d49c8:	4620      	mov	r0, r4
   d49ca:	f001 fba1 	bl	d6110 <_ZN9TCPClient4stopEv>
   d49ce:	f000 fb9d 	bl	d510c <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d49d2:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   d49d6:	a801      	add	r0, sp, #4
   d49d8:	f7ff fedb 	bl	d4792 <_ZN4MQTT11MutexLockerD1Ev>
}
   d49dc:	b002      	add	sp, #8
   d49de:	bd10      	pop	{r4, pc}

000d49e0 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d49e0:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d49e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d49e4:	4604      	mov	r4, r0
    pos += 2;
   d49e6:	b298      	uxth	r0, r3
   d49e8:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   d49ea:	5ccd      	ldrb	r5, [r1, r3]
   d49ec:	b155      	cbz	r5, d4a04 <_ZN4MQTT11writeStringEPKcPht+0x24>
   d49ee:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d49f2:	4286      	cmp	r6, r0
   d49f4:	f103 0701 	add.w	r7, r3, #1
   d49f8:	d904      	bls.n	d4a04 <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
   d49fa:	1c46      	adds	r6, r0, #1
   d49fc:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   d49fe:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   d4a00:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
   d4a02:	e7f2      	b.n	d49ea <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d4a04:	b299      	uxth	r1, r3
   d4a06:	1a44      	subs	r4, r0, r1
   d4a08:	4422      	add	r2, r4
   d4a0a:	1209      	asrs	r1, r1, #8
   d4a0c:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d4a10:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   d4a14:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a16 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d4a16:	b538      	push	{r3, r4, r5, lr}
   d4a18:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   d4a1a:	f001 f998 	bl	d5d4e <_ZN9TCPClient9connectedEv>
   d4a1e:	2800      	cmp	r0, #0
   d4a20:	bf14      	ite	ne
   d4a22:	2501      	movne	r5, #1
   d4a24:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   d4a26:	d102      	bne.n	d4a2e <_ZN4MQTT11isConnectedEv+0x18>
   d4a28:	4620      	mov	r0, r4
   d4a2a:	f001 fb71 	bl	d6110 <_ZN9TCPClient4stopEv>
    return rc;
}
   d4a2e:	4628      	mov	r0, r5
   d4a30:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4a34 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d4a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4a38:	b088      	sub	sp, #32
   d4a3a:	4604      	mov	r4, r0
   d4a3c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   d4a40:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   d4a44:	4689      	mov	r9, r1
   d4a46:	4617      	mov	r7, r2
   d4a48:	461e      	mov	r6, r3
    if (!isConnected()) {
   d4a4a:	f7ff ffe4 	bl	d4a16 <_ZN4MQTT11isConnectedEv>
   d4a4e:	4605      	mov	r5, r0
   d4a50:	2800      	cmp	r0, #0
   d4a52:	f040 80cb 	bne.w	d4bec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b8>
        MutexLocker lock(this);
   d4a56:	4621      	mov	r1, r4
   d4a58:	a801      	add	r0, sp, #4
   d4a5a:	f7ff fe8f 	bl	d477c <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   d4a5e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4a60:	2900      	cmp	r1, #0
   d4a62:	f040 8087 	bne.w	d4b74 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x140>
            result = _client.connect(this->domain.c_str(), this->port);
   d4a66:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4a6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d4a6c:	462b      	mov	r3, r5
   d4a6e:	4620      	mov	r0, r4
   d4a70:	f001 fbbc 	bl	d61ec <_ZN9TCPClient7connectEPKctm>
        if (result) {
   d4a74:	2800      	cmp	r0, #0
   d4a76:	d079      	beq.n	d4b6c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            nextMsgId = 1;
   d4a78:	2301      	movs	r3, #1
   d4a7a:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   d4a7c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   d4a80:	69e2      	ldr	r2, [r4, #28]
   d4a82:	2b04      	cmp	r3, #4
   d4a84:	f040 8081 	bne.w	d4b8a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4a88:	4b59      	ldr	r3, [pc, #356]	; (d4bf0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>)
   d4a8a:	6818      	ldr	r0, [r3, #0]
   d4a8c:	8899      	ldrh	r1, [r3, #4]
   d4a8e:	799b      	ldrb	r3, [r3, #6]
   d4a90:	f8ad 100c 	strh.w	r1, [sp, #12]
   d4a94:	f88d 300e 	strb.w	r3, [sp, #14]
   d4a98:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4a9a:	f8c2 0005 	str.w	r0, [r2, #5]
   d4a9e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d4aa2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4aa6:	f8a2 1009 	strh.w	r1, [r2, #9]
   d4aaa:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   d4aac:	230c      	movs	r3, #12
            if (willTopic) {
   d4aae:	f1b8 0f00 	cmp.w	r8, #0
   d4ab2:	d07f      	beq.n	d4bb4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d4ab4:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   d4ab8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   d4abc:	0140      	lsls	r0, r0, #5
   d4abe:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   d4ac2:	f040 0006 	orr.w	r0, r0, #6
   d4ac6:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   d4ac8:	f1ba 0f00 	cmp.w	sl, #0
   d4acc:	d101      	bne.n	d4ad2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
              v = v&0xfd;
   d4ace:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   d4ad2:	b11f      	cbz	r7, d4adc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
                if(pass != NULL) {
   d4ad4:	2e00      	cmp	r6, #0
   d4ad6:	d16f      	bne.n	d4bb8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = v|0x80;
   d4ad8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   d4adc:	69e2      	ldr	r2, [r4, #28]
   d4ade:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   d4ae0:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4ae2:	69e1      	ldr	r1, [r4, #28]
   d4ae4:	1c58      	adds	r0, r3, #1
   d4ae6:	1212      	asrs	r2, r2, #8
   d4ae8:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d4aea:	1c9a      	adds	r2, r3, #2
   d4aec:	69e1      	ldr	r1, [r4, #28]
   d4aee:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d4af0:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d4af2:	3303      	adds	r3, #3
   d4af4:	69e2      	ldr	r2, [r4, #28]
   d4af6:	4649      	mov	r1, r9
   d4af8:	4620      	mov	r0, r4
   d4afa:	f7ff ff71 	bl	d49e0 <_ZN4MQTT11writeStringEPKcPht>
   d4afe:	4603      	mov	r3, r0
            if (willTopic) {
   d4b00:	f1b8 0f00 	cmp.w	r8, #0
   d4b04:	d00b      	beq.n	d4b1e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xea>
                length = writeString(willTopic, buffer, length);
   d4b06:	69e2      	ldr	r2, [r4, #28]
   d4b08:	4641      	mov	r1, r8
   d4b0a:	4620      	mov	r0, r4
   d4b0c:	f7ff ff68 	bl	d49e0 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d4b10:	69e2      	ldr	r2, [r4, #28]
   d4b12:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   d4b14:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   d4b16:	4620      	mov	r0, r4
   d4b18:	f7ff ff62 	bl	d49e0 <_ZN4MQTT11writeStringEPKcPht>
   d4b1c:	4603      	mov	r3, r0
            if(user != NULL) {
   d4b1e:	b167      	cbz	r7, d4b3a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                length = writeString(user,buffer,length);
   d4b20:	69e2      	ldr	r2, [r4, #28]
   d4b22:	4639      	mov	r1, r7
   d4b24:	4620      	mov	r0, r4
   d4b26:	f7ff ff5b 	bl	d49e0 <_ZN4MQTT11writeStringEPKcPht>
   d4b2a:	4603      	mov	r3, r0
                if(pass != NULL) {
   d4b2c:	b12e      	cbz	r6, d4b3a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                    length = writeString(pass,buffer,length);
   d4b2e:	69e2      	ldr	r2, [r4, #28]
   d4b30:	4631      	mov	r1, r6
   d4b32:	4620      	mov	r0, r4
   d4b34:	f7ff ff54 	bl	d49e0 <_ZN4MQTT11writeStringEPKcPht>
   d4b38:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   d4b3a:	3b05      	subs	r3, #5
   d4b3c:	69e2      	ldr	r2, [r4, #28]
   d4b3e:	b29b      	uxth	r3, r3
   d4b40:	2110      	movs	r1, #16
   d4b42:	4620      	mov	r0, r4
   d4b44:	f7ff fef1 	bl	d492a <_ZN4MQTT5writeEhPht>
   d4b48:	f000 fae0 	bl	d510c <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   d4b4c:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   d4b50:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   d4b54:	4620      	mov	r0, r4
   d4b56:	f001 fa81 	bl	d605c <_ZN9TCPClient9availableEv>
   d4b5a:	bb80      	cbnz	r0, d4bbe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18a>
   d4b5c:	f000 fad6 	bl	d510c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   d4b60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4b62:	1ac0      	subs	r0, r0, r3
   d4b64:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4b66:	4373      	muls	r3, r6
   d4b68:	4298      	cmp	r0, r3
   d4b6a:	d9f3      	bls.n	d4b54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
        _client.stop();
   d4b6c:	4620      	mov	r0, r4
   d4b6e:	f001 facf 	bl	d6110 <_ZN9TCPClient4stopEv>
   d4b72:	e034      	b.n	d4bde <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1aa>
            result = _client.connect(this->ip, this->port);
   d4b74:	a802      	add	r0, sp, #8
   d4b76:	f000 fe47 	bl	d5808 <_ZN9IPAddressC1EPKh>
   d4b7a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4b7e:	462b      	mov	r3, r5
   d4b80:	a902      	add	r1, sp, #8
   d4b82:	4620      	mov	r0, r4
   d4b84:	f001 f9ef 	bl	d5f66 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4b88:	e774      	b.n	d4a74 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4b8a:	4b1a      	ldr	r3, [pc, #104]	; (d4bf4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   d4b8c:	6818      	ldr	r0, [r3, #0]
   d4b8e:	6859      	ldr	r1, [r3, #4]
   d4b90:	7a1b      	ldrb	r3, [r3, #8]
   d4b92:	f10d 0c08 	add.w	ip, sp, #8
   d4b96:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   d4b9a:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d4b9e:	ab02      	add	r3, sp, #8
   d4ba0:	cb03      	ldmia	r3!, {r0, r1}
   d4ba2:	f8c2 0005 	str.w	r0, [r2, #5]
   d4ba6:	f8c2 1009 	str.w	r1, [r2, #9]
   d4baa:	f89c 3000 	ldrb.w	r3, [ip]
   d4bae:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d4bb0:	230e      	movs	r3, #14
   d4bb2:	e77c      	b.n	d4aae <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   d4bb4:	2002      	movs	r0, #2
   d4bb6:	e787      	b.n	d4ac8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
                    v = v|(0x80>>1);
   d4bb8:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   d4bbc:	e78e      	b.n	d4adc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
            uint16_t len = readPacket(&llen);
   d4bbe:	a902      	add	r1, sp, #8
   d4bc0:	4620      	mov	r0, r4
   d4bc2:	f7ff fe51 	bl	d4868 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   d4bc6:	2804      	cmp	r0, #4
   d4bc8:	d1d0      	bne.n	d4b6c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
                if (buffer[3] == CONN_ACCEPT) {
   d4bca:	69e3      	ldr	r3, [r4, #28]
   d4bcc:	78de      	ldrb	r6, [r3, #3]
   d4bce:	2e00      	cmp	r6, #0
   d4bd0:	d1cc      	bne.n	d4b6c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
   d4bd2:	f000 fa9b 	bl	d510c <HAL_Timer_Get_Milli_Seconds>
                    return true;
   d4bd6:	2501      	movs	r5, #1
                    lastInActivity = millis();
   d4bd8:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d4bda:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   d4bde:	a801      	add	r0, sp, #4
   d4be0:	f7ff fdd7 	bl	d4792 <_ZN4MQTT11MutexLockerD1Ev>
}
   d4be4:	4628      	mov	r0, r5
   d4be6:	b008      	add	sp, #32
   d4be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   d4bec:	2500      	movs	r5, #0
   d4bee:	e7f9      	b.n	d4be4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>
   d4bf0:	000d6c65 	.word	0x000d6c65
   d4bf4:	000d6c6c 	.word	0x000d6c6c

000d4bf8 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   d4bf8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d4bfa:	2301      	movs	r3, #1
   d4bfc:	2204      	movs	r2, #4
   d4bfe:	e9cd 3204 	strd	r3, r2, [sp, #16]
   d4c02:	2300      	movs	r3, #0
   d4c04:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d4c08:	e9cd 3300 	strd	r3, r3, [sp]
   d4c0c:	461a      	mov	r2, r3
   d4c0e:	f7ff ff11 	bl	d4a34 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d4c12:	b007      	add	sp, #28
   d4c14:	f85d fb04 	ldr.w	pc, [sp], #4

000d4c18 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c1c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   d4c20:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   d4c24:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   d4c28:	4604      	mov	r4, r0
   d4c2a:	468b      	mov	fp, r1
   d4c2c:	4616      	mov	r6, r2
   d4c2e:	461f      	mov	r7, r3
    if (isConnected()) {
   d4c30:	f7ff fef1 	bl	d4a16 <_ZN4MQTT11isConnectedEv>
   d4c34:	4682      	mov	sl, r0
   d4c36:	2800      	cmp	r0, #0
   d4c38:	d051      	beq.n	d4cde <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   d4c3a:	4621      	mov	r1, r4
   d4c3c:	a801      	add	r0, sp, #4
   d4c3e:	f7ff fd9d 	bl	d477c <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   d4c42:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d4c46:	69e0      	ldr	r0, [r4, #28]
   d4c48:	2100      	movs	r1, #0
   d4c4a:	f001 ff07 	bl	d6a5c <memset>
        length = writeString(topic, buffer, length);
   d4c4e:	2305      	movs	r3, #5
   d4c50:	69e2      	ldr	r2, [r4, #28]
   d4c52:	4659      	mov	r1, fp
   d4c54:	4620      	mov	r0, r4
   d4c56:	f7ff fec3 	bl	d49e0 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   d4c5a:	1e6b      	subs	r3, r5, #1
   d4c5c:	2b01      	cmp	r3, #1
   d4c5e:	d815      	bhi.n	d4c8c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   d4c60:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4c62:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   d4c64:	3101      	adds	r1, #1
   d4c66:	b289      	uxth	r1, r1
   d4c68:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4c6a:	1209      	asrs	r1, r1, #8
   d4c6c:	5419      	strb	r1, [r3, r0]
   d4c6e:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   d4c70:	69e3      	ldr	r3, [r4, #28]
   d4c72:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4c74:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   d4c76:	3002      	adds	r0, #2
   d4c78:	5499      	strb	r1, [r3, r2]
   d4c7a:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d4c7c:	f1b8 0f00 	cmp.w	r8, #0
   d4c80:	d004      	beq.n	d4c8c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   d4c82:	8c23      	ldrh	r3, [r4, #32]
   d4c84:	1c5a      	adds	r2, r3, #1
   d4c86:	8422      	strh	r2, [r4, #32]
   d4c88:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4c8c:	2100      	movs	r1, #0
   d4c8e:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d4c90:	428f      	cmp	r7, r1
   d4c92:	69e2      	ldr	r2, [r4, #28]
   d4c94:	b29b      	uxth	r3, r3
   d4c96:	d90a      	bls.n	d4cae <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   d4c98:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   d4c9c:	459c      	cmp	ip, r3
   d4c9e:	d906      	bls.n	d4cae <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   d4ca0:	f816 c001 	ldrb.w	ip, [r6, r1]
   d4ca4:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d4ca8:	3101      	adds	r1, #1
   d4caa:	b289      	uxth	r1, r1
   d4cac:	e7ef      	b.n	d4c8e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   d4cae:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   d4cb2:	2900      	cmp	r1, #0
   d4cb4:	bf0c      	ite	eq
   d4cb6:	2130      	moveq	r1, #48	; 0x30
   d4cb8:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   d4cba:	f1b9 0f00 	cmp.w	r9, #0
   d4cbe:	d001      	beq.n	d4cc4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   d4cc0:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   d4cc4:	2d02      	cmp	r5, #2
   d4cc6:	d10e      	bne.n	d4ce6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   d4cc8:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   d4ccc:	3b05      	subs	r3, #5
   d4cce:	b29b      	uxth	r3, r3
   d4cd0:	4620      	mov	r0, r4
   d4cd2:	f7ff fe2a 	bl	d492a <_ZN4MQTT5writeEhPht>
   d4cd6:	4682      	mov	sl, r0
        MutexLocker lock(this);
   d4cd8:	a801      	add	r0, sp, #4
   d4cda:	f7ff fd5a 	bl	d4792 <_ZN4MQTT11MutexLockerD1Ev>
}
   d4cde:	4650      	mov	r0, sl
   d4ce0:	b003      	add	sp, #12
   d4ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   d4ce6:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d4ce8:	bf08      	it	eq
   d4cea:	f041 0102 	orreq.w	r1, r1, #2
   d4cee:	e7ed      	b.n	d4ccc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000d4cf0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d4cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d4cf2:	9c08      	ldr	r4, [sp, #32]
   d4cf4:	9403      	str	r4, [sp, #12]
   d4cf6:	2400      	movs	r4, #0
   d4cf8:	9402      	str	r4, [sp, #8]
   d4cfa:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d4cfe:	9401      	str	r4, [sp, #4]
   d4d00:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4d04:	9400      	str	r4, [sp, #0]
   d4d06:	f7ff ff87 	bl	d4c18 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d4d0a:	b004      	add	sp, #16
   d4d0c:	bd10      	pop	{r4, pc}

000d4d0e <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   d4d0e:	b530      	push	{r4, r5, lr}
   d4d10:	b087      	sub	sp, #28
   d4d12:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4d14:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   d4d16:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4d18:	9204      	str	r2, [sp, #16]
   d4d1a:	f001 fedd 	bl	d6ad8 <strlen>
   d4d1e:	2500      	movs	r5, #0
   d4d20:	4603      	mov	r3, r0
   d4d22:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d4d26:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d4d2a:	9500      	str	r5, [sp, #0]
   d4d2c:	4620      	mov	r0, r4
   d4d2e:	f7ff ffdf 	bl	d4cf0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d4d32:	b007      	add	sp, #28
   d4d34:	bd30      	pop	{r4, r5, pc}

000d4d36 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   d4d36:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4d38:	4604      	mov	r4, r0
   d4d3a:	460e      	mov	r6, r1
    if (isConnected()) {
   d4d3c:	f7ff fe6b 	bl	d4a16 <_ZN4MQTT11isConnectedEv>
   d4d40:	4605      	mov	r5, r0
   d4d42:	b1c8      	cbz	r0, d4d78 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   d4d44:	4621      	mov	r1, r4
   d4d46:	a801      	add	r0, sp, #4
   d4d48:	f7ff fd18 	bl	d477c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d4d4c:	69e3      	ldr	r3, [r4, #28]
   d4d4e:	2262      	movs	r2, #98	; 0x62
   d4d50:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d4d52:	69e3      	ldr	r3, [r4, #28]
   d4d54:	2202      	movs	r2, #2
   d4d56:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d4d58:	69e3      	ldr	r3, [r4, #28]
   d4d5a:	1232      	asrs	r2, r6, #8
   d4d5c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d4d5e:	69e3      	ldr	r3, [r4, #28]
   d4d60:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d4d62:	69e1      	ldr	r1, [r4, #28]
   d4d64:	2204      	movs	r2, #4
   d4d66:	4620      	mov	r0, r4
   d4d68:	f000 ffdb 	bl	d5d22 <_ZN9TCPClient5writeEPKhj>
   d4d6c:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d4d6e:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d4d70:	bf18      	it	ne
   d4d72:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d4d74:	f7ff fd0d 	bl	d4792 <_ZN4MQTT11MutexLockerD1Ev>
}
   d4d78:	4628      	mov	r0, r5
   d4d7a:	b002      	add	sp, #8
   d4d7c:	bd70      	pop	{r4, r5, r6, pc}

000d4d7e <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   d4d7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4d80:	4604      	mov	r4, r0
   d4d82:	460e      	mov	r6, r1
    if (isConnected()) {
   d4d84:	f7ff fe47 	bl	d4a16 <_ZN4MQTT11isConnectedEv>
   d4d88:	4605      	mov	r5, r0
   d4d8a:	b1c8      	cbz	r0, d4dc0 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   d4d8c:	4621      	mov	r1, r4
   d4d8e:	a801      	add	r0, sp, #4
   d4d90:	f7ff fcf4 	bl	d477c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d4d94:	69e3      	ldr	r3, [r4, #28]
   d4d96:	2272      	movs	r2, #114	; 0x72
   d4d98:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d4d9a:	69e3      	ldr	r3, [r4, #28]
   d4d9c:	2202      	movs	r2, #2
   d4d9e:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d4da0:	69e3      	ldr	r3, [r4, #28]
   d4da2:	1232      	asrs	r2, r6, #8
   d4da4:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d4da6:	69e3      	ldr	r3, [r4, #28]
   d4da8:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d4daa:	69e1      	ldr	r1, [r4, #28]
   d4dac:	2204      	movs	r2, #4
   d4dae:	4620      	mov	r0, r4
   d4db0:	f000 ffb7 	bl	d5d22 <_ZN9TCPClient5writeEPKhj>
   d4db4:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d4db6:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d4db8:	bf18      	it	ne
   d4dba:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d4dbc:	f7ff fce9 	bl	d4792 <_ZN4MQTT11MutexLockerD1Ev>
}
   d4dc0:	4628      	mov	r0, r5
   d4dc2:	b002      	add	sp, #8
   d4dc4:	bd70      	pop	{r4, r5, r6, pc}

000d4dc6 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   d4dc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4dca:	ed2d 8b02 	vpush	{d8}
   d4dce:	b087      	sub	sp, #28
   d4dd0:	af00      	add	r7, sp, #0
   d4dd2:	4604      	mov	r4, r0
    if (isConnected()) {
   d4dd4:	f7ff fe1f 	bl	d4a16 <_ZN4MQTT11isConnectedEv>
   d4dd8:	4681      	mov	r9, r0
   d4dda:	b1f8      	cbz	r0, d4e1c <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   d4ddc:	4621      	mov	r1, r4
   d4dde:	f107 0014 	add.w	r0, r7, #20
   d4de2:	f7ff fccb 	bl	d477c <_ZN4MQTT11MutexLockerC1EPS_>
   d4de6:	f000 f991 	bl	d510c <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d4dea:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4dec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4df0:	4353      	muls	r3, r2
   d4df2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d4df4:	1a82      	subs	r2, r0, r2
   d4df6:	429a      	cmp	r2, r3
   d4df8:	4606      	mov	r6, r0
   d4dfa:	d803      	bhi.n	d4e04 <_ZN4MQTT4loopEv+0x3e>
   d4dfc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d4dfe:	1a82      	subs	r2, r0, r2
   d4e00:	4293      	cmp	r3, r2
   d4e02:	d221      	bcs.n	d4e48 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   d4e04:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d4e08:	b17b      	cbz	r3, d4e2a <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   d4e0a:	4620      	mov	r0, r4
   d4e0c:	f001 f980 	bl	d6110 <_ZN9TCPClient4stopEv>
                return false;
   d4e10:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   d4e14:	f107 0014 	add.w	r0, r7, #20
   d4e18:	f7ff fcbb 	bl	d4792 <_ZN4MQTT11MutexLockerD1Ev>
}
   d4e1c:	4648      	mov	r0, r9
   d4e1e:	371c      	adds	r7, #28
   d4e20:	46bd      	mov	sp, r7
   d4e22:	ecbd 8b02 	vpop	{d8}
   d4e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   d4e2a:	69e2      	ldr	r2, [r4, #28]
   d4e2c:	21c0      	movs	r1, #192	; 0xc0
   d4e2e:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d4e30:	69e2      	ldr	r2, [r4, #28]
   d4e32:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d4e34:	69e1      	ldr	r1, [r4, #28]
   d4e36:	2202      	movs	r2, #2
   d4e38:	4620      	mov	r0, r4
   d4e3a:	f000 ff72 	bl	d5d22 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   d4e3e:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   d4e42:	2301      	movs	r3, #1
   d4e44:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   d4e48:	4620      	mov	r0, r4
   d4e4a:	f001 f907 	bl	d605c <_ZN9TCPClient9availableEv>
   d4e4e:	2800      	cmp	r0, #0
   d4e50:	d0e0      	beq.n	d4e14 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   d4e52:	f107 0113 	add.w	r1, r7, #19
   d4e56:	4620      	mov	r0, r4
   d4e58:	f7ff fd06 	bl	d4868 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   d4e5c:	4683      	mov	fp, r0
   d4e5e:	2800      	cmp	r0, #0
   d4e60:	d0d8      	beq.n	d4e14 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   d4e62:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   d4e64:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d4e66:	7819      	ldrb	r1, [r3, #0]
   d4e68:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d4e6c:	2a30      	cmp	r2, #48	; 0x30
   d4e6e:	d17f      	bne.n	d4f70 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   d4e70:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   d4e74:	f1ba 0f00 	cmp.w	sl, #0
   d4e78:	d0cc      	beq.n	d4e14 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d4e7a:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   d4e7e:	466a      	mov	r2, sp
   d4e80:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d4e84:	eb03 020c 	add.w	r2, r3, ip
   d4e88:	7855      	ldrb	r5, [r2, #1]
   d4e8a:	7891      	ldrb	r1, [r2, #2]
   d4e8c:	eb01 2105 	add.w	r1, r1, r5, lsl #8
   d4e90:	b28d      	uxth	r5, r1
                        char topic[tl+1];
   d4e92:	f105 0208 	add.w	r2, r5, #8
   d4e96:	4669      	mov	r1, sp
   d4e98:	08d2      	lsrs	r2, r2, #3
   d4e9a:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   d4e9e:	4695      	mov	sp, r2
   d4ea0:	f10c 0203 	add.w	r2, ip, #3
   d4ea4:	60fa      	str	r2, [r7, #12]
   d4ea6:	eb03 0e02 	add.w	lr, r3, r2
   d4eaa:	eb0d 0205 	add.w	r2, sp, r5
   d4eae:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   d4eb0:	f8c7 d008 	str.w	sp, [r7, #8]
   d4eb4:	607a      	str	r2, [r7, #4]
   d4eb6:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   d4eba:	428a      	cmp	r2, r1
   d4ebc:	d006      	beq.n	d4ecc <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   d4ebe:	460a      	mov	r2, r1
   d4ec0:	f81e 8b01 	ldrb.w	r8, [lr], #1
   d4ec4:	f802 8b01 	strb.w	r8, [r2], #1
   d4ec8:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   d4eca:	e7f4      	b.n	d4eb6 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   d4ecc:	2200      	movs	r2, #0
   d4ece:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4ed0:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4ed4:	68f9      	ldr	r1, [r7, #12]
   d4ed6:	f008 0806 	and.w	r8, r8, #6
   d4eda:	ebab 020c 	sub.w	r2, fp, ip
   d4ede:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4ee0:	f1b8 0f02 	cmp.w	r8, #2
   d4ee4:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4ee8:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4eea:	d125      	bne.n	d4f38 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4eec:	f813 e001 	ldrb.w	lr, [r3, r1]
   d4ef0:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   d4ef2:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4ef4:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   d4ef8:	f10c 0105 	add.w	r1, ip, #5
   d4efc:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   d4efe:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4f00:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   d4f04:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d4f06:	69e3      	ldr	r3, [r4, #28]
   d4f08:	2240      	movs	r2, #64	; 0x40
   d4f0a:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d4f0c:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4f0e:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   d4f12:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d4f16:	69e3      	ldr	r3, [r4, #28]
   d4f18:	ea4f 222b 	mov.w	r2, fp, asr #8
   d4f1c:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d4f1e:	69e3      	ldr	r3, [r4, #28]
   d4f20:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   d4f24:	69e1      	ldr	r1, [r4, #28]
   d4f26:	2204      	movs	r2, #4
   d4f28:	4620      	mov	r0, r4
   d4f2a:	f000 fefa 	bl	d5d22 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   d4f2e:	6266      	str	r6, [r4, #36]	; 0x24
   d4f30:	ee18 3a10 	vmov	r3, s16
   d4f34:	469d      	mov	sp, r3
   d4f36:	e76d      	b.n	d4e14 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d4f38:	f1b8 0f04 	cmp.w	r8, #4
   d4f3c:	d115      	bne.n	d4f6a <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4f3e:	f813 e001 	ldrb.w	lr, [r3, r1]
   d4f42:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d4f44:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4f46:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   d4f4a:	f10c 0105 	add.w	r1, ip, #5
   d4f4e:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d4f50:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4f52:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d4f56:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   d4f58:	69e3      	ldr	r3, [r4, #28]
   d4f5a:	2250      	movs	r2, #80	; 0x50
   d4f5c:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   d4f5e:	69e3      	ldr	r3, [r4, #28]
   d4f60:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4f62:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   d4f66:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   d4f68:	e7d5      	b.n	d4f16 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   d4f6a:	4419      	add	r1, r3
   d4f6c:	47d0      	blx	sl
   d4f6e:	e7df      	b.n	d4f30 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   d4f70:	2a50      	cmp	r2, #80	; 0x50
   d4f72:	d108      	bne.n	d4f86 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   d4f74:	789a      	ldrb	r2, [r3, #2]
   d4f76:	78d9      	ldrb	r1, [r3, #3]
   d4f78:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   d4f7c:	b289      	uxth	r1, r1
   d4f7e:	4620      	mov	r0, r4
   d4f80:	f7ff fed9 	bl	d4d36 <_ZN4MQTT14publishReleaseEt>
   d4f84:	e746      	b.n	d4e14 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   d4f86:	2a40      	cmp	r2, #64	; 0x40
   d4f88:	d112      	bne.n	d4fb0 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   d4f8a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d4f8c:	2a00      	cmp	r2, #0
   d4f8e:	f43f af41 	beq.w	d4e14 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d4f92:	f1bb 0f04 	cmp.w	fp, #4
   d4f96:	f47f af3d 	bne.w	d4e14 <_ZN4MQTT4loopEv+0x4e>
   d4f9a:	f011 0f06 	tst.w	r1, #6
   d4f9e:	f47f af39 	bne.w	d4e14 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   d4fa2:	7899      	ldrb	r1, [r3, #2]
   d4fa4:	78d8      	ldrb	r0, [r3, #3]
   d4fa6:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   d4faa:	b280      	uxth	r0, r0
   d4fac:	4790      	blx	r2
   d4fae:	e731      	b.n	d4e14 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   d4fb0:	2a60      	cmp	r2, #96	; 0x60
   d4fb2:	d108      	bne.n	d4fc6 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   d4fb4:	789a      	ldrb	r2, [r3, #2]
   d4fb6:	78d9      	ldrb	r1, [r3, #3]
   d4fb8:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   d4fbc:	b289      	uxth	r1, r1
   d4fbe:	4620      	mov	r0, r4
   d4fc0:	f7ff fedd 	bl	d4d7e <_ZN4MQTT15publishCompleteEt>
   d4fc4:	e726      	b.n	d4e14 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   d4fc6:	2a70      	cmp	r2, #112	; 0x70
   d4fc8:	d0df      	beq.n	d4f8a <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   d4fca:	2a90      	cmp	r2, #144	; 0x90
   d4fcc:	f43f af22 	beq.w	d4e14 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   d4fd0:	2ac0      	cmp	r2, #192	; 0xc0
   d4fd2:	d10a      	bne.n	d4fea <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   d4fd4:	22d0      	movs	r2, #208	; 0xd0
   d4fd6:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d4fd8:	69e3      	ldr	r3, [r4, #28]
   d4fda:	2200      	movs	r2, #0
   d4fdc:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d4fde:	69e1      	ldr	r1, [r4, #28]
   d4fe0:	2202      	movs	r2, #2
   d4fe2:	4620      	mov	r0, r4
   d4fe4:	f000 fe9d 	bl	d5d22 <_ZN9TCPClient5writeEPKhj>
   d4fe8:	e714      	b.n	d4e14 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   d4fea:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   d4fec:	bf04      	itt	eq
   d4fee:	2300      	moveq	r3, #0
   d4ff0:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   d4ff4:	e70e      	b.n	d4e14 <_ZN4MQTT4loopEv+0x4e>

000d4ff6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d4ff6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4ff8:	4604      	mov	r4, r0
   d4ffa:	460f      	mov	r7, r1
   d4ffc:	4616      	mov	r6, r2
    if (isConnected()) {
   d4ffe:	f7ff fd0a 	bl	d4a16 <_ZN4MQTT11isConnectedEv>
   d5002:	4605      	mov	r5, r0
   d5004:	b310      	cbz	r0, d504c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   d5006:	4621      	mov	r1, r4
   d5008:	a801      	add	r0, sp, #4
   d500a:	f7ff fbb7 	bl	d477c <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   d500e:	8c23      	ldrh	r3, [r4, #32]
   d5010:	3301      	adds	r3, #1
   d5012:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d5014:	b1eb      	cbz	r3, d5052 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   d5016:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   d5018:	8c23      	ldrh	r3, [r4, #32]
   d501a:	69e2      	ldr	r2, [r4, #28]
   d501c:	121b      	asrs	r3, r3, #8
   d501e:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d5020:	69e3      	ldr	r3, [r4, #28]
   d5022:	8c22      	ldrh	r2, [r4, #32]
   d5024:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d5026:	69e2      	ldr	r2, [r4, #28]
   d5028:	2307      	movs	r3, #7
   d502a:	4639      	mov	r1, r7
   d502c:	4620      	mov	r0, r4
   d502e:	f7ff fcd7 	bl	d49e0 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d5032:	69e3      	ldr	r3, [r4, #28]
   d5034:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d5036:	3804      	subs	r0, #4
   d5038:	b283      	uxth	r3, r0
   d503a:	69e2      	ldr	r2, [r4, #28]
   d503c:	2182      	movs	r1, #130	; 0x82
   d503e:	4620      	mov	r0, r4
   d5040:	f7ff fc73 	bl	d492a <_ZN4MQTT5writeEhPht>
   d5044:	4605      	mov	r5, r0
        MutexLocker lock(this);
   d5046:	a801      	add	r0, sp, #4
   d5048:	f7ff fba3 	bl	d4792 <_ZN4MQTT11MutexLockerD1Ev>
}
   d504c:	4628      	mov	r0, r5
   d504e:	b003      	add	sp, #12
   d5050:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   d5052:	2301      	movs	r3, #1
   d5054:	e7df      	b.n	d5016 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000d5056 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   d5056:	2200      	movs	r2, #0
   d5058:	f7ff bfcd 	b.w	d4ff6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d505c <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
   d505c:	b538      	push	{r3, r4, r5, lr}
   d505e:	4605      	mov	r5, r0
    if (isConnected()) {
   d5060:	f7ff fcd9 	bl	d4a16 <_ZN4MQTT11isConnectedEv>
   d5064:	b110      	cbz	r0, d506c <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d5066:	4628      	mov	r0, r5
   d5068:	f7ff fc9d 	bl	d49a6 <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
   d506c:	69e8      	ldr	r0, [r5, #28]
   d506e:	b108      	cbz	r0, d5074 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d5070:	f7ff f815 	bl	d409e <_ZdaPv>
MQTT::~MQTT() {
   d5074:	f105 0038 	add.w	r0, r5, #56	; 0x38
   d5078:	f000 fd14 	bl	d5aa4 <_ZN6StringD1Ev>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d507c:	69ac      	ldr	r4, [r5, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d507e:	4b0a      	ldr	r3, [pc, #40]	; (d50a8 <_ZN4MQTTD1Ev+0x4c>)
   d5080:	602b      	str	r3, [r5, #0]
   d5082:	b17c      	cbz	r4, d50a4 <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
   d5084:	6863      	ldr	r3, [r4, #4]
   d5086:	3b01      	subs	r3, #1
   d5088:	6063      	str	r3, [r4, #4]
   d508a:	b95b      	cbnz	r3, d50a4 <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
   d508c:	6823      	ldr	r3, [r4, #0]
   d508e:	4620      	mov	r0, r4
   d5090:	689b      	ldr	r3, [r3, #8]
   d5092:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5094:	68a3      	ldr	r3, [r4, #8]
   d5096:	3b01      	subs	r3, #1
   d5098:	60a3      	str	r3, [r4, #8]
   d509a:	b91b      	cbnz	r3, d50a4 <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
   d509c:	6823      	ldr	r3, [r4, #0]
   d509e:	4620      	mov	r0, r4
   d50a0:	68db      	ldr	r3, [r3, #12]
   d50a2:	4798      	blx	r3
}
   d50a4:	4628      	mov	r0, r5
   d50a6:	bd38      	pop	{r3, r4, r5, pc}
   d50a8:	000d6d74 	.word	0x000d6d74

000d50ac <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <os_mutex_create+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	00030248 	.word	0x00030248

000d50bc <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <os_mutex_lock+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	00030248 	.word	0x00030248

000d50cc <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <os_mutex_unlock+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	00030248 	.word	0x00030248

000d50dc <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <os_mutex_recursive_create+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	00030248 	.word	0x00030248

000d50ec <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <os_mutex_recursive_destroy+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	00030248 	.word	0x00030248

000d50fc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <HAL_RNG_GetRandomNumber+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	685b      	ldr	r3, [r3, #4]
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	00030218 	.word	0x00030218

000d510c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	695b      	ldr	r3, [r3, #20]
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	00030218 	.word	0x00030218

000d511c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <HAL_Pin_Mode+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	689b      	ldr	r3, [r3, #8]
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	0003022c 	.word	0x0003022c

000d512c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <HAL_Get_Pin_Mode+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	68db      	ldr	r3, [r3, #12]
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	0003022c 	.word	0x0003022c

000d513c <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d513c:	b508      	push	{r3, lr}
   d513e:	4b02      	ldr	r3, [pc, #8]	; (d5148 <HAL_GPIO_Read+0xc>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	695b      	ldr	r3, [r3, #20]
   d5144:	9301      	str	r3, [sp, #4]
   d5146:	bd08      	pop	{r3, pc}
   d5148:	0003022c 	.word	0x0003022c

000d514c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <HAL_Interrupts_Attach+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	699b      	ldr	r3, [r3, #24]
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	0003022c 	.word	0x0003022c

000d515c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <HAL_Interrupts_Detach+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	69db      	ldr	r3, [r3, #28]
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	0003022c 	.word	0x0003022c

000d516c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <HAL_Interrupts_Enable_All+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	6a1b      	ldr	r3, [r3, #32]
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	0003022c 	.word	0x0003022c

000d517c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <HAL_Interrupts_Disable_All+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	0003022c 	.word	0x0003022c

000d518c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <hal_i2c_write+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	6a1b      	ldr	r3, [r3, #32]
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	00030228 	.word	0x00030228

000d519c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <hal_i2c_available+0xc>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	00030228 	.word	0x00030228

000d51ac <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <hal_i2c_read+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	00030228 	.word	0x00030228

000d51bc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <hal_i2c_peek+0xc>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d51c4:	9301      	str	r3, [sp, #4]
   d51c6:	bd08      	pop	{r3, pc}
   d51c8:	00030228 	.word	0x00030228

000d51cc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d51cc:	b508      	push	{r3, lr}
   d51ce:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <hal_i2c_flush+0xc>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51d4:	9301      	str	r3, [sp, #4]
   d51d6:	bd08      	pop	{r3, pc}
   d51d8:	00030228 	.word	0x00030228

000d51dc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <hal_i2c_is_enabled+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	00030228 	.word	0x00030228

000d51ec <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <hal_i2c_init+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	00030228 	.word	0x00030228

000d51fc <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <if_index_to_name+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	695b      	ldr	r3, [r3, #20]
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	0003026c 	.word	0x0003026c

000d520c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <inet_inet_ntop+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	695b      	ldr	r3, [r3, #20]
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	00030264 	.word	0x00030264

000d521c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <inet_htonl+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	6a1b      	ldr	r3, [r3, #32]
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	00030264 	.word	0x00030264

000d522c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <inet_htons+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	00030264 	.word	0x00030264

000d523c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <netdb_freeaddrinfo+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	689b      	ldr	r3, [r3, #8]
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	00030268 	.word	0x00030268

000d524c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d524c:	b508      	push	{r3, lr}
   d524e:	4b02      	ldr	r3, [pc, #8]	; (d5258 <netdb_getaddrinfo+0xc>)
   d5250:	681b      	ldr	r3, [r3, #0]
   d5252:	68db      	ldr	r3, [r3, #12]
   d5254:	9301      	str	r3, [sp, #4]
   d5256:	bd08      	pop	{r3, pc}
   d5258:	00030268 	.word	0x00030268

000d525c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d525c:	b508      	push	{r3, lr}
   d525e:	4b02      	ldr	r3, [pc, #8]	; (d5268 <sock_setsockopt+0xc>)
   d5260:	681b      	ldr	r3, [r3, #0]
   d5262:	699b      	ldr	r3, [r3, #24]
   d5264:	9301      	str	r3, [sp, #4]
   d5266:	bd08      	pop	{r3, pc}
   d5268:	00030238 	.word	0x00030238

000d526c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b02      	ldr	r3, [pc, #8]	; (d5278 <sock_close+0xc>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	69db      	ldr	r3, [r3, #28]
   d5274:	9301      	str	r3, [sp, #4]
   d5276:	bd08      	pop	{r3, pc}
   d5278:	00030238 	.word	0x00030238

000d527c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d527c:	b508      	push	{r3, lr}
   d527e:	4b02      	ldr	r3, [pc, #8]	; (d5288 <sock_connect+0xc>)
   d5280:	681b      	ldr	r3, [r3, #0]
   d5282:	6a1b      	ldr	r3, [r3, #32]
   d5284:	9301      	str	r3, [sp, #4]
   d5286:	bd08      	pop	{r3, pc}
   d5288:	00030238 	.word	0x00030238

000d528c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <sock_recv+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	00030238 	.word	0x00030238

000d529c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <sock_send+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	00030238 	.word	0x00030238

000d52ac <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <sock_socket+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	00030238 	.word	0x00030238

000d52bc <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <hal_spi_init+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	69db      	ldr	r3, [r3, #28]
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	00030230 	.word	0x00030230

000d52cc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <hal_spi_is_enabled+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	6a1b      	ldr	r3, [r3, #32]
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	00030230 	.word	0x00030230

000d52dc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <hal_usart_init+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	681b      	ldr	r3, [r3, #0]
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	0003023c 	.word	0x0003023c

000d52ec <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <hal_usart_write+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	68db      	ldr	r3, [r3, #12]
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	0003023c 	.word	0x0003023c

000d52fc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <hal_usart_available+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	691b      	ldr	r3, [r3, #16]
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	0003023c 	.word	0x0003023c

000d530c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <hal_usart_read+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	695b      	ldr	r3, [r3, #20]
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	0003023c 	.word	0x0003023c

000d531c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <hal_usart_peek+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	699b      	ldr	r3, [r3, #24]
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	0003023c 	.word	0x0003023c

000d532c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <hal_usart_flush+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	69db      	ldr	r3, [r3, #28]
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	0003023c 	.word	0x0003023c

000d533c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <hal_usart_is_enabled+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	6a1b      	ldr	r3, [r3, #32]
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	0003023c 	.word	0x0003023c

000d534c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <hal_usart_available_data_for_write+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	0003023c 	.word	0x0003023c

000d535c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <HAL_USB_USART_Init+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	681b      	ldr	r3, [r3, #0]
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	0003024c 	.word	0x0003024c

000d536c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <HAL_USB_USART_Begin+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	685b      	ldr	r3, [r3, #4]
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	0003024c 	.word	0x0003024c

000d537c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <HAL_USB_USART_Available_Data+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	691b      	ldr	r3, [r3, #16]
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	0003024c 	.word	0x0003024c

000d538c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	695b      	ldr	r3, [r3, #20]
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	0003024c 	.word	0x0003024c

000d539c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <HAL_USB_USART_Receive_Data+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	699b      	ldr	r3, [r3, #24]
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	0003024c 	.word	0x0003024c

000d53ac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <HAL_USB_USART_Send_Data+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	69db      	ldr	r3, [r3, #28]
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	0003024c 	.word	0x0003024c

000d53bc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <HAL_USB_USART_Flush_Data+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	6a1b      	ldr	r3, [r3, #32]
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	0003024c 	.word	0x0003024c

000d53cc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <log_message+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	00030260 	.word	0x00030260

000d53dc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <set_system_mode+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	685b      	ldr	r3, [r3, #4]
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	00030220 	.word	0x00030220

000d53ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <system_delay_ms+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	695b      	ldr	r3, [r3, #20]
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	00030220 	.word	0x00030220

000d53fc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <system_thread_set_state+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	00030220 	.word	0x00030220

000d540c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b03      	ldr	r3, [pc, #12]	; (d541c <system_ctrl_set_app_request_handler+0x10>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5416:	9301      	str	r3, [sp, #4]
   d5418:	bd08      	pop	{r3, pc}
   d541a:	0000      	.short	0x0000
   d541c:	00030220 	.word	0x00030220

000d5420 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5420:	b508      	push	{r3, lr}
   d5422:	4b03      	ldr	r3, [pc, #12]	; (d5430 <system_ctrl_set_result+0x10>)
   d5424:	681b      	ldr	r3, [r3, #0]
   d5426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d542a:	9301      	str	r3, [sp, #4]
   d542c:	bd08      	pop	{r3, pc}
   d542e:	0000      	.short	0x0000
   d5430:	00030220 	.word	0x00030220

000d5434 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5434:	b508      	push	{r3, lr}
   d5436:	4b02      	ldr	r3, [pc, #8]	; (d5440 <spark_deviceID+0xc>)
   d5438:	681b      	ldr	r3, [r3, #0]
   d543a:	69db      	ldr	r3, [r3, #28]
   d543c:	9301      	str	r3, [sp, #4]
   d543e:	bd08      	pop	{r3, pc}
   d5440:	00030244 	.word	0x00030244

000d5444 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5444:	b508      	push	{r3, lr}
   d5446:	4b02      	ldr	r3, [pc, #8]	; (d5450 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5448:	681b      	ldr	r3, [r3, #0]
   d544a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d544c:	9301      	str	r3, [sp, #4]
   d544e:	bd08      	pop	{r3, pc}
   d5450:	00030244 	.word	0x00030244

000d5454 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5454:	b508      	push	{r3, lr}
   d5456:	4b02      	ldr	r3, [pc, #8]	; (d5460 <network_connect+0xc>)
   d5458:	681b      	ldr	r3, [r3, #0]
   d545a:	685b      	ldr	r3, [r3, #4]
   d545c:	9301      	str	r3, [sp, #4]
   d545e:	bd08      	pop	{r3, pc}
   d5460:	00030240 	.word	0x00030240

000d5464 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5464:	b508      	push	{r3, lr}
   d5466:	4b02      	ldr	r3, [pc, #8]	; (d5470 <network_connecting+0xc>)
   d5468:	681b      	ldr	r3, [r3, #0]
   d546a:	689b      	ldr	r3, [r3, #8]
   d546c:	9301      	str	r3, [sp, #4]
   d546e:	bd08      	pop	{r3, pc}
   d5470:	00030240 	.word	0x00030240

000d5474 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5474:	b508      	push	{r3, lr}
   d5476:	4b02      	ldr	r3, [pc, #8]	; (d5480 <network_disconnect+0xc>)
   d5478:	681b      	ldr	r3, [r3, #0]
   d547a:	68db      	ldr	r3, [r3, #12]
   d547c:	9301      	str	r3, [sp, #4]
   d547e:	bd08      	pop	{r3, pc}
   d5480:	00030240 	.word	0x00030240

000d5484 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b02      	ldr	r3, [pc, #8]	; (d5490 <network_ready+0xc>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	691b      	ldr	r3, [r3, #16]
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	00030240 	.word	0x00030240

000d5494 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <network_on+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	695b      	ldr	r3, [r3, #20]
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	00030240 	.word	0x00030240

000d54a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d54a4:	b508      	push	{r3, lr}
   d54a6:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <network_off+0xc>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	699b      	ldr	r3, [r3, #24]
   d54ac:	9301      	str	r3, [sp, #4]
   d54ae:	bd08      	pop	{r3, pc}
   d54b0:	00030240 	.word	0x00030240

000d54b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d54b4:	b508      	push	{r3, lr}
   d54b6:	4b02      	ldr	r3, [pc, #8]	; (d54c0 <network_listen+0xc>)
   d54b8:	681b      	ldr	r3, [r3, #0]
   d54ba:	69db      	ldr	r3, [r3, #28]
   d54bc:	9301      	str	r3, [sp, #4]
   d54be:	bd08      	pop	{r3, pc}
   d54c0:	00030240 	.word	0x00030240

000d54c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d54c4:	b508      	push	{r3, lr}
   d54c6:	4b02      	ldr	r3, [pc, #8]	; (d54d0 <network_listening+0xc>)
   d54c8:	681b      	ldr	r3, [r3, #0]
   d54ca:	6a1b      	ldr	r3, [r3, #32]
   d54cc:	9301      	str	r3, [sp, #4]
   d54ce:	bd08      	pop	{r3, pc}
   d54d0:	00030240 	.word	0x00030240

000d54d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d54d4:	b508      	push	{r3, lr}
   d54d6:	4b02      	ldr	r3, [pc, #8]	; (d54e0 <network_set_listen_timeout+0xc>)
   d54d8:	681b      	ldr	r3, [r3, #0]
   d54da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54dc:	9301      	str	r3, [sp, #4]
   d54de:	bd08      	pop	{r3, pc}
   d54e0:	00030240 	.word	0x00030240

000d54e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d54e4:	b508      	push	{r3, lr}
   d54e6:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <network_get_listen_timeout+0xc>)
   d54e8:	681b      	ldr	r3, [r3, #0]
   d54ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d54ec:	9301      	str	r3, [sp, #4]
   d54ee:	bd08      	pop	{r3, pc}
   d54f0:	00030240 	.word	0x00030240

000d54f4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d54f4:	b508      	push	{r3, lr}
   d54f6:	4b02      	ldr	r3, [pc, #8]	; (d5500 <network_is_on+0xc>)
   d54f8:	681b      	ldr	r3, [r3, #0]
   d54fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d54fc:	9301      	str	r3, [sp, #4]
   d54fe:	bd08      	pop	{r3, pc}
   d5500:	00030240 	.word	0x00030240

000d5504 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5504:	b508      	push	{r3, lr}
   d5506:	4b02      	ldr	r3, [pc, #8]	; (d5510 <network_is_off+0xc>)
   d5508:	681b      	ldr	r3, [r3, #0]
   d550a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d550c:	9301      	str	r3, [sp, #4]
   d550e:	bd08      	pop	{r3, pc}
   d5510:	00030240 	.word	0x00030240

000d5514 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <malloc+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	681b      	ldr	r3, [r3, #0]
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	0003021c 	.word	0x0003021c

000d5524 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <free+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	685b      	ldr	r3, [r3, #4]
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	0003021c 	.word	0x0003021c

000d5534 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b02      	ldr	r3, [pc, #8]	; (d5540 <realloc+0xc>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	689b      	ldr	r3, [r3, #8]
   d553c:	9301      	str	r3, [sp, #4]
   d553e:	bd08      	pop	{r3, pc}
   d5540:	0003021c 	.word	0x0003021c

000d5544 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5544:	b508      	push	{r3, lr}
   d5546:	4b02      	ldr	r3, [pc, #8]	; (d5550 <__errno+0xc>)
   d5548:	681b      	ldr	r3, [r3, #0]
   d554a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d554c:	9301      	str	r3, [sp, #4]
   d554e:	bd08      	pop	{r3, pc}
   d5550:	0003021c 	.word	0x0003021c

000d5554 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5554:	b508      	push	{r3, lr}
   d5556:	4b02      	ldr	r3, [pc, #8]	; (d5560 <newlib_impure_ptr_callback+0xc>)
   d5558:	681b      	ldr	r3, [r3, #0]
   d555a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d555c:	9301      	str	r3, [sp, #4]
   d555e:	bd08      	pop	{r3, pc}
   d5560:	0003021c 	.word	0x0003021c

000d5564 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5564:	2100      	movs	r1, #0
   d5566:	f7ff bf41 	b.w	d53ec <system_delay_ms>

000d556a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d556a:	b510      	push	{r4, lr}
   d556c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d556e:	6800      	ldr	r0, [r0, #0]
   d5570:	b108      	cbz	r0, d5576 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5572:	f7ff fdbb 	bl	d50ec <os_mutex_recursive_destroy>
    }
   d5576:	4620      	mov	r0, r4
   d5578:	bd10      	pop	{r4, pc}

000d557a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d557a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d557c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d557e:	4604      	mov	r4, r0
      if (_M_manager)
   d5580:	b113      	cbz	r3, d5588 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5582:	2203      	movs	r2, #3
   d5584:	4601      	mov	r1, r0
   d5586:	4798      	blx	r3
    }
   d5588:	4620      	mov	r0, r4
   d558a:	bd10      	pop	{r4, pc}

000d558c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d558c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d558e:	4c06      	ldr	r4, [pc, #24]	; (d55a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5590:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5592:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5594:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5596:	f7ff fda1 	bl	d50dc <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d559a:	4620      	mov	r0, r4
   d559c:	4a03      	ldr	r2, [pc, #12]	; (d55ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d559e:	4904      	ldr	r1, [pc, #16]	; (d55b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d55a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d55a4:	f001 b922 	b.w	d67ec <__aeabi_atexit>
   d55a8:	2003e650 	.word	0x2003e650
   d55ac:	2003e4a0 	.word	0x2003e4a0
   d55b0:	000d556b 	.word	0x000d556b

000d55b4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d55b4:	2200      	movs	r2, #0
   d55b6:	6840      	ldr	r0, [r0, #4]
   d55b8:	4611      	mov	r1, r2
   d55ba:	f7ff bf83 	b.w	d54c4 <network_listening>

000d55be <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d55be:	2200      	movs	r2, #0
   d55c0:	6840      	ldr	r0, [r0, #4]
   d55c2:	4611      	mov	r1, r2
   d55c4:	f7ff bf8e 	b.w	d54e4 <network_get_listen_timeout>

000d55c8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d55c8:	6840      	ldr	r0, [r0, #4]
   d55ca:	2200      	movs	r2, #0
   d55cc:	f7ff bf82 	b.w	d54d4 <network_set_listen_timeout>

000d55d0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d55d0:	6840      	ldr	r0, [r0, #4]
   d55d2:	2200      	movs	r2, #0
   d55d4:	f081 0101 	eor.w	r1, r1, #1
   d55d8:	f7ff bf6c 	b.w	d54b4 <network_listen>

000d55dc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d55dc:	2300      	movs	r3, #0
   d55de:	6840      	ldr	r0, [r0, #4]
   d55e0:	461a      	mov	r2, r3
   d55e2:	4619      	mov	r1, r3
   d55e4:	f7ff bf5e 	b.w	d54a4 <network_off>

000d55e8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d55e8:	2300      	movs	r3, #0
   d55ea:	6840      	ldr	r0, [r0, #4]
   d55ec:	461a      	mov	r2, r3
   d55ee:	4619      	mov	r1, r3
   d55f0:	f7ff bf50 	b.w	d5494 <network_on>

000d55f4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d55f4:	2200      	movs	r2, #0
   d55f6:	6840      	ldr	r0, [r0, #4]
   d55f8:	4611      	mov	r1, r2
   d55fa:	f7ff bf43 	b.w	d5484 <network_ready>

000d55fe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d55fe:	2200      	movs	r2, #0
   d5600:	6840      	ldr	r0, [r0, #4]
   d5602:	4611      	mov	r1, r2
   d5604:	f7ff bf2e 	b.w	d5464 <network_connecting>

000d5608 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5608:	6840      	ldr	r0, [r0, #4]
   d560a:	2200      	movs	r2, #0
   d560c:	2102      	movs	r1, #2
   d560e:	f7ff bf31 	b.w	d5474 <network_disconnect>

000d5612 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5612:	2300      	movs	r3, #0
   d5614:	6840      	ldr	r0, [r0, #4]
   d5616:	461a      	mov	r2, r3
   d5618:	f7ff bf1c 	b.w	d5454 <network_connect>

000d561c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d561c:	4b02      	ldr	r3, [pc, #8]	; (d5628 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d561e:	2203      	movs	r2, #3
   d5620:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5622:	4a02      	ldr	r2, [pc, #8]	; (d562c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5624:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5626:	4770      	bx	lr
   d5628:	2003e654 	.word	0x2003e654
   d562c:	000d6c88 	.word	0x000d6c88

000d5630 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5630:	4770      	bx	lr

000d5632 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5634:	4606      	mov	r6, r0
   d5636:	4615      	mov	r5, r2
   d5638:	460c      	mov	r4, r1
   d563a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d563c:	42bc      	cmp	r4, r7
   d563e:	d006      	beq.n	d564e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5640:	6833      	ldr	r3, [r6, #0]
   d5642:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5646:	689b      	ldr	r3, [r3, #8]
   d5648:	4630      	mov	r0, r6
   d564a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d564c:	e7f6      	b.n	d563c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d564e:	4628      	mov	r0, r5
   d5650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5652 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5652:	7c00      	ldrb	r0, [r0, #16]
   d5654:	2200      	movs	r2, #0
   d5656:	f7ff bd99 	b.w	d518c <hal_i2c_write>

000d565a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d565a:	7c00      	ldrb	r0, [r0, #16]
   d565c:	2100      	movs	r1, #0
   d565e:	f7ff bd9d 	b.w	d519c <hal_i2c_available>

000d5662 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5662:	7c00      	ldrb	r0, [r0, #16]
   d5664:	2100      	movs	r1, #0
   d5666:	f7ff bda1 	b.w	d51ac <hal_i2c_read>

000d566a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d566a:	7c00      	ldrb	r0, [r0, #16]
   d566c:	2100      	movs	r1, #0
   d566e:	f7ff bda5 	b.w	d51bc <hal_i2c_peek>

000d5672 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5672:	7c00      	ldrb	r0, [r0, #16]
   d5674:	2100      	movs	r1, #0
   d5676:	f7ff bda9 	b.w	d51cc <hal_i2c_flush>

000d567a <_ZN7TwoWireD0Ev>:
   d567a:	b510      	push	{r4, lr}
   d567c:	2114      	movs	r1, #20
   d567e:	4604      	mov	r4, r0
   d5680:	f001 f8b9 	bl	d67f6 <_ZdlPvj>
   d5684:	4620      	mov	r0, r4
   d5686:	bd10      	pop	{r4, pc}

000d5688 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5688:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d568a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d568e:	4604      	mov	r4, r0
   d5690:	4608      	mov	r0, r1
   d5692:	2100      	movs	r1, #0
   d5694:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5698:	4b03      	ldr	r3, [pc, #12]	; (d56a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d569a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d569c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d569e:	4611      	mov	r1, r2
   d56a0:	f7ff fda4 	bl	d51ec <hal_i2c_init>
}
   d56a4:	4620      	mov	r0, r4
   d56a6:	bd10      	pop	{r4, pc}
   d56a8:	000d6cc4 	.word	0x000d6cc4

000d56ac <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d56ac:	4700      	bx	r0
	...

000d56b0 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d56b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d56b4:	2400      	movs	r4, #0
{
   d56b6:	461d      	mov	r5, r3
   d56b8:	460f      	mov	r7, r1
   d56ba:	4690      	mov	r8, r2
   d56bc:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d56be:	f7ff fd4d 	bl	d515c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d56c2:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d56c4:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d56c8:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d56cc:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d56d0:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d56d4:	bfa2      	ittt	ge
   d56d6:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d56da:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d56de:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d56e0:	4907      	ldr	r1, [pc, #28]	; (d5700 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d56e2:	9400      	str	r4, [sp, #0]
   d56e4:	4643      	mov	r3, r8
   d56e6:	463a      	mov	r2, r7
   d56e8:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d56ea:	bfa8      	it	ge
   d56ec:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d56f0:	f7ff fd2c 	bl	d514c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d56f4:	fab0 f080 	clz	r0, r0
   d56f8:	0940      	lsrs	r0, r0, #5
   d56fa:	b004      	add	sp, #16
   d56fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5700:	000d56ad 	.word	0x000d56ad

000d5704 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d5704:	f7ff bd3a 	b.w	d517c <HAL_Interrupts_Disable_All>

000d5708 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5708:	f7ff bd30 	b.w	d516c <HAL_Interrupts_Enable_All>

000d570c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d570c:	4770      	bx	lr

000d570e <_ZN9IPAddressD0Ev>:
   d570e:	b510      	push	{r4, lr}
   d5710:	2118      	movs	r1, #24
   d5712:	4604      	mov	r4, r0
   d5714:	f001 f86f 	bl	d67f6 <_ZdlPvj>
   d5718:	4620      	mov	r0, r4
   d571a:	bd10      	pop	{r4, pc}

000d571c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d571c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d571e:	7d03      	ldrb	r3, [r0, #20]
   d5720:	2b06      	cmp	r3, #6
{
   d5722:	b08d      	sub	sp, #52	; 0x34
   d5724:	460e      	mov	r6, r1
   d5726:	f100 0704 	add.w	r7, r0, #4
   d572a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d572e:	d012      	beq.n	d5756 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5730:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5734:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5738:	220a      	movs	r2, #10
   d573a:	4630      	mov	r0, r6
   d573c:	f000 f975 	bl	d5a2a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5740:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5742:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5744:	d019      	beq.n	d577a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5746:	2c00      	cmp	r4, #0
   d5748:	d0f4      	beq.n	d5734 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d574a:	212e      	movs	r1, #46	; 0x2e
   d574c:	4630      	mov	r0, r6
   d574e:	f000 f953 	bl	d59f8 <_ZN5Print5printEc>
   d5752:	4404      	add	r4, r0
   d5754:	e7ee      	b.n	d5734 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5756:	232f      	movs	r3, #47	; 0x2f
   d5758:	466a      	mov	r2, sp
   d575a:	4639      	mov	r1, r7
   d575c:	200a      	movs	r0, #10
		buf[0] = 0;
   d575e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5762:	f7ff fd53 	bl	d520c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5766:	4668      	mov	r0, sp
   d5768:	f001 f9b6 	bl	d6ad8 <strlen>
   d576c:	6833      	ldr	r3, [r6, #0]
   d576e:	4602      	mov	r2, r0
   d5770:	68db      	ldr	r3, [r3, #12]
   d5772:	4669      	mov	r1, sp
   d5774:	4630      	mov	r0, r6
   d5776:	4798      	blx	r3
   d5778:	4604      	mov	r4, r0
    }
    return n;
}
   d577a:	4620      	mov	r0, r4
   d577c:	b00d      	add	sp, #52	; 0x34
   d577e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5780 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5780:	b510      	push	{r4, lr}
   d5782:	4b05      	ldr	r3, [pc, #20]	; (d5798 <_ZN9IPAddressC1Ev+0x18>)
   d5784:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5786:	2211      	movs	r2, #17
   d5788:	f840 3b04 	str.w	r3, [r0], #4
   d578c:	2100      	movs	r1, #0
   d578e:	f001 f965 	bl	d6a5c <memset>
}
   d5792:	4620      	mov	r0, r4
   d5794:	bd10      	pop	{r4, pc}
   d5796:	bf00      	nop
   d5798:	000d6cec 	.word	0x000d6cec

000d579c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d579c:	4603      	mov	r3, r0
   d579e:	4a07      	ldr	r2, [pc, #28]	; (d57bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d57a0:	b510      	push	{r4, lr}
   d57a2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d57a6:	f101 0210 	add.w	r2, r1, #16
   d57aa:	f851 4b04 	ldr.w	r4, [r1], #4
   d57ae:	f843 4b04 	str.w	r4, [r3], #4
   d57b2:	4291      	cmp	r1, r2
   d57b4:	d1f9      	bne.n	d57aa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d57b6:	780a      	ldrb	r2, [r1, #0]
   d57b8:	701a      	strb	r2, [r3, #0]
}
   d57ba:	bd10      	pop	{r4, pc}
   d57bc:	000d6cec 	.word	0x000d6cec

000d57c0 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d57c0:	7d03      	ldrb	r3, [r0, #20]
   d57c2:	2b04      	cmp	r3, #4
   d57c4:	d104      	bne.n	d57d0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d57c6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d57c8:	3800      	subs	r0, #0
   d57ca:	bf18      	it	ne
   d57cc:	2001      	movne	r0, #1
   d57ce:	4770      	bx	lr
    } else if (version() == 6) {
   d57d0:	2b06      	cmp	r3, #6
   d57d2:	d107      	bne.n	d57e4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d57d4:	6843      	ldr	r3, [r0, #4]
   d57d6:	b93b      	cbnz	r3, d57e8 <_ZNK9IPAddresscvbEv+0x28>
   d57d8:	6883      	ldr	r3, [r0, #8]
   d57da:	b92b      	cbnz	r3, d57e8 <_ZNK9IPAddresscvbEv+0x28>
   d57dc:	68c3      	ldr	r3, [r0, #12]
   d57de:	b91b      	cbnz	r3, d57e8 <_ZNK9IPAddresscvbEv+0x28>
   d57e0:	6900      	ldr	r0, [r0, #16]
   d57e2:	e7f1      	b.n	d57c8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d57e4:	2000      	movs	r0, #0
   d57e6:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d57e8:	2001      	movs	r0, #1
}
   d57ea:	4770      	bx	lr

000d57ec <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d57ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d57ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d57f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d57f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d57fa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d57fe:	2304      	movs	r3, #4
   d5800:	6041      	str	r1, [r0, #4]
   d5802:	7503      	strb	r3, [r0, #20]
}
   d5804:	bd10      	pop	{r4, pc}
	...

000d5808 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5808:	b513      	push	{r0, r1, r4, lr}
   d580a:	4b05      	ldr	r3, [pc, #20]	; (d5820 <_ZN9IPAddressC1EPKh+0x18>)
   d580c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d580e:	78cb      	ldrb	r3, [r1, #3]
   d5810:	9300      	str	r3, [sp, #0]
   d5812:	788b      	ldrb	r3, [r1, #2]
   d5814:	784a      	ldrb	r2, [r1, #1]
   d5816:	7809      	ldrb	r1, [r1, #0]
   d5818:	f7ff ffe8 	bl	d57ec <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d581c:	b002      	add	sp, #8
   d581e:	bd10      	pop	{r4, pc}
   d5820:	000d6cec 	.word	0x000d6cec

000d5824 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5824:	4b01      	ldr	r3, [pc, #4]	; (d582c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5826:	4a02      	ldr	r2, [pc, #8]	; (d5830 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5828:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d582a:	4770      	bx	lr
   d582c:	2003e65c 	.word	0x2003e65c
   d5830:	000d6cf8 	.word	0x000d6cf8

000d5834 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5834:	2300      	movs	r3, #0
   d5836:	6840      	ldr	r0, [r0, #4]
   d5838:	461a      	mov	r2, r3
   d583a:	f7ff be0b 	b.w	d5454 <network_connect>

000d583e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d583e:	6840      	ldr	r0, [r0, #4]
   d5840:	2200      	movs	r2, #0
   d5842:	2102      	movs	r1, #2
   d5844:	f7ff be16 	b.w	d5474 <network_disconnect>

000d5848 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5848:	2200      	movs	r2, #0
   d584a:	6840      	ldr	r0, [r0, #4]
   d584c:	4611      	mov	r1, r2
   d584e:	f7ff be09 	b.w	d5464 <network_connecting>

000d5852 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5852:	2200      	movs	r2, #0
   d5854:	6840      	ldr	r0, [r0, #4]
   d5856:	4611      	mov	r1, r2
   d5858:	f7ff be14 	b.w	d5484 <network_ready>

000d585c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d585c:	2300      	movs	r3, #0
   d585e:	6840      	ldr	r0, [r0, #4]
   d5860:	461a      	mov	r2, r3
   d5862:	4619      	mov	r1, r3
   d5864:	f7ff be16 	b.w	d5494 <network_on>

000d5868 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5868:	2300      	movs	r3, #0
   d586a:	6840      	ldr	r0, [r0, #4]
   d586c:	461a      	mov	r2, r3
   d586e:	4619      	mov	r1, r3
   d5870:	f7ff be18 	b.w	d54a4 <network_off>

000d5874 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5874:	6840      	ldr	r0, [r0, #4]
   d5876:	2100      	movs	r1, #0
   d5878:	f7ff be3c 	b.w	d54f4 <network_is_on>

000d587c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d587c:	6840      	ldr	r0, [r0, #4]
   d587e:	2100      	movs	r1, #0
   d5880:	f7ff be40 	b.w	d5504 <network_is_off>

000d5884 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5884:	6840      	ldr	r0, [r0, #4]
   d5886:	2200      	movs	r2, #0
   d5888:	f081 0101 	eor.w	r1, r1, #1
   d588c:	f7ff be12 	b.w	d54b4 <network_listen>

000d5890 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5890:	6840      	ldr	r0, [r0, #4]
   d5892:	2200      	movs	r2, #0
   d5894:	f7ff be1e 	b.w	d54d4 <network_set_listen_timeout>

000d5898 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5898:	2200      	movs	r2, #0
   d589a:	6840      	ldr	r0, [r0, #4]
   d589c:	4611      	mov	r1, r2
   d589e:	f7ff be21 	b.w	d54e4 <network_get_listen_timeout>

000d58a2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d58a2:	2200      	movs	r2, #0
   d58a4:	6840      	ldr	r0, [r0, #4]
   d58a6:	4611      	mov	r1, r2
   d58a8:	f7ff be0c 	b.w	d54c4 <network_listening>

000d58ac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d58ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d58b0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d58b2:	b095      	sub	sp, #84	; 0x54
   d58b4:	4616      	mov	r6, r2
   d58b6:	460d      	mov	r5, r1
   d58b8:	4607      	mov	r7, r0
    IPAddress addr;
   d58ba:	f7ff ff61 	bl	d5780 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d58be:	4621      	mov	r1, r4
   d58c0:	2218      	movs	r2, #24
   d58c2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d58c4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d58c6:	f001 f8c9 	bl	d6a5c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d58ca:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d58cc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d58d0:	4621      	mov	r1, r4
   d58d2:	466b      	mov	r3, sp
   d58d4:	aa0c      	add	r2, sp, #48	; 0x30
   d58d6:	4630      	mov	r0, r6
   d58d8:	f7ff fcb8 	bl	d524c <netdb_getaddrinfo>
    if (!r) {
   d58dc:	4604      	mov	r4, r0
   d58de:	2800      	cmp	r0, #0
   d58e0:	d14c      	bne.n	d597c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d58e2:	4602      	mov	r2, r0
   d58e4:	2101      	movs	r1, #1
   d58e6:	6868      	ldr	r0, [r5, #4]
   d58e8:	f7ff fdcc 	bl	d5484 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58ec:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d58ee:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58f0:	4622      	mov	r2, r4
   d58f2:	6868      	ldr	r0, [r5, #4]
   d58f4:	f7ff fdc6 	bl	d5484 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58f8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58fa:	4681      	mov	r9, r0
        bool ok = false;
   d58fc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58fe:	2e00      	cmp	r6, #0
   d5900:	d03c      	beq.n	d597c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d5902:	2900      	cmp	r1, #0
   d5904:	d13a      	bne.n	d597c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5906:	6873      	ldr	r3, [r6, #4]
   d5908:	2b02      	cmp	r3, #2
   d590a:	d003      	beq.n	d5914 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d590c:	2b0a      	cmp	r3, #10
   d590e:	d011      	beq.n	d5934 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5910:	69f6      	ldr	r6, [r6, #28]
   d5912:	e7f4      	b.n	d58fe <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5914:	f1b8 0f00 	cmp.w	r8, #0
   d5918:	d00a      	beq.n	d5930 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d591a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d591c:	a806      	add	r0, sp, #24
   d591e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d5920:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d5922:	f7ff ff71 	bl	d5808 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d5926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5928:	1d3c      	adds	r4, r7, #4
   d592a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d592c:	682b      	ldr	r3, [r5, #0]
   d592e:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d5930:	4641      	mov	r1, r8
   d5932:	e7ed      	b.n	d5910 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5934:	f1b9 0f00 	cmp.w	r9, #0
   d5938:	d101      	bne.n	d593e <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d593a:	4649      	mov	r1, r9
   d593c:	e7e8      	b.n	d5910 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d593e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5940:	2210      	movs	r2, #16
   d5942:	a801      	add	r0, sp, #4
   d5944:	f001 f88a 	bl	d6a5c <memset>
                    a.v = 6;
   d5948:	2306      	movs	r3, #6
   d594a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d594e:	ad01      	add	r5, sp, #4
   d5950:	f104 0308 	add.w	r3, r4, #8
   d5954:	3418      	adds	r4, #24
   d5956:	6818      	ldr	r0, [r3, #0]
   d5958:	6859      	ldr	r1, [r3, #4]
   d595a:	462a      	mov	r2, r5
   d595c:	c203      	stmia	r2!, {r0, r1}
   d595e:	3308      	adds	r3, #8
   d5960:	42a3      	cmp	r3, r4
   d5962:	4615      	mov	r5, r2
   d5964:	d1f7      	bne.n	d5956 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d5966:	a901      	add	r1, sp, #4
   d5968:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d596a:	ad07      	add	r5, sp, #28
   d596c:	f7ff ff16 	bl	d579c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5972:	1d3c      	adds	r4, r7, #4
   d5974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5976:	682b      	ldr	r3, [r5, #0]
   d5978:	7023      	strb	r3, [r4, #0]
   d597a:	e7de      	b.n	d593a <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d597c:	9800      	ldr	r0, [sp, #0]
   d597e:	f7ff fc5d 	bl	d523c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5982:	4638      	mov	r0, r7
   d5984:	b015      	add	sp, #84	; 0x54
   d5986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d598c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d598c:	4b02      	ldr	r3, [pc, #8]	; (d5998 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d598e:	4a03      	ldr	r2, [pc, #12]	; (d599c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5990:	601a      	str	r2, [r3, #0]
   d5992:	2200      	movs	r2, #0
   d5994:	605a      	str	r2, [r3, #4]

} // spark
   d5996:	4770      	bx	lr
   d5998:	2003e660 	.word	0x2003e660
   d599c:	000d6d04 	.word	0x000d6d04

000d59a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d59a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59a2:	4606      	mov	r6, r0
   d59a4:	460d      	mov	r5, r1
  size_t n = 0;
   d59a6:	188f      	adds	r7, r1, r2
   d59a8:	2400      	movs	r4, #0
  while (size--) {
   d59aa:	42bd      	cmp	r5, r7
   d59ac:	d00c      	beq.n	d59c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d59ae:	6833      	ldr	r3, [r6, #0]
   d59b0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d59b4:	689b      	ldr	r3, [r3, #8]
   d59b6:	4630      	mov	r0, r6
   d59b8:	4798      	blx	r3
     if (chunk>=0)
   d59ba:	1e03      	subs	r3, r0, #0
   d59bc:	db01      	blt.n	d59c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d59be:	441c      	add	r4, r3
  while (size--) {
   d59c0:	e7f3      	b.n	d59aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d59c2:	2c00      	cmp	r4, #0
   d59c4:	bf08      	it	eq
   d59c6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d59c8:	4620      	mov	r0, r4
   d59ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59cc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d59cc:	b513      	push	{r0, r1, r4, lr}
   d59ce:	4604      	mov	r4, r0
    }
   d59d0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d59d2:	b159      	cbz	r1, d59ec <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d59d4:	9101      	str	r1, [sp, #4]
   d59d6:	f001 f87f 	bl	d6ad8 <strlen>
   d59da:	6823      	ldr	r3, [r4, #0]
   d59dc:	9901      	ldr	r1, [sp, #4]
   d59de:	68db      	ldr	r3, [r3, #12]
   d59e0:	4602      	mov	r2, r0
   d59e2:	4620      	mov	r0, r4
    }
   d59e4:	b002      	add	sp, #8
   d59e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d59ea:	4718      	bx	r3
    }
   d59ec:	b002      	add	sp, #8
   d59ee:	bd10      	pop	{r4, pc}

000d59f0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d59f0:	b508      	push	{r3, lr}
  return write(str);
   d59f2:	f7ff ffeb 	bl	d59cc <_ZN5Print5writeEPKc>
}
   d59f6:	bd08      	pop	{r3, pc}

000d59f8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d59f8:	6803      	ldr	r3, [r0, #0]
   d59fa:	689b      	ldr	r3, [r3, #8]
   d59fc:	4718      	bx	r3

000d59fe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d59fe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5a00:	210d      	movs	r1, #13
{
   d5a02:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5a04:	f7ff fff8 	bl	d59f8 <_ZN5Print5printEc>
  n += print('\n');
   d5a08:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5a0a:	4604      	mov	r4, r0
  n += print('\n');
   d5a0c:	4628      	mov	r0, r5
   d5a0e:	f7ff fff3 	bl	d59f8 <_ZN5Print5printEc>
  return n;
}
   d5a12:	4420      	add	r0, r4
   d5a14:	bd38      	pop	{r3, r4, r5, pc}

000d5a16 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5a16:	b538      	push	{r3, r4, r5, lr}
   d5a18:	4605      	mov	r5, r0
  return write(str);
   d5a1a:	f7ff ffd7 	bl	d59cc <_ZN5Print5writeEPKc>
   d5a1e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5a20:	4628      	mov	r0, r5
   d5a22:	f7ff ffec 	bl	d59fe <_ZN5Print7printlnEv>
  return n;
}
   d5a26:	4420      	add	r0, r4
   d5a28:	bd38      	pop	{r3, r4, r5, pc}

000d5a2a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5a2a:	b530      	push	{r4, r5, lr}
   d5a2c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5a2e:	2300      	movs	r3, #0
   d5a30:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5a34:	2a01      	cmp	r2, #1
   d5a36:	bf98      	it	ls
   d5a38:	220a      	movls	r2, #10
   d5a3a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5a3c:	460d      	mov	r5, r1
   d5a3e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5a42:	fb01 5312 	mls	r3, r1, r2, r5
   d5a46:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5a4a:	2b09      	cmp	r3, #9
   d5a4c:	bf94      	ite	ls
   d5a4e:	3330      	addls	r3, #48	; 0x30
   d5a50:	3337      	addhi	r3, #55	; 0x37
   d5a52:	b2db      	uxtb	r3, r3
  } while(n);
   d5a54:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5a56:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5a5a:	d9ef      	bls.n	d5a3c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5a5c:	4621      	mov	r1, r4
   d5a5e:	f7ff ffb5 	bl	d59cc <_ZN5Print5writeEPKc>
}
   d5a62:	b00b      	add	sp, #44	; 0x2c
   d5a64:	bd30      	pop	{r4, r5, pc}

000d5a66 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5a66:	b510      	push	{r4, lr}
   d5a68:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a6a:	f7ff fd86 	bl	d557a <_ZNSt14_Function_baseD1Ev>
   d5a6e:	4620      	mov	r0, r4
   d5a70:	bd10      	pop	{r4, pc}
	...

000d5a74 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5a74:	4803      	ldr	r0, [pc, #12]	; (d5a84 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5a76:	4a04      	ldr	r2, [pc, #16]	; (d5a88 <_GLOBAL__sub_I_RGB+0x14>)
   d5a78:	4904      	ldr	r1, [pc, #16]	; (d5a8c <_GLOBAL__sub_I_RGB+0x18>)
   d5a7a:	2300      	movs	r3, #0
   d5a7c:	6083      	str	r3, [r0, #8]
   d5a7e:	f000 beb5 	b.w	d67ec <__aeabi_atexit>
   d5a82:	bf00      	nop
   d5a84:	2003e668 	.word	0x2003e668
   d5a88:	2003e4a0 	.word	0x2003e4a0
   d5a8c:	000d5a67 	.word	0x000d5a67

000d5a90 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5a90:	b510      	push	{r4, lr}
   d5a92:	4604      	mov	r4, r0
   d5a94:	4608      	mov	r0, r1
{
    _spi = spi;
   d5a96:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5a98:	f7ff fc10 	bl	d52bc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5a9c:	2300      	movs	r3, #0
   d5a9e:	6063      	str	r3, [r4, #4]
}
   d5aa0:	4620      	mov	r0, r4
   d5aa2:	bd10      	pop	{r4, pc}

000d5aa4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5aa4:	b510      	push	{r4, lr}
   d5aa6:	4604      	mov	r4, r0
{
	free(buffer);
   d5aa8:	6800      	ldr	r0, [r0, #0]
   d5aaa:	f7ff fd3b 	bl	d5524 <free>
}
   d5aae:	4620      	mov	r0, r4
   d5ab0:	bd10      	pop	{r4, pc}

000d5ab2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5ab2:	b510      	push	{r4, lr}
   d5ab4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5ab6:	6800      	ldr	r0, [r0, #0]
   d5ab8:	b108      	cbz	r0, d5abe <_ZN6String10invalidateEv+0xc>
   d5aba:	f7ff fd33 	bl	d5524 <free>
	buffer = NULL;
   d5abe:	2300      	movs	r3, #0
	capacity = len = 0;
   d5ac0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5ac4:	6023      	str	r3, [r4, #0]
}
   d5ac6:	bd10      	pop	{r4, pc}

000d5ac8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5ac8:	b538      	push	{r3, r4, r5, lr}
   d5aca:	4604      	mov	r4, r0
   d5acc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5ace:	6800      	ldr	r0, [r0, #0]
   d5ad0:	3101      	adds	r1, #1
   d5ad2:	f7ff fd2f 	bl	d5534 <realloc>
	if (newbuffer) {
   d5ad6:	b110      	cbz	r0, d5ade <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5ad8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5adc:	2001      	movs	r0, #1
	}
	return 0;
}
   d5ade:	bd38      	pop	{r3, r4, r5, pc}

000d5ae0 <_ZN6String7reserveEj>:
{
   d5ae0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5ae2:	6803      	ldr	r3, [r0, #0]
{
   d5ae4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5ae6:	b123      	cbz	r3, d5af2 <_ZN6String7reserveEj+0x12>
   d5ae8:	6843      	ldr	r3, [r0, #4]
   d5aea:	428b      	cmp	r3, r1
   d5aec:	d301      	bcc.n	d5af2 <_ZN6String7reserveEj+0x12>
   d5aee:	2001      	movs	r0, #1
}
   d5af0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5af2:	4620      	mov	r0, r4
   d5af4:	f7ff ffe8 	bl	d5ac8 <_ZN6String12changeBufferEj>
   d5af8:	2800      	cmp	r0, #0
   d5afa:	d0f9      	beq.n	d5af0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5afc:	68a3      	ldr	r3, [r4, #8]
   d5afe:	2b00      	cmp	r3, #0
   d5b00:	d1f5      	bne.n	d5aee <_ZN6String7reserveEj+0xe>
   d5b02:	6822      	ldr	r2, [r4, #0]
   d5b04:	7013      	strb	r3, [r2, #0]
   d5b06:	e7f2      	b.n	d5aee <_ZN6String7reserveEj+0xe>

000d5b08 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5b0a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5b0c:	4611      	mov	r1, r2
   d5b0e:	9201      	str	r2, [sp, #4]
{
   d5b10:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5b12:	f7ff ffe5 	bl	d5ae0 <_ZN6String7reserveEj>
   d5b16:	9a01      	ldr	r2, [sp, #4]
   d5b18:	b928      	cbnz	r0, d5b26 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5b1a:	4620      	mov	r0, r4
   d5b1c:	f7ff ffc9 	bl	d5ab2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5b20:	4620      	mov	r0, r4
   d5b22:	b003      	add	sp, #12
   d5b24:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5b26:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5b28:	4629      	mov	r1, r5
   d5b2a:	6820      	ldr	r0, [r4, #0]
   d5b2c:	f000 ff88 	bl	d6a40 <memcpy>
	buffer[len] = 0;
   d5b30:	6822      	ldr	r2, [r4, #0]
   d5b32:	68a3      	ldr	r3, [r4, #8]
   d5b34:	2100      	movs	r1, #0
   d5b36:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5b38:	e7f2      	b.n	d5b20 <_ZN6String4copyEPKcj+0x18>

000d5b3a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5b3a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5b3c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5b3e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5b42:	4604      	mov	r4, r0
	len = 0;
   d5b44:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5b46:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5b48:	b141      	cbz	r1, d5b5c <_ZN6StringC1EPKc+0x22>
   d5b4a:	4608      	mov	r0, r1
   d5b4c:	9101      	str	r1, [sp, #4]
   d5b4e:	f000 ffc3 	bl	d6ad8 <strlen>
   d5b52:	9901      	ldr	r1, [sp, #4]
   d5b54:	4602      	mov	r2, r0
   d5b56:	4620      	mov	r0, r4
   d5b58:	f7ff ffd6 	bl	d5b08 <_ZN6String4copyEPKcj>
}
   d5b5c:	4620      	mov	r0, r4
   d5b5e:	b002      	add	sp, #8
   d5b60:	bd10      	pop	{r4, pc}

000d5b62 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5b62:	b538      	push	{r3, r4, r5, lr}
   d5b64:	4605      	mov	r5, r0
	if (buffer) {
   d5b66:	6800      	ldr	r0, [r0, #0]
{
   d5b68:	460c      	mov	r4, r1
	if (buffer) {
   d5b6a:	b168      	cbz	r0, d5b88 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d5b6c:	686a      	ldr	r2, [r5, #4]
   d5b6e:	688b      	ldr	r3, [r1, #8]
   d5b70:	429a      	cmp	r2, r3
   d5b72:	d307      	bcc.n	d5b84 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d5b74:	6809      	ldr	r1, [r1, #0]
   d5b76:	f000 ffa7 	bl	d6ac8 <strcpy>
			len = rhs.len;
   d5b7a:	68a3      	ldr	r3, [r4, #8]
   d5b7c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5b7e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d5b80:	60a3      	str	r3, [r4, #8]
}
   d5b82:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d5b84:	f7ff fcce 	bl	d5524 <free>
	buffer = rhs.buffer;
   d5b88:	6823      	ldr	r3, [r4, #0]
   d5b8a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5b8c:	6863      	ldr	r3, [r4, #4]
   d5b8e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5b90:	68a3      	ldr	r3, [r4, #8]
   d5b92:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5b94:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d5b96:	e9c4 3300 	strd	r3, r3, [r4]
   d5b9a:	e7f1      	b.n	d5b80 <_ZN6String4moveERS_+0x1e>

000d5b9c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5b9c:	4288      	cmp	r0, r1
{
   d5b9e:	b510      	push	{r4, lr}
   d5ba0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5ba2:	d005      	beq.n	d5bb0 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5ba4:	680b      	ldr	r3, [r1, #0]
   d5ba6:	b12b      	cbz	r3, d5bb4 <_ZN6StringaSERKS_+0x18>
   d5ba8:	688a      	ldr	r2, [r1, #8]
   d5baa:	4619      	mov	r1, r3
   d5bac:	f7ff ffac 	bl	d5b08 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5bb0:	4620      	mov	r0, r4
   d5bb2:	bd10      	pop	{r4, pc}
	else invalidate();
   d5bb4:	f7ff ff7d 	bl	d5ab2 <_ZN6String10invalidateEv>
   d5bb8:	e7fa      	b.n	d5bb0 <_ZN6StringaSERKS_+0x14>

000d5bba <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d5bba:	4288      	cmp	r0, r1
{
   d5bbc:	b510      	push	{r4, lr}
   d5bbe:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5bc0:	d001      	beq.n	d5bc6 <_ZN6StringaSEOS_+0xc>
   d5bc2:	f7ff ffce 	bl	d5b62 <_ZN6String4moveERS_>
	return *this;
}
   d5bc6:	4620      	mov	r0, r4
   d5bc8:	bd10      	pop	{r4, pc}

000d5bca <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5bca:	b513      	push	{r0, r1, r4, lr}
   d5bcc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5bce:	b159      	cbz	r1, d5be8 <_ZN6StringaSEPKc+0x1e>
   d5bd0:	4608      	mov	r0, r1
   d5bd2:	9101      	str	r1, [sp, #4]
   d5bd4:	f000 ff80 	bl	d6ad8 <strlen>
   d5bd8:	9901      	ldr	r1, [sp, #4]
   d5bda:	4602      	mov	r2, r0
   d5bdc:	4620      	mov	r0, r4
   d5bde:	f7ff ff93 	bl	d5b08 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5be2:	4620      	mov	r0, r4
   d5be4:	b002      	add	sp, #8
   d5be6:	bd10      	pop	{r4, pc}
	else invalidate();
   d5be8:	f7ff ff63 	bl	d5ab2 <_ZN6String10invalidateEv>
   d5bec:	e7f9      	b.n	d5be2 <_ZN6StringaSEPKc+0x18>

000d5bee <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5bee:	b570      	push	{r4, r5, r6, lr}
   d5bf0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5bf2:	460e      	mov	r6, r1
   d5bf4:	b909      	cbnz	r1, d5bfa <_ZN6String6concatEPKcj+0xc>
   d5bf6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5bf8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5bfa:	b16a      	cbz	r2, d5c18 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d5bfc:	6884      	ldr	r4, [r0, #8]
   d5bfe:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d5c00:	4621      	mov	r1, r4
   d5c02:	f7ff ff6d 	bl	d5ae0 <_ZN6String7reserveEj>
   d5c06:	2800      	cmp	r0, #0
   d5c08:	d0f5      	beq.n	d5bf6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5c0a:	6828      	ldr	r0, [r5, #0]
   d5c0c:	68ab      	ldr	r3, [r5, #8]
   d5c0e:	4631      	mov	r1, r6
   d5c10:	4418      	add	r0, r3
   d5c12:	f000 ff59 	bl	d6ac8 <strcpy>
	len = newlen;
   d5c16:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d5c18:	2001      	movs	r0, #1
   d5c1a:	e7ed      	b.n	d5bf8 <_ZN6String6concatEPKcj+0xa>

000d5c1c <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d5c1c:	688a      	ldr	r2, [r1, #8]
   d5c1e:	6809      	ldr	r1, [r1, #0]
   d5c20:	f7ff bfe5 	b.w	d5bee <_ZN6String6concatEPKcj>

000d5c24 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   d5c24:	b513      	push	{r0, r1, r4, lr}
   d5c26:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   d5c28:	4608      	mov	r0, r1
	if (!cstr) return 0;
   d5c2a:	b151      	cbz	r1, d5c42 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   d5c2c:	9101      	str	r1, [sp, #4]
   d5c2e:	f000 ff53 	bl	d6ad8 <strlen>
   d5c32:	9901      	ldr	r1, [sp, #4]
   d5c34:	4602      	mov	r2, r0
   d5c36:	4620      	mov	r0, r4
}
   d5c38:	b002      	add	sp, #8
   d5c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   d5c3e:	f7ff bfd6 	b.w	d5bee <_ZN6String6concatEPKcj>
}
   d5c42:	b002      	add	sp, #8
   d5c44:	bd10      	pop	{r4, pc}

000d5c46 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5c46:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5c48:	6882      	ldr	r2, [r0, #8]
   d5c4a:	b93a      	cbnz	r2, d5c5c <_ZNK6String6equalsEPKc+0x16>
   d5c4c:	b121      	cbz	r1, d5c58 <_ZNK6String6equalsEPKc+0x12>
   d5c4e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d5c50:	fab0 f080 	clz	r0, r0
   d5c54:	0940      	lsrs	r0, r0, #5
   d5c56:	e000      	b.n	d5c5a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5c58:	2001      	movs	r0, #1
}
   d5c5a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5c5c:	6800      	ldr	r0, [r0, #0]
   d5c5e:	b909      	cbnz	r1, d5c64 <_ZNK6String6equalsEPKc+0x1e>
   d5c60:	7800      	ldrb	r0, [r0, #0]
   d5c62:	e7f5      	b.n	d5c50 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d5c64:	f000 ff26 	bl	d6ab4 <strcmp>
   d5c68:	e7f2      	b.n	d5c50 <_ZNK6String6equalsEPKc+0xa>
	...

000d5c6c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d5c6e:	429a      	cmp	r2, r3
{
   d5c70:	460f      	mov	r7, r1
   d5c72:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5c74:	490c      	ldr	r1, [pc, #48]	; (d5ca8 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d5c76:	bf88      	it	hi
   d5c78:	4613      	movhi	r3, r2
{
   d5c7a:	4614      	mov	r4, r2
   d5c7c:	4606      	mov	r6, r0
	if (left > right) {
   d5c7e:	bf84      	itt	hi
   d5c80:	462c      	movhi	r4, r5
   d5c82:	461d      	movhi	r5, r3
	String out;
   d5c84:	f7ff ff59 	bl	d5b3a <_ZN6StringC1EPKc>
	if (left > len) return out;
   d5c88:	68ba      	ldr	r2, [r7, #8]
   d5c8a:	42a2      	cmp	r2, r4
   d5c8c:	d30a      	bcc.n	d5ca4 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d5c8e:	6839      	ldr	r1, [r7, #0]
   d5c90:	42aa      	cmp	r2, r5
   d5c92:	bf94      	ite	ls
   d5c94:	ebc4 0202 	rsbls	r2, r4, r2
   d5c98:	ebc4 0205 	rsbhi	r2, r4, r5
   d5c9c:	4421      	add	r1, r4
   d5c9e:	4630      	mov	r0, r6
   d5ca0:	f7ff ff32 	bl	d5b08 <_ZN6String4copyEPKcj>
	return out;
}
   d5ca4:	4630      	mov	r0, r6
   d5ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5ca8:	000d6b71 	.word	0x000d6b71

000d5cac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5cac:	b510      	push	{r4, lr}
   d5cae:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5cb0:	6800      	ldr	r0, [r0, #0]
   d5cb2:	b118      	cbz	r0, d5cbc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5cb4:	f7ff fc36 	bl	d5524 <free>
            wakeupSource_ = nullptr;
   d5cb8:	2300      	movs	r3, #0
   d5cba:	6023      	str	r3, [r4, #0]
        }
    }
   d5cbc:	bd10      	pop	{r4, pc}

000d5cbe <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5cbe:	b510      	push	{r4, lr}
   d5cc0:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5cc2:	f7ff fff3 	bl	d5cac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5cc6:	4620      	mov	r0, r4
   d5cc8:	bd10      	pop	{r4, pc}
	...

000d5ccc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5ccc:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5cce:	4b09      	ldr	r3, [pc, #36]	; (d5cf4 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5cd0:	4c09      	ldr	r4, [pc, #36]	; (d5cf8 <_GLOBAL__sub_I_System+0x2c>)
   d5cd2:	2202      	movs	r2, #2
   d5cd4:	2000      	movs	r0, #0
   d5cd6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5cd8:	4b08      	ldr	r3, [pc, #32]	; (d5cfc <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5cda:	6020      	str	r0, [r4, #0]
   d5cdc:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5cde:	71a0      	strb	r0, [r4, #6]
   d5ce0:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5ce2:	f7ff fb7b 	bl	d53dc <set_system_mode>
SystemClass System;
   d5ce6:	4620      	mov	r0, r4
   d5ce8:	4a05      	ldr	r2, [pc, #20]	; (d5d00 <_GLOBAL__sub_I_System+0x34>)
   d5cea:	4906      	ldr	r1, [pc, #24]	; (d5d04 <_GLOBAL__sub_I_System+0x38>)
   d5cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5cf0:	f000 bd7c 	b.w	d67ec <__aeabi_atexit>
   d5cf4:	2003e684 	.word	0x2003e684
   d5cf8:	2003e678 	.word	0x2003e678
   d5cfc:	ffff0000 	.word	0xffff0000
   d5d00:	2003e4a0 	.word	0x2003e4a0
   d5d04:	000d5cbf 	.word	0x000d5cbf

000d5d08 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d5d08:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5d0a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d5d0c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5d10:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5d12:	2201      	movs	r2, #1
   d5d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5d18:	f10d 0107 	add.w	r1, sp, #7
   d5d1c:	47a0      	blx	r4
}
   d5d1e:	b002      	add	sp, #8
   d5d20:	bd10      	pop	{r4, pc}

000d5d22 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d5d22:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5d24:	6803      	ldr	r3, [r0, #0]
   d5d26:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5d2c:	46a4      	mov	ip, r4
}
   d5d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5d32:	4760      	bx	ip

000d5d34 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5d34:	b513      	push	{r0, r1, r4, lr}
   d5d36:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d5d38:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5d3a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d5d3e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d5d40:	f10d 0107 	add.w	r1, sp, #7
   d5d44:	2201      	movs	r2, #1
   d5d46:	47a0      	blx	r4
}
   d5d48:	b002      	add	sp, #8
   d5d4a:	bd10      	pop	{r4, pc}

000d5d4c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d5d4c:	4770      	bx	lr

000d5d4e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5d4e:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5d50:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d5d52:	681a      	ldr	r2, [r3, #0]
   d5d54:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d5d56:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d5d58:	da10      	bge.n	d5d7c <_ZN9TCPClient9connectedEv+0x2e>
   d5d5a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5d5e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5d62:	429a      	cmp	r2, r3
   d5d64:	d10a      	bne.n	d5d7c <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d5d66:	6803      	ldr	r3, [r0, #0]
   d5d68:	691b      	ldr	r3, [r3, #16]
   d5d6a:	4798      	blx	r3
        if (!rv) {
   d5d6c:	4604      	mov	r4, r0
   d5d6e:	b928      	cbnz	r0, d5d7c <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d5d70:	682b      	ldr	r3, [r5, #0]
   d5d72:	4628      	mov	r0, r5
   d5d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5d76:	4798      	blx	r3
        rv = available();
   d5d78:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d5d7a:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d5d7c:	2001      	movs	r0, #1
   d5d7e:	e7fc      	b.n	d5d7a <_ZN9TCPClient9connectedEv+0x2c>

000d5d80 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d5d80:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d5d82:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d5d84:	43c0      	mvns	r0, r0
   d5d86:	0fc0      	lsrs	r0, r0, #31
   d5d88:	4770      	bx	lr

000d5d8a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5d8a:	4770      	bx	lr

000d5d8c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5d8c:	4b06      	ldr	r3, [pc, #24]	; (d5da8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5d8e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5d90:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d5d92:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5d96:	d005      	beq.n	d5da4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5d98:	4608      	mov	r0, r1
   d5d9a:	f000 fd31 	bl	d6800 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5d9e:	2800      	cmp	r0, #0
	return nullptr;
   d5da0:	bf08      	it	eq
   d5da2:	2400      	moveq	r4, #0
      }
   d5da4:	4620      	mov	r0, r4
   d5da6:	bd10      	pop	{r4, pc}
   d5da8:	000d6c78 	.word	0x000d6c78

000d5dac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5dac:	b510      	push	{r4, lr}
   d5dae:	21ac      	movs	r1, #172	; 0xac
   d5db0:	4604      	mov	r4, r0
   d5db2:	f000 fd20 	bl	d67f6 <_ZdlPvj>
   d5db6:	4620      	mov	r0, r4
   d5db8:	bd10      	pop	{r4, pc}

000d5dba <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d5dba:	f7fe b96e 	b.w	d409a <_ZdlPv>

000d5dbe <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d5dc2:	f04f 0800 	mov.w	r8, #0
   d5dc6:	b086      	sub	sp, #24
   d5dc8:	461d      	mov	r5, r3
   d5dca:	f8c0 8004 	str.w	r8, [r0, #4]
   d5dce:	4604      	mov	r4, r0
   d5dd0:	460e      	mov	r6, r1
   d5dd2:	4617      	mov	r7, r2
    struct timeval tv = {};
   d5dd4:	4641      	mov	r1, r8
   d5dd6:	2210      	movs	r2, #16
   d5dd8:	a802      	add	r0, sp, #8
   d5dda:	f000 fe3f 	bl	d6a5c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5dde:	1c6b      	adds	r3, r5, #1
   d5de0:	d009      	beq.n	d5df6 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d5de2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5de6:	fbb5 f3f0 	udiv	r3, r5, r0
   d5dea:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d5dee:	fb00 5313 	mls	r3, r0, r3, r5
   d5df2:	4358      	muls	r0, r3
   d5df4:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d5df6:	6960      	ldr	r0, [r4, #20]
   d5df8:	2310      	movs	r3, #16
   d5dfa:	9300      	str	r3, [sp, #0]
   d5dfc:	6800      	ldr	r0, [r0, #0]
   d5dfe:	ab02      	add	r3, sp, #8
   d5e00:	f241 0205 	movw	r2, #4101	; 0x1005
   d5e04:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5e08:	f7ff fa28 	bl	d525c <sock_setsockopt>
    if (ret < 0) {
   d5e0c:	2800      	cmp	r0, #0
   d5e0e:	da07      	bge.n	d5e20 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d5e10:	f7ff fb98 	bl	d5544 <__errno>
   d5e14:	6803      	ldr	r3, [r0, #0]
   d5e16:	6063      	str	r3, [r4, #4]
        return 0;
   d5e18:	2000      	movs	r0, #0
}
   d5e1a:	b006      	add	sp, #24
   d5e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d5e20:	6960      	ldr	r0, [r4, #20]
   d5e22:	2300      	movs	r3, #0
   d5e24:	6800      	ldr	r0, [r0, #0]
   d5e26:	463a      	mov	r2, r7
   d5e28:	4631      	mov	r1, r6
   d5e2a:	f7ff fa37 	bl	d529c <sock_send>
    if (ret < 0) {
   d5e2e:	1e03      	subs	r3, r0, #0
   d5e30:	dbee      	blt.n	d5e10 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d5e32:	4618      	mov	r0, r3
   d5e34:	e7f1      	b.n	d5e1a <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d5e38 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5e38:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d5e3a:	6984      	ldr	r4, [r0, #24]
   d5e3c:	4b0a      	ldr	r3, [pc, #40]	; (d5e68 <_ZN9TCPClientD1Ev+0x30>)
   d5e3e:	6003      	str	r3, [r0, #0]
   d5e40:	4605      	mov	r5, r0
   d5e42:	b17c      	cbz	r4, d5e64 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d5e44:	6863      	ldr	r3, [r4, #4]
   d5e46:	3b01      	subs	r3, #1
   d5e48:	6063      	str	r3, [r4, #4]
   d5e4a:	b95b      	cbnz	r3, d5e64 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d5e4c:	6823      	ldr	r3, [r4, #0]
   d5e4e:	4620      	mov	r0, r4
   d5e50:	689b      	ldr	r3, [r3, #8]
   d5e52:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5e54:	68a3      	ldr	r3, [r4, #8]
   d5e56:	3b01      	subs	r3, #1
   d5e58:	60a3      	str	r3, [r4, #8]
   d5e5a:	b91b      	cbnz	r3, d5e64 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5e5c:	6823      	ldr	r3, [r4, #0]
   d5e5e:	4620      	mov	r0, r4
   d5e60:	68db      	ldr	r3, [r3, #12]
   d5e62:	4798      	blx	r3
   d5e64:	4628      	mov	r0, r5
   d5e66:	bd38      	pop	{r3, r4, r5, pc}
   d5e68:	000d6d74 	.word	0x000d6d74

000d5e6c <_ZN9TCPClientD0Ev>:
   d5e6c:	b510      	push	{r4, lr}
   d5e6e:	4604      	mov	r4, r0
   d5e70:	f7ff ffe2 	bl	d5e38 <_ZN9TCPClientD1Ev>
   d5e74:	4620      	mov	r0, r4
   d5e76:	211c      	movs	r1, #28
   d5e78:	f000 fcbd 	bl	d67f6 <_ZdlPvj>
   d5e7c:	4620      	mov	r0, r4
   d5e7e:	bd10      	pop	{r4, pc}

000d5e80 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d5e80:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5e82:	694d      	ldr	r5, [r1, #20]
   d5e84:	4b05      	ldr	r3, [pc, #20]	; (d5e9c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d5e86:	4604      	mov	r4, r0
   d5e88:	358c      	adds	r5, #140	; 0x8c
   d5e8a:	f844 3b04 	str.w	r3, [r4], #4
   d5e8e:	4606      	mov	r6, r0
   d5e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e94:	682b      	ldr	r3, [r5, #0]
   d5e96:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d5e98:	4630      	mov	r0, r6
   d5e9a:	bd70      	pop	{r4, r5, r6, pc}
   d5e9c:	000d6cec 	.word	0x000d6cec

000d5ea0 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d5ea0:	b510      	push	{r4, lr}
   d5ea2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5ea4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5ea8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5eac:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d5eae:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5eb0:	d005      	beq.n	d5ebe <_ZN9TCPClient4peekEv+0x1e>
   d5eb2:	6963      	ldr	r3, [r4, #20]
   d5eb4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d5eb8:	4413      	add	r3, r2
   d5eba:	7918      	ldrb	r0, [r3, #4]
}
   d5ebc:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5ebe:	6803      	ldr	r3, [r0, #0]
   d5ec0:	691b      	ldr	r3, [r3, #16]
   d5ec2:	4798      	blx	r3
   d5ec4:	2800      	cmp	r0, #0
   d5ec6:	d1f4      	bne.n	d5eb2 <_ZN9TCPClient4peekEv+0x12>
   d5ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5ecc:	e7f6      	b.n	d5ebc <_ZN9TCPClient4peekEv+0x1c>

000d5ece <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d5ece:	b510      	push	{r4, lr}
   d5ed0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5ed2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5ed6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5eda:	429a      	cmp	r2, r3
int TCPClient::read() {
   d5edc:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5ede:	d008      	beq.n	d5ef2 <_ZN9TCPClient4readEv+0x24>
   d5ee0:	6963      	ldr	r3, [r4, #20]
   d5ee2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d5ee6:	1c51      	adds	r1, r2, #1
   d5ee8:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d5eec:	4413      	add	r3, r2
   d5eee:	7918      	ldrb	r0, [r3, #4]
}
   d5ef0:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5ef2:	6803      	ldr	r3, [r0, #0]
   d5ef4:	691b      	ldr	r3, [r3, #16]
   d5ef6:	4798      	blx	r3
   d5ef8:	2800      	cmp	r0, #0
   d5efa:	d1f1      	bne.n	d5ee0 <_ZN9TCPClient4readEv+0x12>
   d5efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5f00:	e7f6      	b.n	d5ef0 <_ZN9TCPClient4readEv+0x22>

000d5f02 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d5f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f04:	6943      	ldr	r3, [r0, #20]
   d5f06:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d5f08:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5f0c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5f10:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d5f12:	4605      	mov	r5, r0
   d5f14:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d5f16:	d016      	beq.n	d5f46 <_ZN9TCPClient4readEPhj+0x44>
   d5f18:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d5f1a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d5f1e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d5f22:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d5f24:	42bc      	cmp	r4, r7
   d5f26:	bf28      	it	cs
   d5f28:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d5f2a:	3304      	adds	r3, #4
   d5f2c:	4622      	mov	r2, r4
   d5f2e:	4419      	add	r1, r3
   d5f30:	4630      	mov	r0, r6
   d5f32:	f000 fd85 	bl	d6a40 <memcpy>
   d5f36:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d5f38:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5f3c:	4423      	add	r3, r4
   d5f3e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d5f42:	4620      	mov	r0, r4
   d5f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d5f46:	6803      	ldr	r3, [r0, #0]
   d5f48:	691b      	ldr	r3, [r3, #16]
   d5f4a:	4798      	blx	r3
   d5f4c:	2800      	cmp	r0, #0
   d5f4e:	d1e3      	bne.n	d5f18 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d5f50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d5f54:	e7f5      	b.n	d5f42 <_ZN9TCPClient4readEPhj+0x40>

000d5f56 <_ZN9TCPClient12flush_bufferEv>:
   d5f56:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d5f58:	2300      	movs	r3, #0
   d5f5a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d5f5e:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d5f60:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d5f64:	4770      	bx	lr

000d5f66 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f6a:	461f      	mov	r7, r3
    stop();
   d5f6c:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5f6e:	460c      	mov	r4, r1
    stop();
   d5f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5f72:	b08a      	sub	sp, #40	; 0x28
   d5f74:	4605      	mov	r5, r0
   d5f76:	4616      	mov	r6, r2
    stop();
   d5f78:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d5f7a:	7d23      	ldrb	r3, [r4, #20]
   d5f7c:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d5f80:	2b04      	cmp	r3, #4
   d5f82:	bf0c      	ite	eq
   d5f84:	2002      	moveq	r0, #2
   d5f86:	200a      	movne	r0, #10
   d5f88:	2206      	movs	r2, #6
   d5f8a:	2101      	movs	r1, #1
   d5f8c:	f7ff f98e 	bl	d52ac <sock_socket>
   d5f90:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d5f94:	696b      	ldr	r3, [r5, #20]
   d5f96:	681b      	ldr	r3, [r3, #0]
   d5f98:	2b00      	cmp	r3, #0
   d5f9a:	da08      	bge.n	d5fae <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d5f9c:	682b      	ldr	r3, [r5, #0]
   d5f9e:	4628      	mov	r0, r5
   d5fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5fa2:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d5fa4:	4798      	blx	r3
}
   d5fa6:	4620      	mov	r0, r4
   d5fa8:	b00a      	add	sp, #40	; 0x28
   d5faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d5fae:	4628      	mov	r0, r5
   d5fb0:	f7ff ffd1 	bl	d5f56 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d5fb4:	b1b7      	cbz	r7, d5fe4 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d5fb6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5fb8:	a903      	add	r1, sp, #12
   d5fba:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d5fbc:	9303      	str	r3, [sp, #12]
   d5fbe:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5fc2:	f7ff f91b 	bl	d51fc <if_index_to_name>
   d5fc6:	2800      	cmp	r0, #0
   d5fc8:	d1e8      	bne.n	d5f9c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d5fca:	6968      	ldr	r0, [r5, #20]
   d5fcc:	2306      	movs	r3, #6
   d5fce:	9300      	str	r3, [sp, #0]
   d5fd0:	6800      	ldr	r0, [r0, #0]
   d5fd2:	ab03      	add	r3, sp, #12
   d5fd4:	f241 020b 	movw	r2, #4107	; 0x100b
   d5fd8:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5fdc:	f7ff f93e 	bl	d525c <sock_setsockopt>
   d5fe0:	2800      	cmp	r0, #0
   d5fe2:	d1db      	bne.n	d5f9c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d5fe4:	221c      	movs	r2, #28
   d5fe6:	2100      	movs	r1, #0
   d5fe8:	a803      	add	r0, sp, #12
   d5fea:	f000 fd37 	bl	d6a5c <memset>
    if (ip.version() == 4) {
   d5fee:	7d23      	ldrb	r3, [r4, #20]
   d5ff0:	2b04      	cmp	r3, #4
   d5ff2:	d11d      	bne.n	d6030 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d5ff4:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d5ff8:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d5ffa:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d5ffe:	f7ff f915 	bl	d522c <inet_htons>
   d6002:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6006:	6860      	ldr	r0, [r4, #4]
   d6008:	f7ff f908 	bl	d521c <inet_htonl>
   d600c:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d600e:	696b      	ldr	r3, [r5, #20]
   d6010:	221c      	movs	r2, #28
   d6012:	6818      	ldr	r0, [r3, #0]
   d6014:	a903      	add	r1, sp, #12
   d6016:	f7ff f931 	bl	d527c <sock_connect>
   d601a:	2800      	cmp	r0, #0
   d601c:	d1be      	bne.n	d5f9c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d601e:	3404      	adds	r4, #4
   d6020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6022:	696d      	ldr	r5, [r5, #20]
   d6024:	358c      	adds	r5, #140	; 0x8c
   d6026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6028:	6823      	ldr	r3, [r4, #0]
   d602a:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d602c:	2401      	movs	r4, #1
   d602e:	e7ba      	b.n	d5fa6 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d6030:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d6034:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d6036:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d603a:	f7ff f8f7 	bl	d522c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d603e:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d6040:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6044:	1d23      	adds	r3, r4, #4
   d6046:	f104 0714 	add.w	r7, r4, #20
   d604a:	6818      	ldr	r0, [r3, #0]
   d604c:	6859      	ldr	r1, [r3, #4]
   d604e:	4632      	mov	r2, r6
   d6050:	c203      	stmia	r2!, {r0, r1}
   d6052:	3308      	adds	r3, #8
   d6054:	42bb      	cmp	r3, r7
   d6056:	4616      	mov	r6, r2
   d6058:	d1f7      	bne.n	d604a <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d605a:	e7d8      	b.n	d600e <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d605c <_ZN9TCPClient9availableEv>:
{
   d605c:	b530      	push	{r4, r5, lr}
   d605e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d6060:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d6064:	b08b      	sub	sp, #44	; 0x2c
   d6066:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d6068:	b12b      	cbz	r3, d6076 <_ZN9TCPClient9availableEv+0x1a>
   d606a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d606e:	429a      	cmp	r2, r3
   d6070:	d101      	bne.n	d6076 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d6072:	f7ff ff70 	bl	d5f56 <_ZN9TCPClient12flush_bufferEv>
   d6076:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d6078:	6808      	ldr	r0, [r1, #0]
   d607a:	2800      	cmp	r0, #0
   d607c:	db18      	blt.n	d60b0 <_ZN9TCPClient9availableEv+0x54>
   d607e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d6082:	2d7f      	cmp	r5, #127	; 0x7f
   d6084:	d814      	bhi.n	d60b0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6086:	3104      	adds	r1, #4
   d6088:	2308      	movs	r3, #8
   d608a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d608e:	4429      	add	r1, r5
   d6090:	f7ff f8fc 	bl	d528c <sock_recv>
            if (ret > 0) {
   d6094:	2800      	cmp	r0, #0
   d6096:	dd13      	ble.n	d60c0 <_ZN9TCPClient9availableEv+0x64>
   d6098:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d609a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d609e:	b90a      	cbnz	r2, d60a4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d60a0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d60a4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d60a6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d60aa:	4410      	add	r0, r2
   d60ac:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d60b0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d60b2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d60b6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d60ba:	1ac0      	subs	r0, r0, r3
   d60bc:	b00b      	add	sp, #44	; 0x2c
   d60be:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d60c0:	f7ff fa40 	bl	d5544 <__errno>
   d60c4:	6803      	ldr	r3, [r0, #0]
   d60c6:	2b0b      	cmp	r3, #11
   d60c8:	d0f2      	beq.n	d60b0 <_ZN9TCPClient9availableEv+0x54>
   d60ca:	f7ff fa3b 	bl	d5544 <__errno>
   d60ce:	6803      	ldr	r3, [r0, #0]
   d60d0:	2b0b      	cmp	r3, #11
   d60d2:	d0ed      	beq.n	d60b0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d60d4:	2320      	movs	r3, #32
   d60d6:	2500      	movs	r5, #0
   d60d8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d60dc:	f7ff fa32 	bl	d5544 <__errno>
   d60e0:	6803      	ldr	r3, [r0, #0]
   d60e2:	9301      	str	r3, [sp, #4]
   d60e4:	4b08      	ldr	r3, [pc, #32]	; (d6108 <_ZN9TCPClient9availableEv+0xac>)
   d60e6:	4909      	ldr	r1, [pc, #36]	; (d610c <_ZN9TCPClient9availableEv+0xb0>)
   d60e8:	9300      	str	r3, [sp, #0]
   d60ea:	aa02      	add	r2, sp, #8
   d60ec:	462b      	mov	r3, r5
   d60ee:	2032      	movs	r0, #50	; 0x32
   d60f0:	f7ff f96c 	bl	d53cc <log_message>
                    sock_close(d_->sock);
   d60f4:	6963      	ldr	r3, [r4, #20]
   d60f6:	6818      	ldr	r0, [r3, #0]
   d60f8:	f7ff f8b8 	bl	d526c <sock_close>
   d60fc:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d60fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6102:	601a      	str	r2, [r3, #0]
   d6104:	e7d4      	b.n	d60b0 <_ZN9TCPClient9availableEv+0x54>
   d6106:	bf00      	nop
   d6108:	000d6d3f 	.word	0x000d6d3f
   d610c:	000d6d38 	.word	0x000d6d38

000d6110 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d6110:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6112:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d6114:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6116:	6818      	ldr	r0, [r3, #0]
   d6118:	2800      	cmp	r0, #0
   d611a:	db01      	blt.n	d6120 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d611c:	f7ff f8a6 	bl	d526c <sock_close>
   d6120:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d6122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6126:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d6128:	6960      	ldr	r0, [r4, #20]
   d612a:	2211      	movs	r2, #17
   d612c:	2100      	movs	r1, #0
   d612e:	308c      	adds	r0, #140	; 0x8c
   d6130:	f000 fc94 	bl	d6a5c <memset>
    flush_buffer();
   d6134:	4620      	mov	r0, r4
}
   d6136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d613a:	f7ff bf0c 	b.w	d5f56 <_ZN9TCPClient12flush_bufferEv>

000d613e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d613e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6140:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d6142:	4604      	mov	r4, r0
          total(0) {
   d6144:	6001      	str	r1, [r0, #0]
   d6146:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d614a:	3088      	adds	r0, #136	; 0x88
   d614c:	f7ff fb18 	bl	d5780 <_ZN9IPAddressC1Ev>
}
   d6150:	4620      	mov	r0, r4
   d6152:	bd10      	pop	{r4, pc}

000d6154 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d6154:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6156:	2300      	movs	r3, #0
   d6158:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d615c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d6160:	4a0e      	ldr	r2, [pc, #56]	; (d619c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d6162:	6103      	str	r3, [r0, #16]
   d6164:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6166:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d6168:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d616a:	20ac      	movs	r0, #172	; 0xac
   d616c:	9101      	str	r1, [sp, #4]
   d616e:	f7fd ff90 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d6172:	1e05      	subs	r5, r0, #0
   d6174:	f105 060c 	add.w	r6, r5, #12
   d6178:	d008      	beq.n	d618c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d617a:	2301      	movs	r3, #1
   d617c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d6180:	4b07      	ldr	r3, [pc, #28]	; (d61a0 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6182:	9901      	ldr	r1, [sp, #4]
   d6184:	602b      	str	r3, [r5, #0]
   d6186:	4630      	mov	r0, r6
   d6188:	f7ff ffd9 	bl	d613e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d618c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d618e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d6192:	f7ff fee0 	bl	d5f56 <_ZN9TCPClient12flush_bufferEv>
}
   d6196:	b002      	add	sp, #8
   d6198:	bd70      	pop	{r4, r5, r6, pc}
   d619a:	bf00      	nop
   d619c:	000d6d74 	.word	0x000d6d74
   d61a0:	000d6d58 	.word	0x000d6d58

000d61a4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d61a4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d61a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   d61aa:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d61ac:	f7ff ffd2 	bl	d6154 <_ZN9TCPClientC1Ei>
}
   d61b0:	4620      	mov	r0, r4
   d61b2:	bd10      	pop	{r4, pc}

000d61b4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d61b4:	b510      	push	{r4, lr}
   d61b6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d61b8:	6800      	ldr	r0, [r0, #0]
   d61ba:	2800      	cmp	r0, #0
   d61bc:	db01      	blt.n	d61c2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d61be:	f7ff f855 	bl	d526c <sock_close>
    }
}
   d61c2:	4620      	mov	r0, r4
   d61c4:	bd10      	pop	{r4, pc}

000d61c6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d61c6:	300c      	adds	r0, #12
   d61c8:	f7ff bff4 	b.w	d61b4 <_ZN9TCPClient4DataD1Ev>

000d61cc <_ZN9IPAddressaSIPKhEERS_T_>:
    IPAddress& operator=(T address) {
   d61cc:	b570      	push	{r4, r5, r6, lr}
   d61ce:	b086      	sub	sp, #24
   d61d0:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d61d2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d61d4:	4668      	mov	r0, sp
   d61d6:	f7ff fb17 	bl	d5808 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d61da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d61dc:	1d34      	adds	r4, r6, #4
   d61de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d61e0:	682b      	ldr	r3, [r5, #0]
   d61e2:	7023      	strb	r3, [r4, #0]
    }
   d61e4:	4630      	mov	r0, r6
   d61e6:	b006      	add	sp, #24
   d61e8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d61ec <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d61ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d61f0:	4698      	mov	r8, r3
    stop();
   d61f2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d61f4:	b093      	sub	sp, #76	; 0x4c
   d61f6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d61f8:	2400      	movs	r4, #0
    stop();
   d61fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d61fc:	4606      	mov	r6, r0
   d61fe:	4617      	mov	r7, r2
    stop();
   d6200:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6202:	4628      	mov	r0, r5
   d6204:	466b      	mov	r3, sp
   d6206:	4622      	mov	r2, r4
   d6208:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d620a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d620c:	f7ff f81e 	bl	d524c <netdb_getaddrinfo>
   d6210:	4605      	mov	r5, r0
   d6212:	2800      	cmp	r0, #0
   d6214:	d163      	bne.n	d62de <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d6216:	9b00      	ldr	r3, [sp, #0]
   d6218:	2b00      	cmp	r3, #0
   d621a:	d04b      	beq.n	d62b4 <_ZN9TCPClient7connectEPKctm+0xc8>
   d621c:	695b      	ldr	r3, [r3, #20]
   d621e:	2b00      	cmp	r3, #0
   d6220:	d048      	beq.n	d62b4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d6222:	a806      	add	r0, sp, #24
   d6224:	f7ff faac 	bl	d5780 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6228:	9b00      	ldr	r3, [sp, #0]
   d622a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d622c:	7863      	ldrb	r3, [r4, #1]
   d622e:	2b02      	cmp	r3, #2
   d6230:	d104      	bne.n	d623c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6232:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6234:	a806      	add	r0, sp, #24
   d6236:	f7ff ffc9 	bl	d61cc <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d623a:	e026      	b.n	d628a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d623c:	2b0a      	cmp	r3, #10
   d623e:	d124      	bne.n	d628a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d6240:	2211      	movs	r2, #17
   d6242:	4629      	mov	r1, r5
   d6244:	a801      	add	r0, sp, #4
   d6246:	f000 fc09 	bl	d6a5c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d624a:	68a3      	ldr	r3, [r4, #8]
   d624c:	2b00      	cmp	r3, #0
   d624e:	d038      	beq.n	d62c2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6250:	f104 0308 	add.w	r3, r4, #8
   d6254:	f10d 0c04 	add.w	ip, sp, #4
   d6258:	3418      	adds	r4, #24
   d625a:	6818      	ldr	r0, [r3, #0]
   d625c:	6859      	ldr	r1, [r3, #4]
   d625e:	4662      	mov	r2, ip
   d6260:	c203      	stmia	r2!, {r0, r1}
   d6262:	3308      	adds	r3, #8
   d6264:	42a3      	cmp	r3, r4
   d6266:	4694      	mov	ip, r2
   d6268:	d1f7      	bne.n	d625a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d626a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d626c:	a901      	add	r1, sp, #4
   d626e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d6270:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6274:	f7ff fa92 	bl	d579c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d6278:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d627c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d6280:	ac07      	add	r4, sp, #28
   d6282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6284:	f8dc 3000 	ldr.w	r3, [ip]
   d6288:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d628a:	a806      	add	r0, sp, #24
   d628c:	f7ff fa98 	bl	d57c0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6290:	b180      	cbz	r0, d62b4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d6292:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d6294:	ad07      	add	r5, sp, #28
   d6296:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d629a:	4b12      	ldr	r3, [pc, #72]	; (d62e4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d629c:	930c      	str	r3, [sp, #48]	; 0x30
   d629e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62a0:	ac0d      	add	r4, sp, #52	; 0x34
   d62a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62a4:	682b      	ldr	r3, [r5, #0]
   d62a6:	7023      	strb	r3, [r4, #0]
   d62a8:	463a      	mov	r2, r7
   d62aa:	4643      	mov	r3, r8
   d62ac:	a90c      	add	r1, sp, #48	; 0x30
   d62ae:	4630      	mov	r0, r6
   d62b0:	47c8      	blx	r9
   d62b2:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d62b4:	9800      	ldr	r0, [sp, #0]
   d62b6:	f7fe ffc1 	bl	d523c <netdb_freeaddrinfo>
}
   d62ba:	4628      	mov	r0, r5
   d62bc:	b013      	add	sp, #76	; 0x4c
   d62be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d62c2:	68e3      	ldr	r3, [r4, #12]
   d62c4:	2b00      	cmp	r3, #0
   d62c6:	d1c3      	bne.n	d6250 <_ZN9TCPClient7connectEPKctm+0x64>
   d62c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d62cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d62d0:	f7fe ffa4 	bl	d521c <inet_htonl>
   d62d4:	4581      	cmp	r9, r0
   d62d6:	d1bb      	bne.n	d6250 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d62d8:	f104 0114 	add.w	r1, r4, #20
   d62dc:	e7aa      	b.n	d6234 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d62de:	4625      	mov	r5, r4
   d62e0:	e7e8      	b.n	d62b4 <_ZN9TCPClient7connectEPKctm+0xc8>
   d62e2:	bf00      	nop
   d62e4:	000d6cec 	.word	0x000d6cec

000d62e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d62e8:	4b02      	ldr	r3, [pc, #8]	; (d62f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d62ea:	681a      	ldr	r2, [r3, #0]
   d62ec:	4b02      	ldr	r3, [pc, #8]	; (d62f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d62ee:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d62f0:	4770      	bx	lr
   d62f2:	bf00      	nop
   d62f4:	2003e438 	.word	0x2003e438
   d62f8:	2003e688 	.word	0x2003e688

000d62fc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d62fc:	4770      	bx	lr

000d62fe <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d62fe:	7441      	strb	r1, [r0, #17]
}
   d6300:	4770      	bx	lr

000d6302 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6302:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6304:	7c00      	ldrb	r0, [r0, #16]
   d6306:	f7ff f821 	bl	d534c <hal_usart_available_data_for_write>
}
   d630a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d630e:	bd08      	pop	{r3, pc}

000d6310 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6310:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6312:	7c00      	ldrb	r0, [r0, #16]
   d6314:	f7fe fff2 	bl	d52fc <hal_usart_available>
}
   d6318:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d631c:	bd08      	pop	{r3, pc}

000d631e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d631e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6320:	7c00      	ldrb	r0, [r0, #16]
   d6322:	f7fe fffb 	bl	d531c <hal_usart_peek>
}
   d6326:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d632a:	bd08      	pop	{r3, pc}

000d632c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d632c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d632e:	7c00      	ldrb	r0, [r0, #16]
   d6330:	f7fe ffec 	bl	d530c <hal_usart_read>
}
   d6334:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6338:	bd08      	pop	{r3, pc}

000d633a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d633a:	7c00      	ldrb	r0, [r0, #16]
   d633c:	f7fe bff6 	b.w	d532c <hal_usart_flush>

000d6340 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6340:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6342:	7c45      	ldrb	r5, [r0, #17]
{
   d6344:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6346:	b12d      	cbz	r5, d6354 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6348:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d634a:	b003      	add	sp, #12
   d634c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6350:	f7fe bfcc 	b.w	d52ec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6354:	7c00      	ldrb	r0, [r0, #16]
   d6356:	9101      	str	r1, [sp, #4]
   d6358:	f7fe fff8 	bl	d534c <hal_usart_available_data_for_write>
   d635c:	2800      	cmp	r0, #0
   d635e:	9901      	ldr	r1, [sp, #4]
   d6360:	dcf2      	bgt.n	d6348 <_ZN11USARTSerial5writeEh+0x8>
}
   d6362:	4628      	mov	r0, r5
   d6364:	b003      	add	sp, #12
   d6366:	bd30      	pop	{r4, r5, pc}

000d6368 <_ZN11USARTSerialD0Ev>:
   d6368:	b510      	push	{r4, lr}
   d636a:	2114      	movs	r1, #20
   d636c:	4604      	mov	r4, r0
   d636e:	f000 fa42 	bl	d67f6 <_ZdlPvj>
   d6372:	4620      	mov	r0, r4
   d6374:	bd10      	pop	{r4, pc}
	...

000d6378 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6378:	b510      	push	{r4, lr}
   d637a:	f04f 0c00 	mov.w	ip, #0
   d637e:	4604      	mov	r4, r0
   d6380:	4608      	mov	r0, r1
   d6382:	4611      	mov	r1, r2
   d6384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6388:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d638c:	4a04      	ldr	r2, [pc, #16]	; (d63a0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d638e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6390:	2201      	movs	r2, #1
  _serial = serial;
   d6392:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6394:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6396:	461a      	mov	r2, r3
   d6398:	f7fe ffa0 	bl	d52dc <hal_usart_init>
}
   d639c:	4620      	mov	r0, r4
   d639e:	bd10      	pop	{r4, pc}
   d63a0:	000d6ddc 	.word	0x000d6ddc

000d63a4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d63a4:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d63a6:	4c0e      	ldr	r4, [pc, #56]	; (d63e0 <_Z22__fetch_global_Serial1v+0x3c>)
   d63a8:	7821      	ldrb	r1, [r4, #0]
   d63aa:	f3bf 8f5b 	dmb	ish
   d63ae:	f011 0101 	ands.w	r1, r1, #1
   d63b2:	d112      	bne.n	d63da <_Z22__fetch_global_Serial1v+0x36>
   d63b4:	4620      	mov	r0, r4
   d63b6:	9101      	str	r1, [sp, #4]
   d63b8:	f7fd fe73 	bl	d40a2 <__cxa_guard_acquire>
   d63bc:	9901      	ldr	r1, [sp, #4]
   d63be:	b160      	cbz	r0, d63da <_Z22__fetch_global_Serial1v+0x36>
   d63c0:	4a08      	ldr	r2, [pc, #32]	; (d63e4 <_Z22__fetch_global_Serial1v+0x40>)
   d63c2:	4b09      	ldr	r3, [pc, #36]	; (d63e8 <_Z22__fetch_global_Serial1v+0x44>)
   d63c4:	4809      	ldr	r0, [pc, #36]	; (d63ec <_Z22__fetch_global_Serial1v+0x48>)
   d63c6:	f7ff ffd7 	bl	d6378 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d63ca:	4620      	mov	r0, r4
   d63cc:	f7fd fe6e 	bl	d40ac <__cxa_guard_release>
   d63d0:	4a07      	ldr	r2, [pc, #28]	; (d63f0 <_Z22__fetch_global_Serial1v+0x4c>)
   d63d2:	4908      	ldr	r1, [pc, #32]	; (d63f4 <_Z22__fetch_global_Serial1v+0x50>)
   d63d4:	4805      	ldr	r0, [pc, #20]	; (d63ec <_Z22__fetch_global_Serial1v+0x48>)
   d63d6:	f000 fa09 	bl	d67ec <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d63da:	4804      	ldr	r0, [pc, #16]	; (d63ec <_Z22__fetch_global_Serial1v+0x48>)
   d63dc:	b002      	add	sp, #8
   d63de:	bd10      	pop	{r4, pc}
   d63e0:	2003e68c 	.word	0x2003e68c
   d63e4:	2003e690 	.word	0x2003e690
   d63e8:	2003e714 	.word	0x2003e714
   d63ec:	2003e798 	.word	0x2003e798
   d63f0:	2003e4a0 	.word	0x2003e4a0
   d63f4:	000d62fd 	.word	0x000d62fd

000d63f8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d63f8:	7441      	strb	r1, [r0, #17]
}
   d63fa:	4770      	bx	lr

000d63fc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d63fc:	4770      	bx	lr

000d63fe <_ZN9USBSerial4readEv>:
{
   d63fe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6400:	2100      	movs	r1, #0
   d6402:	7c00      	ldrb	r0, [r0, #16]
   d6404:	f7fe ffca 	bl	d539c <HAL_USB_USART_Receive_Data>
}
   d6408:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d640c:	bd08      	pop	{r3, pc}

000d640e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d640e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6410:	2101      	movs	r1, #1
   d6412:	7c00      	ldrb	r0, [r0, #16]
   d6414:	f7fe ffc2 	bl	d539c <HAL_USB_USART_Receive_Data>
}
   d6418:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d641c:	bd08      	pop	{r3, pc}

000d641e <_ZN9USBSerial17availableForWriteEv>:
{
   d641e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6420:	7c00      	ldrb	r0, [r0, #16]
   d6422:	f7fe ffb3 	bl	d538c <HAL_USB_USART_Available_Data_For_Write>
}
   d6426:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d642a:	bd08      	pop	{r3, pc}

000d642c <_ZN9USBSerial9availableEv>:
{
   d642c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d642e:	7c00      	ldrb	r0, [r0, #16]
   d6430:	f7fe ffa4 	bl	d537c <HAL_USB_USART_Available_Data>
}
   d6434:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6438:	bd08      	pop	{r3, pc}

000d643a <_ZN9USBSerial5writeEh>:
{
   d643a:	b513      	push	{r0, r1, r4, lr}
   d643c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d643e:	7c00      	ldrb	r0, [r0, #16]
{
   d6440:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6442:	f7fe ffa3 	bl	d538c <HAL_USB_USART_Available_Data_For_Write>
   d6446:	2800      	cmp	r0, #0
   d6448:	9901      	ldr	r1, [sp, #4]
   d644a:	dc01      	bgt.n	d6450 <_ZN9USBSerial5writeEh+0x16>
   d644c:	7c60      	ldrb	r0, [r4, #17]
   d644e:	b120      	cbz	r0, d645a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6450:	7c20      	ldrb	r0, [r4, #16]
   d6452:	f7fe ffab 	bl	d53ac <HAL_USB_USART_Send_Data>
   d6456:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d645a:	b002      	add	sp, #8
   d645c:	bd10      	pop	{r4, pc}

000d645e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d645e:	7c00      	ldrb	r0, [r0, #16]
   d6460:	f7fe bfac 	b.w	d53bc <HAL_USB_USART_Flush_Data>

000d6464 <_ZN9USBSerialD0Ev>:
   d6464:	b510      	push	{r4, lr}
   d6466:	2114      	movs	r1, #20
   d6468:	4604      	mov	r4, r0
   d646a:	f000 f9c4 	bl	d67f6 <_ZdlPvj>
   d646e:	4620      	mov	r0, r4
   d6470:	bd10      	pop	{r4, pc}
	...

000d6474 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6474:	b510      	push	{r4, lr}
   d6476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d647a:	4604      	mov	r4, r0
   d647c:	4608      	mov	r0, r1
   d647e:	2100      	movs	r1, #0
   d6480:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6484:	4b04      	ldr	r3, [pc, #16]	; (d6498 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6486:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6488:	2301      	movs	r3, #1
  _serial = serial;
   d648a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d648c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d648e:	4611      	mov	r1, r2
   d6490:	f7fe ff64 	bl	d535c <HAL_USB_USART_Init>
}
   d6494:	4620      	mov	r0, r4
   d6496:	bd10      	pop	{r4, pc}
   d6498:	000d6e0c 	.word	0x000d6e0c

000d649c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d649c:	7c00      	ldrb	r0, [r0, #16]
   d649e:	2200      	movs	r2, #0
   d64a0:	f7fe bf64 	b.w	d536c <HAL_USB_USART_Begin>

000d64a4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d64a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d64a6:	2214      	movs	r2, #20
{
   d64a8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d64aa:	2100      	movs	r1, #0
   d64ac:	f000 fad6 	bl	d6a5c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d64b0:	4620      	mov	r0, r4
   d64b2:	bd10      	pop	{r4, pc}

000d64b4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d64b4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d64b6:	4c10      	ldr	r4, [pc, #64]	; (d64f8 <_Z16_fetch_usbserialv+0x44>)
{
   d64b8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d64ba:	a803      	add	r0, sp, #12
   d64bc:	f7ff fff2 	bl	d64a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d64c0:	7821      	ldrb	r1, [r4, #0]
   d64c2:	f3bf 8f5b 	dmb	ish
   d64c6:	f011 0101 	ands.w	r1, r1, #1
   d64ca:	d111      	bne.n	d64f0 <_Z16_fetch_usbserialv+0x3c>
   d64cc:	4620      	mov	r0, r4
   d64ce:	9101      	str	r1, [sp, #4]
   d64d0:	f7fd fde7 	bl	d40a2 <__cxa_guard_acquire>
   d64d4:	9901      	ldr	r1, [sp, #4]
   d64d6:	b158      	cbz	r0, d64f0 <_Z16_fetch_usbserialv+0x3c>
   d64d8:	aa03      	add	r2, sp, #12
   d64da:	4808      	ldr	r0, [pc, #32]	; (d64fc <_Z16_fetch_usbserialv+0x48>)
   d64dc:	f7ff ffca 	bl	d6474 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d64e0:	4620      	mov	r0, r4
   d64e2:	f7fd fde3 	bl	d40ac <__cxa_guard_release>
   d64e6:	4a06      	ldr	r2, [pc, #24]	; (d6500 <_Z16_fetch_usbserialv+0x4c>)
   d64e8:	4906      	ldr	r1, [pc, #24]	; (d6504 <_Z16_fetch_usbserialv+0x50>)
   d64ea:	4804      	ldr	r0, [pc, #16]	; (d64fc <_Z16_fetch_usbserialv+0x48>)
   d64ec:	f000 f97e 	bl	d67ec <__aeabi_atexit>
	return _usbserial;
}
   d64f0:	4802      	ldr	r0, [pc, #8]	; (d64fc <_Z16_fetch_usbserialv+0x48>)
   d64f2:	b008      	add	sp, #32
   d64f4:	bd10      	pop	{r4, pc}
   d64f6:	bf00      	nop
   d64f8:	2003e7ac 	.word	0x2003e7ac
   d64fc:	2003e7b0 	.word	0x2003e7b0
   d6500:	2003e4a0 	.word	0x2003e4a0
   d6504:	000d63fd 	.word	0x000d63fd

000d6508 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6508:	2200      	movs	r2, #0
   d650a:	6840      	ldr	r0, [r0, #4]
   d650c:	4611      	mov	r1, r2
   d650e:	f7fe bfb9 	b.w	d5484 <network_ready>

000d6512 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6512:	2200      	movs	r2, #0
   d6514:	6840      	ldr	r0, [r0, #4]
   d6516:	4611      	mov	r1, r2
   d6518:	f7fe bfd4 	b.w	d54c4 <network_listening>

000d651c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d651c:	2200      	movs	r2, #0
   d651e:	6840      	ldr	r0, [r0, #4]
   d6520:	4611      	mov	r1, r2
   d6522:	f7fe bfdf 	b.w	d54e4 <network_get_listen_timeout>

000d6526 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6526:	6840      	ldr	r0, [r0, #4]
   d6528:	2200      	movs	r2, #0
   d652a:	f7fe bfd3 	b.w	d54d4 <network_set_listen_timeout>

000d652e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d652e:	6840      	ldr	r0, [r0, #4]
   d6530:	2200      	movs	r2, #0
   d6532:	f081 0101 	eor.w	r1, r1, #1
   d6536:	f7fe bfbd 	b.w	d54b4 <network_listen>

000d653a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d653a:	2300      	movs	r3, #0
   d653c:	6840      	ldr	r0, [r0, #4]
   d653e:	461a      	mov	r2, r3
   d6540:	4619      	mov	r1, r3
   d6542:	f7fe bfaf 	b.w	d54a4 <network_off>

000d6546 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6546:	2300      	movs	r3, #0
   d6548:	6840      	ldr	r0, [r0, #4]
   d654a:	461a      	mov	r2, r3
   d654c:	4619      	mov	r1, r3
   d654e:	f7fe bfa1 	b.w	d5494 <network_on>

000d6552 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6552:	2200      	movs	r2, #0
   d6554:	6840      	ldr	r0, [r0, #4]
   d6556:	4611      	mov	r1, r2
   d6558:	f7fe bf84 	b.w	d5464 <network_connecting>

000d655c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d655c:	6840      	ldr	r0, [r0, #4]
   d655e:	2200      	movs	r2, #0
   d6560:	2102      	movs	r1, #2
   d6562:	f7fe bf87 	b.w	d5474 <network_disconnect>

000d6566 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6566:	2300      	movs	r3, #0
   d6568:	6840      	ldr	r0, [r0, #4]
   d656a:	461a      	mov	r2, r3
   d656c:	f7fe bf72 	b.w	d5454 <network_connect>

000d6570 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6570:	4b02      	ldr	r3, [pc, #8]	; (d657c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6572:	2204      	movs	r2, #4
   d6574:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6576:	4a02      	ldr	r2, [pc, #8]	; (d6580 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6578:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d657a:	4770      	bx	lr
   d657c:	2003e7c4 	.word	0x2003e7c4
   d6580:	000d6e3c 	.word	0x000d6e3c

000d6584 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6584:	4b01      	ldr	r3, [pc, #4]	; (d658c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6586:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6588:	4770      	bx	lr
   d658a:	bf00      	nop
   d658c:	2003e43c 	.word	0x2003e43c

000d6590 <serialEventRun>:
{
   d6590:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6592:	4b0b      	ldr	r3, [pc, #44]	; (d65c0 <serialEventRun+0x30>)
   d6594:	b143      	cbz	r3, d65a8 <serialEventRun+0x18>
   d6596:	f7ff ff8d 	bl	d64b4 <_Z16_fetch_usbserialv>
   d659a:	6803      	ldr	r3, [r0, #0]
   d659c:	691b      	ldr	r3, [r3, #16]
   d659e:	4798      	blx	r3
   d65a0:	2800      	cmp	r0, #0
   d65a2:	dd01      	ble.n	d65a8 <serialEventRun+0x18>
        serialEvent();
   d65a4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d65a8:	4b06      	ldr	r3, [pc, #24]	; (d65c4 <serialEventRun+0x34>)
   d65aa:	b143      	cbz	r3, d65be <serialEventRun+0x2e>
   d65ac:	f7ff fefa 	bl	d63a4 <_Z22__fetch_global_Serial1v>
   d65b0:	6803      	ldr	r3, [r0, #0]
   d65b2:	691b      	ldr	r3, [r3, #16]
   d65b4:	4798      	blx	r3
   d65b6:	2800      	cmp	r0, #0
   d65b8:	dd01      	ble.n	d65be <serialEventRun+0x2e>
        serialEvent1();
   d65ba:	f3af 8000 	nop.w
}
   d65be:	bd08      	pop	{r3, pc}
	...

000d65c8 <_post_loop>:
{
   d65c8:	b508      	push	{r3, lr}
	serialEventRun();
   d65ca:	f7ff ffe1 	bl	d6590 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d65ce:	f7fe fd9d 	bl	d510c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d65d2:	4b01      	ldr	r3, [pc, #4]	; (d65d8 <_post_loop+0x10>)
   d65d4:	6018      	str	r0, [r3, #0]
}
   d65d6:	bd08      	pop	{r3, pc}
   d65d8:	2003e7d4 	.word	0x2003e7d4

000d65dc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d65dc:	4802      	ldr	r0, [pc, #8]	; (d65e8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d65de:	4a03      	ldr	r2, [pc, #12]	; (d65ec <_Z33system_initialize_user_backup_ramv+0x10>)
   d65e0:	4903      	ldr	r1, [pc, #12]	; (d65f0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d65e2:	1a12      	subs	r2, r2, r0
   d65e4:	f000 ba2c 	b.w	d6a40 <memcpy>
   d65e8:	2003f400 	.word	0x2003f400
   d65ec:	2003f404 	.word	0x2003f404
   d65f0:	000d6f90 	.word	0x000d6f90

000d65f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d65f4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d65f6:	2300      	movs	r3, #0
   d65f8:	9300      	str	r3, [sp, #0]
   d65fa:	461a      	mov	r2, r3
   d65fc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6600:	f7fe ff0e 	bl	d5420 <system_ctrl_set_result>
}
   d6604:	b003      	add	sp, #12
   d6606:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d660c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d660c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d660e:	8843      	ldrh	r3, [r0, #2]
   d6610:	2b0a      	cmp	r3, #10
   d6612:	d008      	beq.n	d6626 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6614:	2b50      	cmp	r3, #80	; 0x50
   d6616:	d10b      	bne.n	d6630 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6618:	4b09      	ldr	r3, [pc, #36]	; (d6640 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d661a:	681b      	ldr	r3, [r3, #0]
   d661c:	b14b      	cbz	r3, d6632 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d661e:	b003      	add	sp, #12
   d6620:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6624:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6626:	f7ff ffe5 	bl	d65f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d662a:	b003      	add	sp, #12
   d662c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6630:	2300      	movs	r3, #0
   d6632:	9300      	str	r3, [sp, #0]
   d6634:	461a      	mov	r2, r3
   d6636:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d663a:	f7fe fef1 	bl	d5420 <system_ctrl_set_result>
}
   d663e:	e7f4      	b.n	d662a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6640:	2003e7d0 	.word	0x2003e7d0

000d6644 <module_user_init_hook>:
{
   d6644:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6646:	4c12      	ldr	r4, [pc, #72]	; (d6690 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6648:	4812      	ldr	r0, [pc, #72]	; (d6694 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d664a:	4d13      	ldr	r5, [pc, #76]	; (d6698 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d664c:	2100      	movs	r1, #0
   d664e:	f7fe ff81 	bl	d5554 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6652:	6823      	ldr	r3, [r4, #0]
   d6654:	42ab      	cmp	r3, r5
   d6656:	4b11      	ldr	r3, [pc, #68]	; (d669c <module_user_init_hook+0x58>)
   d6658:	bf0c      	ite	eq
   d665a:	2201      	moveq	r2, #1
   d665c:	2200      	movne	r2, #0
   d665e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6660:	d002      	beq.n	d6668 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6662:	f7ff ffbb 	bl	d65dc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6666:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6668:	f7fe fd48 	bl	d50fc <HAL_RNG_GetRandomNumber>
   d666c:	4604      	mov	r4, r0
    srand(seed);
   d666e:	f000 f9fd 	bl	d6a6c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6672:	4b0b      	ldr	r3, [pc, #44]	; (d66a0 <module_user_init_hook+0x5c>)
   d6674:	b113      	cbz	r3, d667c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d6676:	4620      	mov	r0, r4
   d6678:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d667c:	2100      	movs	r1, #0
   d667e:	4808      	ldr	r0, [pc, #32]	; (d66a0 <module_user_init_hook+0x5c>)
   d6680:	f7fe fee0 	bl	d5444 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6688:	4806      	ldr	r0, [pc, #24]	; (d66a4 <module_user_init_hook+0x60>)
   d668a:	2100      	movs	r1, #0
   d668c:	f7fe bebe 	b.w	d540c <system_ctrl_set_app_request_handler>
   d6690:	2003f400 	.word	0x2003f400
   d6694:	000d6585 	.word	0x000d6585
   d6698:	9a271c1e 	.word	0x9a271c1e
   d669c:	2003e7cc 	.word	0x2003e7cc
   d66a0:	00000000 	.word	0x00000000
   d66a4:	000d660d 	.word	0x000d660d

000d66a8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d66a8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d66aa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d66ac:	d902      	bls.n	d66b4 <pinAvailable+0xc>
    return false;
   d66ae:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d66b0:	b002      	add	sp, #8
   d66b2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d66b4:	f1a0 030b 	sub.w	r3, r0, #11
   d66b8:	2b02      	cmp	r3, #2
   d66ba:	d81a      	bhi.n	d66f2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d66bc:	4c17      	ldr	r4, [pc, #92]	; (d671c <pinAvailable+0x74>)
   d66be:	7821      	ldrb	r1, [r4, #0]
   d66c0:	f3bf 8f5b 	dmb	ish
   d66c4:	f011 0101 	ands.w	r1, r1, #1
   d66c8:	d10b      	bne.n	d66e2 <pinAvailable+0x3a>
   d66ca:	4620      	mov	r0, r4
   d66cc:	9101      	str	r1, [sp, #4]
   d66ce:	f7fd fce8 	bl	d40a2 <__cxa_guard_acquire>
   d66d2:	9901      	ldr	r1, [sp, #4]
   d66d4:	b128      	cbz	r0, d66e2 <pinAvailable+0x3a>
   d66d6:	4812      	ldr	r0, [pc, #72]	; (d6720 <pinAvailable+0x78>)
   d66d8:	f7ff f9da 	bl	d5a90 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d66dc:	4620      	mov	r0, r4
   d66de:	f7fd fce5 	bl	d40ac <__cxa_guard_release>
   d66e2:	4b0f      	ldr	r3, [pc, #60]	; (d6720 <pinAvailable+0x78>)
   d66e4:	7818      	ldrb	r0, [r3, #0]
   d66e6:	f7fe fdf1 	bl	d52cc <hal_spi_is_enabled>
   d66ea:	2800      	cmp	r0, #0
   d66ec:	d1df      	bne.n	d66ae <pinAvailable+0x6>
  return true; // 'pin' is available
   d66ee:	2001      	movs	r0, #1
   d66f0:	e7de      	b.n	d66b0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d66f2:	2801      	cmp	r0, #1
   d66f4:	d809      	bhi.n	d670a <pinAvailable+0x62>
   d66f6:	f000 f851 	bl	d679c <_Z19__fetch_global_Wirev>
   d66fa:	2100      	movs	r1, #0
   d66fc:	7c00      	ldrb	r0, [r0, #16]
   d66fe:	f7fe fd6d 	bl	d51dc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6702:	f080 0001 	eor.w	r0, r0, #1
   d6706:	b2c0      	uxtb	r0, r0
   d6708:	e7d2      	b.n	d66b0 <pinAvailable+0x8>
   d670a:	3809      	subs	r0, #9
   d670c:	2801      	cmp	r0, #1
   d670e:	d8ee      	bhi.n	d66ee <pinAvailable+0x46>
   d6710:	f7ff fe48 	bl	d63a4 <_Z22__fetch_global_Serial1v>
   d6714:	7c00      	ldrb	r0, [r0, #16]
   d6716:	f7fe fe11 	bl	d533c <hal_usart_is_enabled>
   d671a:	e7f2      	b.n	d6702 <pinAvailable+0x5a>
   d671c:	2003e644 	.word	0x2003e644
   d6720:	2003e648 	.word	0x2003e648

000d6724 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6724:	2823      	cmp	r0, #35	; 0x23
{
   d6726:	b538      	push	{r3, r4, r5, lr}
   d6728:	4604      	mov	r4, r0
   d672a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d672c:	d80a      	bhi.n	d6744 <pinMode+0x20>
   d672e:	29ff      	cmp	r1, #255	; 0xff
   d6730:	d008      	beq.n	d6744 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6732:	f7ff ffb9 	bl	d66a8 <pinAvailable>
   d6736:	b128      	cbz	r0, d6744 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6738:	4629      	mov	r1, r5
   d673a:	4620      	mov	r0, r4
}
   d673c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6740:	f7fe bcec 	b.w	d511c <HAL_Pin_Mode>
}
   d6744:	bd38      	pop	{r3, r4, r5, pc}

000d6746 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6746:	b510      	push	{r4, lr}
   d6748:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d674a:	f7fe fcef 	bl	d512c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d674e:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6750:	b2db      	uxtb	r3, r3
   d6752:	2b01      	cmp	r3, #1
   d6754:	d908      	bls.n	d6768 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6756:	4620      	mov	r0, r4
   d6758:	f7ff ffa6 	bl	d66a8 <pinAvailable>
   d675c:	b120      	cbz	r0, d6768 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d675e:	4620      	mov	r0, r4
}
   d6760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6764:	f7fe bcea 	b.w	d513c <HAL_GPIO_Read>
}
   d6768:	2000      	movs	r0, #0
   d676a:	bd10      	pop	{r4, pc}

000d676c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d676c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d676e:	2300      	movs	r3, #0
   d6770:	2520      	movs	r5, #32
   d6772:	8043      	strh	r3, [r0, #2]
   d6774:	2314      	movs	r3, #20
{
   d6776:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6778:	8003      	strh	r3, [r0, #0]
   d677a:	6085      	str	r5, [r0, #8]
   d677c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d677e:	4906      	ldr	r1, [pc, #24]	; (d6798 <_Z17acquireWireBufferv+0x2c>)
   d6780:	4628      	mov	r0, r5
   d6782:	f000 f83a 	bl	d67fa <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6786:	4904      	ldr	r1, [pc, #16]	; (d6798 <_Z17acquireWireBufferv+0x2c>)
	};
   d6788:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d678a:	4628      	mov	r0, r5
   d678c:	f000 f835 	bl	d67fa <_ZnajRKSt9nothrow_t>
	};
   d6790:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6792:	4620      	mov	r0, r4
   d6794:	bd38      	pop	{r3, r4, r5, pc}
   d6796:	bf00      	nop
   d6798:	000d6e70 	.word	0x000d6e70

000d679c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d679c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d679e:	4d0f      	ldr	r5, [pc, #60]	; (d67dc <_Z19__fetch_global_Wirev+0x40>)
   d67a0:	7829      	ldrb	r1, [r5, #0]
   d67a2:	f3bf 8f5b 	dmb	ish
   d67a6:	f011 0401 	ands.w	r4, r1, #1
{
   d67aa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d67ac:	d113      	bne.n	d67d6 <_Z19__fetch_global_Wirev+0x3a>
   d67ae:	4628      	mov	r0, r5
   d67b0:	f7fd fc77 	bl	d40a2 <__cxa_guard_acquire>
   d67b4:	b178      	cbz	r0, d67d6 <_Z19__fetch_global_Wirev+0x3a>
   d67b6:	a801      	add	r0, sp, #4
   d67b8:	f7ff ffd8 	bl	d676c <_Z17acquireWireBufferv>
   d67bc:	aa01      	add	r2, sp, #4
   d67be:	4621      	mov	r1, r4
   d67c0:	4807      	ldr	r0, [pc, #28]	; (d67e0 <_Z19__fetch_global_Wirev+0x44>)
   d67c2:	f7fe ff61 	bl	d5688 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d67c6:	4628      	mov	r0, r5
   d67c8:	f7fd fc70 	bl	d40ac <__cxa_guard_release>
   d67cc:	4a05      	ldr	r2, [pc, #20]	; (d67e4 <_Z19__fetch_global_Wirev+0x48>)
   d67ce:	4906      	ldr	r1, [pc, #24]	; (d67e8 <_Z19__fetch_global_Wirev+0x4c>)
   d67d0:	4803      	ldr	r0, [pc, #12]	; (d67e0 <_Z19__fetch_global_Wirev+0x44>)
   d67d2:	f000 f80b 	bl	d67ec <__aeabi_atexit>
	return wire;
}
   d67d6:	4802      	ldr	r0, [pc, #8]	; (d67e0 <_Z19__fetch_global_Wirev+0x44>)
   d67d8:	b007      	add	sp, #28
   d67da:	bd30      	pop	{r4, r5, pc}
   d67dc:	2003e7d8 	.word	0x2003e7d8
   d67e0:	2003e7dc 	.word	0x2003e7dc
   d67e4:	2003e4a0 	.word	0x2003e4a0
   d67e8:	000d5631 	.word	0x000d5631

000d67ec <__aeabi_atexit>:
   d67ec:	460b      	mov	r3, r1
   d67ee:	4601      	mov	r1, r0
   d67f0:	4618      	mov	r0, r3
   d67f2:	f000 b917 	b.w	d6a24 <__cxa_atexit>

000d67f6 <_ZdlPvj>:
   d67f6:	f7fd bc50 	b.w	d409a <_ZdlPv>

000d67fa <_ZnajRKSt9nothrow_t>:
   d67fa:	f7fd bc4c 	b.w	d4096 <_Znaj>
	...

000d6800 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d6800:	4901      	ldr	r1, [pc, #4]	; (d6808 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d6802:	f000 b8f9 	b.w	d69f8 <_ZNKSt9type_infoeqERKS_>
   d6806:	bf00      	nop
   d6808:	000d6e8c 	.word	0x000d6e8c

000d680c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d680c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d680e:	2400      	movs	r4, #0
   d6810:	2310      	movs	r3, #16
   d6812:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d6816:	6803      	ldr	r3, [r0, #0]
   d6818:	9400      	str	r4, [sp, #0]
   d681a:	699e      	ldr	r6, [r3, #24]
   d681c:	f88d 4004 	strb.w	r4, [sp, #4]
   d6820:	4615      	mov	r5, r2
   d6822:	466b      	mov	r3, sp
   d6824:	6812      	ldr	r2, [r2, #0]
   d6826:	47b0      	blx	r6
   d6828:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d682c:	f003 0306 	and.w	r3, r3, #6
   d6830:	2b06      	cmp	r3, #6
   d6832:	bf03      	ittte	eq
   d6834:	9b00      	ldreq	r3, [sp, #0]
   d6836:	602b      	streq	r3, [r5, #0]
   d6838:	2001      	moveq	r0, #1
   d683a:	4620      	movne	r0, r4
   d683c:	b004      	add	sp, #16
   d683e:	bd70      	pop	{r4, r5, r6, pc}

000d6840 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d6840:	9800      	ldr	r0, [sp, #0]
   d6842:	4290      	cmp	r0, r2
   d6844:	bf14      	ite	ne
   d6846:	2001      	movne	r0, #1
   d6848:	2006      	moveq	r0, #6
   d684a:	4770      	bx	lr

000d684c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d684c:	b510      	push	{r4, lr}
   d684e:	4b03      	ldr	r3, [pc, #12]	; (d685c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d6850:	6003      	str	r3, [r0, #0]
   d6852:	4604      	mov	r4, r0
   d6854:	f000 f8cd 	bl	d69f2 <_ZNSt9type_infoD1Ev>
   d6858:	4620      	mov	r0, r4
   d685a:	bd10      	pop	{r4, pc}
   d685c:	000d6ecc 	.word	0x000d6ecc

000d6860 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d6860:	b510      	push	{r4, lr}
   d6862:	4604      	mov	r4, r0
   d6864:	f7ff fff2 	bl	d684c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6868:	4620      	mov	r0, r4
   d686a:	2108      	movs	r1, #8
   d686c:	f7ff ffc3 	bl	d67f6 <_ZdlPvj>
   d6870:	4620      	mov	r0, r4
   d6872:	bd10      	pop	{r4, pc}

000d6874 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d6874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6878:	461f      	mov	r7, r3
   d687a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d687e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d6882:	4598      	cmp	r8, r3
   d6884:	4606      	mov	r6, r0
   d6886:	4615      	mov	r5, r2
   d6888:	d107      	bne.n	d689a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d688a:	9907      	ldr	r1, [sp, #28]
   d688c:	f000 f8b4 	bl	d69f8 <_ZNKSt9type_infoeqERKS_>
   d6890:	b118      	cbz	r0, d689a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6892:	7165      	strb	r5, [r4, #5]
   d6894:	2000      	movs	r0, #0
   d6896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d689a:	4639      	mov	r1, r7
   d689c:	4630      	mov	r0, r6
   d689e:	f000 f8ab 	bl	d69f8 <_ZNKSt9type_infoeqERKS_>
   d68a2:	2800      	cmp	r0, #0
   d68a4:	d0f6      	beq.n	d6894 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d68a6:	2301      	movs	r3, #1
   d68a8:	f8c4 8000 	str.w	r8, [r4]
   d68ac:	7125      	strb	r5, [r4, #4]
   d68ae:	71a3      	strb	r3, [r4, #6]
   d68b0:	e7f0      	b.n	d6894 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d68b2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d68b2:	b538      	push	{r3, r4, r5, lr}
   d68b4:	4615      	mov	r5, r2
   d68b6:	461c      	mov	r4, r3
   d68b8:	f000 f89e 	bl	d69f8 <_ZNKSt9type_infoeqERKS_>
   d68bc:	b120      	cbz	r0, d68c8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d68be:	2308      	movs	r3, #8
   d68c0:	60e3      	str	r3, [r4, #12]
   d68c2:	2306      	movs	r3, #6
   d68c4:	6025      	str	r5, [r4, #0]
   d68c6:	7123      	strb	r3, [r4, #4]
   d68c8:	bd38      	pop	{r3, r4, r5, pc}

000d68ca <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d68ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d68cc:	4605      	mov	r5, r0
   d68ce:	460c      	mov	r4, r1
   d68d0:	9201      	str	r2, [sp, #4]
   d68d2:	461e      	mov	r6, r3
   d68d4:	f000 f890 	bl	d69f8 <_ZNKSt9type_infoeqERKS_>
   d68d8:	b950      	cbnz	r0, d68f0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d68da:	2e03      	cmp	r6, #3
   d68dc:	d808      	bhi.n	d68f0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d68de:	6823      	ldr	r3, [r4, #0]
   d68e0:	9a01      	ldr	r2, [sp, #4]
   d68e2:	695b      	ldr	r3, [r3, #20]
   d68e4:	4629      	mov	r1, r5
   d68e6:	4620      	mov	r0, r4
   d68e8:	b002      	add	sp, #8
   d68ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d68ee:	4718      	bx	r3
   d68f0:	b002      	add	sp, #8
   d68f2:	bd70      	pop	{r4, r5, r6, pc}

000d68f4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d68f4:	b510      	push	{r4, lr}
   d68f6:	4b03      	ldr	r3, [pc, #12]	; (d6904 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d68f8:	6003      	str	r3, [r0, #0]
   d68fa:	4604      	mov	r4, r0
   d68fc:	f7ff ffa6 	bl	d684c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6900:	4620      	mov	r0, r4
   d6902:	bd10      	pop	{r4, pc}
   d6904:	000d6f2c 	.word	0x000d6f2c

000d6908 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d6908:	b510      	push	{r4, lr}
   d690a:	4604      	mov	r4, r0
   d690c:	f7ff fff2 	bl	d68f4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d6910:	4620      	mov	r0, r4
   d6912:	210c      	movs	r1, #12
   d6914:	f7ff ff6f 	bl	d67f6 <_ZdlPvj>
   d6918:	4620      	mov	r0, r4
   d691a:	bd10      	pop	{r4, pc}

000d691c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d691c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d691e:	9f08      	ldr	r7, [sp, #32]
   d6920:	4297      	cmp	r7, r2
   d6922:	4605      	mov	r5, r0
   d6924:	460e      	mov	r6, r1
   d6926:	4614      	mov	r4, r2
   d6928:	d00a      	beq.n	d6940 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d692a:	68a8      	ldr	r0, [r5, #8]
   d692c:	6802      	ldr	r2, [r0, #0]
   d692e:	9708      	str	r7, [sp, #32]
   d6930:	6a15      	ldr	r5, [r2, #32]
   d6932:	4631      	mov	r1, r6
   d6934:	4622      	mov	r2, r4
   d6936:	46ac      	mov	ip, r5
   d6938:	b003      	add	sp, #12
   d693a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d693e:	4760      	bx	ip
   d6940:	4619      	mov	r1, r3
   d6942:	9301      	str	r3, [sp, #4]
   d6944:	f000 f858 	bl	d69f8 <_ZNKSt9type_infoeqERKS_>
   d6948:	9b01      	ldr	r3, [sp, #4]
   d694a:	2800      	cmp	r0, #0
   d694c:	d0ed      	beq.n	d692a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d694e:	2006      	movs	r0, #6
   d6950:	b003      	add	sp, #12
   d6952:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6954 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d6954:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6958:	460d      	mov	r5, r1
   d695a:	4619      	mov	r1, r3
   d695c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d6960:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d6964:	4681      	mov	r9, r0
   d6966:	4617      	mov	r7, r2
   d6968:	4698      	mov	r8, r3
   d696a:	f000 f845 	bl	d69f8 <_ZNKSt9type_infoeqERKS_>
   d696e:	b190      	cbz	r0, d6996 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d6970:	2d00      	cmp	r5, #0
   d6972:	6034      	str	r4, [r6, #0]
   d6974:	7137      	strb	r7, [r6, #4]
   d6976:	db09      	blt.n	d698c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d6978:	1961      	adds	r1, r4, r5
   d697a:	458a      	cmp	sl, r1
   d697c:	bf0c      	ite	eq
   d697e:	2106      	moveq	r1, #6
   d6980:	2101      	movne	r1, #1
   d6982:	71b1      	strb	r1, [r6, #6]
   d6984:	2000      	movs	r0, #0
   d6986:	b001      	add	sp, #4
   d6988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d698c:	3502      	adds	r5, #2
   d698e:	d1f9      	bne.n	d6984 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6990:	2301      	movs	r3, #1
   d6992:	71b3      	strb	r3, [r6, #6]
   d6994:	e7f6      	b.n	d6984 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6996:	4554      	cmp	r4, sl
   d6998:	d106      	bne.n	d69a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d699a:	4659      	mov	r1, fp
   d699c:	4648      	mov	r0, r9
   d699e:	f000 f82b 	bl	d69f8 <_ZNKSt9type_infoeqERKS_>
   d69a2:	b108      	cbz	r0, d69a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d69a4:	7177      	strb	r7, [r6, #5]
   d69a6:	e7ed      	b.n	d6984 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d69a8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d69ac:	6803      	ldr	r3, [r0, #0]
   d69ae:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d69b2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d69b6:	69dc      	ldr	r4, [r3, #28]
   d69b8:	463a      	mov	r2, r7
   d69ba:	4643      	mov	r3, r8
   d69bc:	4629      	mov	r1, r5
   d69be:	46a4      	mov	ip, r4
   d69c0:	b001      	add	sp, #4
   d69c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d69c6:	4760      	bx	ip

000d69c8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d69c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d69cc:	4607      	mov	r7, r0
   d69ce:	460c      	mov	r4, r1
   d69d0:	4615      	mov	r5, r2
   d69d2:	461e      	mov	r6, r3
   d69d4:	f7ff ff6d 	bl	d68b2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d69d8:	b948      	cbnz	r0, d69ee <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d69da:	68b8      	ldr	r0, [r7, #8]
   d69dc:	6803      	ldr	r3, [r0, #0]
   d69de:	699f      	ldr	r7, [r3, #24]
   d69e0:	462a      	mov	r2, r5
   d69e2:	4633      	mov	r3, r6
   d69e4:	4621      	mov	r1, r4
   d69e6:	46bc      	mov	ip, r7
   d69e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d69ec:	4760      	bx	ip
   d69ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d69f2 <_ZNSt9type_infoD1Ev>:
   d69f2:	4770      	bx	lr

000d69f4 <_ZNKSt9type_info14__is_pointer_pEv>:
   d69f4:	2000      	movs	r0, #0
   d69f6:	4770      	bx	lr

000d69f8 <_ZNKSt9type_infoeqERKS_>:
   d69f8:	4281      	cmp	r1, r0
   d69fa:	b508      	push	{r3, lr}
   d69fc:	d00e      	beq.n	d6a1c <_ZNKSt9type_infoeqERKS_+0x24>
   d69fe:	6840      	ldr	r0, [r0, #4]
   d6a00:	7803      	ldrb	r3, [r0, #0]
   d6a02:	2b2a      	cmp	r3, #42	; 0x2a
   d6a04:	d00c      	beq.n	d6a20 <_ZNKSt9type_infoeqERKS_+0x28>
   d6a06:	6849      	ldr	r1, [r1, #4]
   d6a08:	780b      	ldrb	r3, [r1, #0]
   d6a0a:	2b2a      	cmp	r3, #42	; 0x2a
   d6a0c:	bf08      	it	eq
   d6a0e:	3101      	addeq	r1, #1
   d6a10:	f000 f850 	bl	d6ab4 <strcmp>
   d6a14:	fab0 f080 	clz	r0, r0
   d6a18:	0940      	lsrs	r0, r0, #5
   d6a1a:	bd08      	pop	{r3, pc}
   d6a1c:	2001      	movs	r0, #1
   d6a1e:	e7fc      	b.n	d6a1a <_ZNKSt9type_infoeqERKS_+0x22>
   d6a20:	2000      	movs	r0, #0
   d6a22:	e7fa      	b.n	d6a1a <_ZNKSt9type_infoeqERKS_+0x22>

000d6a24 <__cxa_atexit>:
   d6a24:	b510      	push	{r4, lr}
   d6a26:	4c05      	ldr	r4, [pc, #20]	; (d6a3c <__cxa_atexit+0x18>)
   d6a28:	4613      	mov	r3, r2
   d6a2a:	b12c      	cbz	r4, d6a38 <__cxa_atexit+0x14>
   d6a2c:	460a      	mov	r2, r1
   d6a2e:	4601      	mov	r1, r0
   d6a30:	2002      	movs	r0, #2
   d6a32:	f3af 8000 	nop.w
   d6a36:	bd10      	pop	{r4, pc}
   d6a38:	4620      	mov	r0, r4
   d6a3a:	e7fc      	b.n	d6a36 <__cxa_atexit+0x12>
   d6a3c:	00000000 	.word	0x00000000

000d6a40 <memcpy>:
   d6a40:	440a      	add	r2, r1
   d6a42:	4291      	cmp	r1, r2
   d6a44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6a48:	d100      	bne.n	d6a4c <memcpy+0xc>
   d6a4a:	4770      	bx	lr
   d6a4c:	b510      	push	{r4, lr}
   d6a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6a52:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6a56:	4291      	cmp	r1, r2
   d6a58:	d1f9      	bne.n	d6a4e <memcpy+0xe>
   d6a5a:	bd10      	pop	{r4, pc}

000d6a5c <memset>:
   d6a5c:	4402      	add	r2, r0
   d6a5e:	4603      	mov	r3, r0
   d6a60:	4293      	cmp	r3, r2
   d6a62:	d100      	bne.n	d6a66 <memset+0xa>
   d6a64:	4770      	bx	lr
   d6a66:	f803 1b01 	strb.w	r1, [r3], #1
   d6a6a:	e7f9      	b.n	d6a60 <memset+0x4>

000d6a6c <srand>:
   d6a6c:	b538      	push	{r3, r4, r5, lr}
   d6a6e:	4b0d      	ldr	r3, [pc, #52]	; (d6aa4 <srand+0x38>)
   d6a70:	681d      	ldr	r5, [r3, #0]
   d6a72:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6a74:	4604      	mov	r4, r0
   d6a76:	b97b      	cbnz	r3, d6a98 <srand+0x2c>
   d6a78:	2018      	movs	r0, #24
   d6a7a:	f7fe fd4b 	bl	d5514 <malloc>
   d6a7e:	4a0a      	ldr	r2, [pc, #40]	; (d6aa8 <srand+0x3c>)
   d6a80:	4b0a      	ldr	r3, [pc, #40]	; (d6aac <srand+0x40>)
   d6a82:	63a8      	str	r0, [r5, #56]	; 0x38
   d6a84:	e9c0 2300 	strd	r2, r3, [r0]
   d6a88:	4b09      	ldr	r3, [pc, #36]	; (d6ab0 <srand+0x44>)
   d6a8a:	6083      	str	r3, [r0, #8]
   d6a8c:	230b      	movs	r3, #11
   d6a8e:	8183      	strh	r3, [r0, #12]
   d6a90:	2201      	movs	r2, #1
   d6a92:	2300      	movs	r3, #0
   d6a94:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6a98:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6a9a:	2200      	movs	r2, #0
   d6a9c:	611c      	str	r4, [r3, #16]
   d6a9e:	615a      	str	r2, [r3, #20]
   d6aa0:	bd38      	pop	{r3, r4, r5, pc}
   d6aa2:	bf00      	nop
   d6aa4:	2003e43c 	.word	0x2003e43c
   d6aa8:	abcd330e 	.word	0xabcd330e
   d6aac:	e66d1234 	.word	0xe66d1234
   d6ab0:	0005deec 	.word	0x0005deec

000d6ab4 <strcmp>:
   d6ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6abc:	2a01      	cmp	r2, #1
   d6abe:	bf28      	it	cs
   d6ac0:	429a      	cmpcs	r2, r3
   d6ac2:	d0f7      	beq.n	d6ab4 <strcmp>
   d6ac4:	1ad0      	subs	r0, r2, r3
   d6ac6:	4770      	bx	lr

000d6ac8 <strcpy>:
   d6ac8:	4603      	mov	r3, r0
   d6aca:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6ace:	f803 2b01 	strb.w	r2, [r3], #1
   d6ad2:	2a00      	cmp	r2, #0
   d6ad4:	d1f9      	bne.n	d6aca <strcpy+0x2>
   d6ad6:	4770      	bx	lr

000d6ad8 <strlen>:
   d6ad8:	4603      	mov	r3, r0
   d6ada:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6ade:	2a00      	cmp	r2, #0
   d6ae0:	d1fb      	bne.n	d6ada <strlen+0x2>
   d6ae2:	1a18      	subs	r0, r3, r0
   d6ae4:	3801      	subs	r0, #1
   d6ae6:	4770      	bx	lr

000d6ae8 <dynalib_user>:
   d6ae8:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d6af8:	0000 0000 616d 6c64 6269 0073 4e55 4150     ....madlibs.UNPA
   d6b08:	5355 4445 6900 206e 6874 2065 6166 736c     USED.in the fals
   d6b18:	0065 6e41 7773 7265 3120 6820 7361 7720     e.Answer 1 has w
   d6b28:	6e6f 203a 4100 736e 6577 2072 2032 6168     on: .Answer 2 ha
   d6b38:	2073 6f77 3a6e 0020 6e41 7773 7265 3320     s won: .Answer 3
   d6b48:	6820 7361 7720 6e6f 203a 5400 6968 2073      has won: .This 
   d6b58:	6177 2073 6874 2065 6e61 7773 7265 7320     was the answer s
   d6b68:	6c65 6365 6574 3a64 0020 616c 2e62 6874     elected: .lab.th
   d6b78:	7765 6c63 632e 6d6f 4100 6a64 6365 6974     ewcl.com.Adjecti
   d6b88:	6576 4e00 756f 006e 6c50 7275 6c61 6e20     ve.Noun.Plural n
   d6b98:	756f 006e 2041 6176 6163 6974 6e6f 6920     oun.A vacation i
   d6ba8:	2073 6877 6e65 7920 756f 7420 6b61 2065     s when you take 
   d6bb8:	2061 7274 7069 7420 206f 6f73 656d 0020     a trip to some .
   d6bc8:	7020 616c 6563 7720 7469 2068 6f79 7275      place with your
   d6bd8:	0020 6620 6d61 6c69 2e79 5520 7573 6c61      . family. Usual
   d6be8:	796c 7920 756f 6720 206f 6f74 7320 6d6f     ly you go to som
   d6bf8:	2065 6c70 6361 2065 6874 7461 6920 2073     e place that is 
   d6c08:	656e 7261 6120 612f 206e 2000 726f 7520     near a/an . or u
   d6c18:	2070 6e6f 6120 612f 206e 2000 202e 2041     p on a/an . . A 
   d6c28:	6f67 646f 7620 6361 7461 6f69 206e 6c70     good vacation pl
   d6c38:	6361 2065 7369 6f20 656e 7720 6568 6572     ace is one where
   d6c48:	7920 756f 6320 6e61 7220 6469 2065 5300      you can ride .S
   d6c58:	6174 7472 7620 746f 6e69 2e67 0000 4d04     tart voting....M
   d6c68:	5451 0454 0600 514d 7349 7064 0003 0000     QTT...MQIsdp....

000d6c78 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000d6c80 <_ZTVN5spark13EthernetClassE>:
	...
   d6c88:	5613 000d 5609 000d 55ff 000d 55f5 000d     .V...V...U...U..
   d6c98:	55e9 000d 55dd 000d 5875 000d 587d 000d     .U...U..uX..}X..
   d6ca8:	55d1 000d 55c9 000d 55bf 000d 55b5 000d     .U...U...U...U..
   d6cb8:	58ad 000d                                   .X..

000d6cbc <_ZTV7TwoWire>:
	...
   d6cc4:	5631 000d 567b 000d 5653 000d 5633 000d     1V..{V..SV..3V..
   d6cd4:	565b 000d 5663 000d 566b 000d 5673 000d     [V..cV..kV..sV..

000d6ce4 <_ZTV9IPAddress>:
	...
   d6cec:	571d 000d 570d 000d 570f 000d 7061 0070     .W...W...W..app.

000d6cfc <_ZTVN5spark12NetworkClassE>:
	...
   d6d04:	5835 000d 583f 000d 5849 000d 5853 000d     5X..?X..IX..SX..
   d6d14:	585d 000d 5869 000d 5875 000d 587d 000d     ]X..iX..uX..}X..
   d6d24:	5885 000d 5891 000d 5899 000d 58a3 000d     .X...X...X...X..
   d6d34:	58ad 000d 6977 6972 676e 7200 6365 2076     .X..wiring.recv 
   d6d44:	7265 6f72 2072 203d 6425 0000               error = %d..

000d6d50 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6d58:	5d8b 000d 5dad 000d 61c7 000d 5dbb 000d     .]...]...a...]..
   d6d68:	5d8d 000d                                   .]..

000d6d6c <_ZTV9TCPClient>:
	...
   d6d74:	5e39 000d 5e6d 000d 5d09 000d 5d23 000d     9^..m^...]..#]..
   d6d84:	605d 000d 5ecf 000d 5ea1 000d 5d4d 000d     ]`...^...^..M]..
   d6d94:	5f67 000d 61ed 000d 5f03 000d 6111 000d     g_...a..._...a..
   d6da4:	5d4f 000d 5d81 000d 5d35 000d 5dbf 000d     O]...]..5]...]..
   d6db4:	5e81 000d 5925 252d 2d6d 6425 2554 3a48     .^..%Y-%m-%dT%H:
   d6dc4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d6dd4 <_ZTV11USARTSerial>:
	...
   d6ddc:	62fd 000d 6369 000d 6341 000d 59a1 000d     .b..ic..Ac...Y..
   d6dec:	6311 000d 632d 000d 631f 000d 633b 000d     .c..-c...c..;c..
   d6dfc:	62ff 000d 6303 000d                         .b...c..

000d6e04 <_ZTV9USBSerial>:
	...
   d6e0c:	63fd 000d 6465 000d 643b 000d 59a1 000d     .c..ed..;d...Y..
   d6e1c:	642d 000d 63ff 000d 640f 000d 645f 000d     -d...c...d.._d..
   d6e2c:	641f 000d 63f9 000d                         .d...c..

000d6e34 <_ZTVN5spark9WiFiClassE>:
	...
   d6e3c:	6567 000d 655d 000d 6553 000d 6509 000d     ge..]e..Se...e..
   d6e4c:	6547 000d 653b 000d 5875 000d 587d 000d     Ge..;e..uX..}X..
   d6e5c:	652f 000d 6527 000d 651d 000d 6513 000d     /e..'e...e...e..
   d6e6c:	58ad 000d                                   .X..

000d6e70 <_ZSt7nothrow>:
	...

000d6e71 <_ZTSSt19_Sp_make_shared_tag>:
   d6e71:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d6e81:	6572 5f64 6174 0067 0000                     red_tag....

000d6e8c <_ZTISt19_Sp_make_shared_tag>:
   d6e8c:	6ecc 000d 6e71 000d                         .n..qn..

000d6e94 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d6e94:	6f2c 000d 6ea0 000d 6f50 000d               ,o...n..Po..

000d6ea0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d6ea0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d6eb0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d6ec0:	0045 0000                                   E...

000d6ec4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d6ec4:	0000 0000 6e94 000d 684d 000d 6861 000d     .....n..Mh..ah..
   d6ed4:	69f5 000d 69f5 000d 68cb 000d 680d 000d     .i...i...h...h..
   d6ee4:	68b3 000d 6875 000d 6841 000d               .h..uh..Ah..

000d6ef0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d6ef0:	6f2c 000d 6efc 000d 6e94 000d               ,o...n...n..

000d6efc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d6efc:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d6f0c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d6f1c:	666e 456f 0000 0000                         nfoE....

000d6f24 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d6f24:	0000 0000 6ef0 000d 68f5 000d 6909 000d     .....n...h...i..
   d6f34:	69f5 000d 69f5 000d 68cb 000d 680d 000d     .i...i...h...h..
   d6f44:	69c9 000d 6955 000d 691d 000d               .i..Ui...i..

000d6f50 <_ZTISt9type_info>:
   d6f50:	6ecc 000d 6f58 000d                         .n..Xo..

000d6f58 <_ZTSSt9type_info>:
   d6f58:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d6f65 <link_const_variable_data_end>:
   d6f65:	00          	.byte	0x00
	...

000d6f68 <link_constructors_location>:
   d6f68:	000d4601 	.word	0x000d4601
   d6f6c:	000d558d 	.word	0x000d558d
   d6f70:	000d561d 	.word	0x000d561d
   d6f74:	000d5825 	.word	0x000d5825
   d6f78:	000d598d 	.word	0x000d598d
   d6f7c:	000d5a75 	.word	0x000d5a75
   d6f80:	000d5ccd 	.word	0x000d5ccd
   d6f84:	000d62e9 	.word	0x000d62e9
   d6f88:	000d6571 	.word	0x000d6571

000d6f8c <link_constructors_end>:
   d6f8c:	00000000 	.word	0x00000000
